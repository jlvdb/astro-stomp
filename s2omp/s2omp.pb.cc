// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2omp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s2omp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace s2omp {

namespace {

const ::google::protobuf::Descriptor* PointProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PixelProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PixelProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointVectorProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointVectorProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PixelVectorProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PixelVectorProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldUnionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldUnionProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FieldUnionProto_FieldType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TreeUnionProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeUnionProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_s2omp_2eproto() {
  protobuf_AddDesc_s2omp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "s2omp.proto");
  GOOGLE_CHECK(file != NULL);
  PointProto_descriptor_ = file->message_type(0);
  static const int PointProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointProto, weight_),
  };
  PointProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointProto_descriptor_,
      PointProto::default_instance_,
      PointProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointProto));
  PixelProto_descriptor_ = file->message_type(1);
  static const int PixelProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelProto, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelProto, intensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelProto, n_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelProto, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelProto, max_points_),
  };
  PixelProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PixelProto_descriptor_,
      PixelProto::default_instance_,
      PixelProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PixelProto));
  PointVectorProto_descriptor_ = file->message_type(2);
  static const int PointVectorProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointVectorProto, point_),
  };
  PointVectorProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointVectorProto_descriptor_,
      PointVectorProto::default_instance_,
      PointVectorProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointVectorProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointVectorProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointVectorProto));
  PixelVectorProto_descriptor_ = file->message_type(3);
  static const int PixelVectorProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelVectorProto, pixel_),
  };
  PixelVectorProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PixelVectorProto_descriptor_,
      PixelVectorProto::default_instance_,
      PixelVectorProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelVectorProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelVectorProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PixelVectorProto));
  FieldUnionProto_descriptor_ = file->message_type(4);
  static const int FieldUnionProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldUnionProto, field_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldUnionProto, pixel_),
  };
  FieldUnionProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldUnionProto_descriptor_,
      FieldUnionProto::default_instance_,
      FieldUnionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldUnionProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldUnionProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldUnionProto));
  FieldUnionProto_FieldType_descriptor_ = FieldUnionProto_descriptor_->enum_type(0);
  TreeUnionProto_descriptor_ = file->message_type(5);
  static const int TreeUnionProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeUnionProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeUnionProto, node_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeUnionProto, point_),
  };
  TreeUnionProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeUnionProto_descriptor_,
      TreeUnionProto::default_instance_,
      TreeUnionProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeUnionProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeUnionProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeUnionProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_s2omp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointProto_descriptor_, &PointProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PixelProto_descriptor_, &PixelProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointVectorProto_descriptor_, &PointVectorProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PixelVectorProto_descriptor_, &PixelVectorProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldUnionProto_descriptor_, &FieldUnionProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeUnionProto_descriptor_, &TreeUnionProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_s2omp_2eproto() {
  delete PointProto::default_instance_;
  delete PointProto_reflection_;
  delete PixelProto::default_instance_;
  delete PixelProto_reflection_;
  delete PointVectorProto::default_instance_;
  delete PointVectorProto_reflection_;
  delete PixelVectorProto::default_instance_;
  delete PixelVectorProto_reflection_;
  delete FieldUnionProto::default_instance_;
  delete FieldUnionProto_reflection_;
  delete TreeUnionProto::default_instance_;
  delete TreeUnionProto_reflection_;
}

void protobuf_AddDesc_s2omp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013s2omp.proto\022\005s2omp\"(\n\nPointProto\022\n\n\002id"
    "\030\001 \002(\004\022\016\n\006weight\030\002 \002(\001\"\203\001\n\nPixelProto\022\n\n"
    "\002id\030\001 \002(\004\022\016\n\006weight\030\002 \001(\001\022\021\n\tintensity\030\003"
    " \001(\001\022\020\n\010n_points\030\004 \001(\r\022 \n\005point\030\005 \003(\0132\021."
    "s2omp.PointProto\022\022\n\nmax_points\030\006 \001(\r\"4\n\020"
    "PointVectorProto\022 \n\005point\030\001 \003(\0132\021.s2omp."
    "PointProto\"4\n\020PixelVectorProto\022 \n\005pixel\030"
    "\001 \003(\0132\021.s2omp.PixelProto\"\256\001\n\017FieldUnionP"
    "roto\0224\n\nfield_type\030\001 \002(\0162 .s2omp.FieldUn"
    "ionProto.FieldType\022 \n\005pixel\030\002 \003(\0132\021.s2om"
    "p.PixelProto\"C\n\tFieldType\022\020\n\014SCALAR_FIEL"
    "D\020\000\022\021\n\rDENSITY_FIELD\020\001\022\021\n\rSAMPLED_FIELD\020"
    "\002\"X\n\016TreeUnionProto\022\r\n\005level\030\001 \002(\r\022\025\n\rno"
    "de_capacity\030\002 \001(\r\022 \n\005point\030\003 \003(\0132\021.s2omp"
    ".PointProto", 571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s2omp.proto", &protobuf_RegisterTypes);
  PointProto::default_instance_ = new PointProto();
  PixelProto::default_instance_ = new PixelProto();
  PointVectorProto::default_instance_ = new PointVectorProto();
  PixelVectorProto::default_instance_ = new PixelVectorProto();
  FieldUnionProto::default_instance_ = new FieldUnionProto();
  TreeUnionProto::default_instance_ = new TreeUnionProto();
  PointProto::default_instance_->InitAsDefaultInstance();
  PixelProto::default_instance_->InitAsDefaultInstance();
  PointVectorProto::default_instance_->InitAsDefaultInstance();
  PixelVectorProto::default_instance_->InitAsDefaultInstance();
  FieldUnionProto::default_instance_->InitAsDefaultInstance();
  TreeUnionProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_s2omp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_s2omp_2eproto {
  StaticDescriptorInitializer_s2omp_2eproto() {
    protobuf_AddDesc_s2omp_2eproto();
  }
} static_descriptor_initializer_s2omp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PointProto::kIdFieldNumber;
const int PointProto::kWeightFieldNumber;
#endif  // !_MSC_VER

PointProto::PointProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointProto::InitAsDefaultInstance() {
}

PointProto::PointProto(const PointProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointProto::~PointProto() {
  SharedDtor();
}

void PointProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointProto_descriptor_;
}

const PointProto& PointProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2omp_2eproto();
  return *default_instance_;
}

PointProto* PointProto::default_instance_ = NULL;

PointProto* PointProto::New() const {
  return new PointProto;
}

void PointProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_weight;
        break;
      }

      // required double weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required double weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required double weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required double weight = 2;
    if (has_weight()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointProto::MergeFrom(const PointProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointProto::CopyFrom(const PointProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PointProto::Swap(PointProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointProto_descriptor_;
  metadata.reflection = PointProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PixelProto::kIdFieldNumber;
const int PixelProto::kWeightFieldNumber;
const int PixelProto::kIntensityFieldNumber;
const int PixelProto::kNPointsFieldNumber;
const int PixelProto::kPointFieldNumber;
const int PixelProto::kMaxPointsFieldNumber;
#endif  // !_MSC_VER

PixelProto::PixelProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PixelProto::InitAsDefaultInstance() {
}

PixelProto::PixelProto(const PixelProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PixelProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  weight_ = 0;
  intensity_ = 0;
  n_points_ = 0u;
  max_points_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PixelProto::~PixelProto() {
  SharedDtor();
}

void PixelProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PixelProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PixelProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PixelProto_descriptor_;
}

const PixelProto& PixelProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2omp_2eproto();
  return *default_instance_;
}

PixelProto* PixelProto::default_instance_ = NULL;

PixelProto* PixelProto::New() const {
  return new PixelProto;
}

void PixelProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    weight_ = 0;
    intensity_ = 0;
    n_points_ = 0u;
    max_points_ = 0u;
  }
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PixelProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_weight;
        break;
      }

      // optional double weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_intensity;
        break;
      }

      // optional double intensity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &intensity_)));
          set_has_intensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_n_points;
        break;
      }

      // optional uint32 n_points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_points_)));
          set_has_n_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_point;
        break;
      }

      // repeated .s2omp.PointProto point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_point;
        if (input->ExpectTag(48)) goto parse_max_points;
        break;
      }

      // optional uint32 max_points = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_points_)));
          set_has_max_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PixelProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional double weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight(), output);
  }

  // optional double intensity = 3;
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->intensity(), output);
  }

  // optional uint32 n_points = 4;
  if (has_n_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->n_points(), output);
  }

  // repeated .s2omp.PointProto point = 5;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->point(i), output);
  }

  // optional uint32 max_points = 6;
  if (has_max_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_points(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PixelProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional double weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight(), target);
  }

  // optional double intensity = 3;
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->intensity(), target);
  }

  // optional uint32 n_points = 4;
  if (has_n_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->n_points(), target);
  }

  // repeated .s2omp.PointProto point = 5;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->point(i), target);
  }

  // optional uint32 max_points = 6;
  if (has_max_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_points(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PixelProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional double weight = 2;
    if (has_weight()) {
      total_size += 1 + 8;
    }

    // optional double intensity = 3;
    if (has_intensity()) {
      total_size += 1 + 8;
    }

    // optional uint32 n_points = 4;
    if (has_n_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_points());
    }

    // optional uint32 max_points = 6;
    if (has_max_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_points());
    }

  }
  // repeated .s2omp.PointProto point = 5;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PixelProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PixelProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PixelProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PixelProto::MergeFrom(const PixelProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_intensity()) {
      set_intensity(from.intensity());
    }
    if (from.has_n_points()) {
      set_n_points(from.n_points());
    }
    if (from.has_max_points()) {
      set_max_points(from.max_points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PixelProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PixelProto::CopyFrom(const PixelProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < point_size(); i++) {
    if (!this->point(i).IsInitialized()) return false;
  }
  return true;
}

void PixelProto::Swap(PixelProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(intensity_, other->intensity_);
    std::swap(n_points_, other->n_points_);
    point_.Swap(&other->point_);
    std::swap(max_points_, other->max_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PixelProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PixelProto_descriptor_;
  metadata.reflection = PixelProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointVectorProto::kPointFieldNumber;
#endif  // !_MSC_VER

PointVectorProto::PointVectorProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointVectorProto::InitAsDefaultInstance() {
}

PointVectorProto::PointVectorProto(const PointVectorProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointVectorProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointVectorProto::~PointVectorProto() {
  SharedDtor();
}

void PointVectorProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointVectorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointVectorProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointVectorProto_descriptor_;
}

const PointVectorProto& PointVectorProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2omp_2eproto();
  return *default_instance_;
}

PointVectorProto* PointVectorProto::default_instance_ = NULL;

PointVectorProto* PointVectorProto::New() const {
  return new PointVectorProto;
}

void PointVectorProto::Clear() {
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointVectorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .s2omp.PointProto point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_point;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointVectorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .s2omp.PointProto point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointVectorProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .s2omp.PointProto point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointVectorProto::ByteSize() const {
  int total_size = 0;

  // repeated .s2omp.PointProto point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointVectorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointVectorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointVectorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointVectorProto::MergeFrom(const PointVectorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointVectorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointVectorProto::CopyFrom(const PointVectorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointVectorProto::IsInitialized() const {

  for (int i = 0; i < point_size(); i++) {
    if (!this->point(i).IsInitialized()) return false;
  }
  return true;
}

void PointVectorProto::Swap(PointVectorProto* other) {
  if (other != this) {
    point_.Swap(&other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointVectorProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointVectorProto_descriptor_;
  metadata.reflection = PointVectorProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PixelVectorProto::kPixelFieldNumber;
#endif  // !_MSC_VER

PixelVectorProto::PixelVectorProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PixelVectorProto::InitAsDefaultInstance() {
}

PixelVectorProto::PixelVectorProto(const PixelVectorProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PixelVectorProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PixelVectorProto::~PixelVectorProto() {
  SharedDtor();
}

void PixelVectorProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PixelVectorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PixelVectorProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PixelVectorProto_descriptor_;
}

const PixelVectorProto& PixelVectorProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2omp_2eproto();
  return *default_instance_;
}

PixelVectorProto* PixelVectorProto::default_instance_ = NULL;

PixelVectorProto* PixelVectorProto::New() const {
  return new PixelVectorProto;
}

void PixelVectorProto::Clear() {
  pixel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PixelVectorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .s2omp.PixelProto pixel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pixel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pixel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pixel;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PixelVectorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .s2omp.PixelProto pixel = 1;
  for (int i = 0; i < this->pixel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pixel(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PixelVectorProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .s2omp.PixelProto pixel = 1;
  for (int i = 0; i < this->pixel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pixel(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PixelVectorProto::ByteSize() const {
  int total_size = 0;

  // repeated .s2omp.PixelProto pixel = 1;
  total_size += 1 * this->pixel_size();
  for (int i = 0; i < this->pixel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pixel(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PixelVectorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PixelVectorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PixelVectorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PixelVectorProto::MergeFrom(const PixelVectorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  pixel_.MergeFrom(from.pixel_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PixelVectorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PixelVectorProto::CopyFrom(const PixelVectorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelVectorProto::IsInitialized() const {

  for (int i = 0; i < pixel_size(); i++) {
    if (!this->pixel(i).IsInitialized()) return false;
  }
  return true;
}

void PixelVectorProto::Swap(PixelVectorProto* other) {
  if (other != this) {
    pixel_.Swap(&other->pixel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PixelVectorProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PixelVectorProto_descriptor_;
  metadata.reflection = PixelVectorProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FieldUnionProto_FieldType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldUnionProto_FieldType_descriptor_;
}
bool FieldUnionProto_FieldType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FieldUnionProto_FieldType FieldUnionProto::SCALAR_FIELD;
const FieldUnionProto_FieldType FieldUnionProto::DENSITY_FIELD;
const FieldUnionProto_FieldType FieldUnionProto::SAMPLED_FIELD;
const FieldUnionProto_FieldType FieldUnionProto::FieldType_MIN;
const FieldUnionProto_FieldType FieldUnionProto::FieldType_MAX;
const int FieldUnionProto::FieldType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FieldUnionProto::kFieldTypeFieldNumber;
const int FieldUnionProto::kPixelFieldNumber;
#endif  // !_MSC_VER

FieldUnionProto::FieldUnionProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FieldUnionProto::InitAsDefaultInstance() {
}

FieldUnionProto::FieldUnionProto(const FieldUnionProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FieldUnionProto::SharedCtor() {
  _cached_size_ = 0;
  field_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldUnionProto::~FieldUnionProto() {
  SharedDtor();
}

void FieldUnionProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldUnionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldUnionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldUnionProto_descriptor_;
}

const FieldUnionProto& FieldUnionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2omp_2eproto();
  return *default_instance_;
}

FieldUnionProto* FieldUnionProto::default_instance_ = NULL;

FieldUnionProto* FieldUnionProto::New() const {
  return new FieldUnionProto;
}

void FieldUnionProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    field_type_ = 0;
  }
  pixel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldUnionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .s2omp.FieldUnionProto.FieldType field_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::s2omp::FieldUnionProto_FieldType_IsValid(value)) {
            set_field_type(static_cast< ::s2omp::FieldUnionProto_FieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pixel;
        break;
      }

      // repeated .s2omp.PixelProto pixel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pixel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pixel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pixel;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FieldUnionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .s2omp.FieldUnionProto.FieldType field_type = 1;
  if (has_field_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->field_type(), output);
  }

  // repeated .s2omp.PixelProto pixel = 2;
  for (int i = 0; i < this->pixel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pixel(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FieldUnionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .s2omp.FieldUnionProto.FieldType field_type = 1;
  if (has_field_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->field_type(), target);
  }

  // repeated .s2omp.PixelProto pixel = 2;
  for (int i = 0; i < this->pixel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pixel(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FieldUnionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .s2omp.FieldUnionProto.FieldType field_type = 1;
    if (has_field_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->field_type());
    }

  }
  // repeated .s2omp.PixelProto pixel = 2;
  total_size += 1 * this->pixel_size();
  for (int i = 0; i < this->pixel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pixel(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldUnionProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldUnionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldUnionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldUnionProto::MergeFrom(const FieldUnionProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  pixel_.MergeFrom(from.pixel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_type()) {
      set_field_type(from.field_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldUnionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldUnionProto::CopyFrom(const FieldUnionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldUnionProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pixel_size(); i++) {
    if (!this->pixel(i).IsInitialized()) return false;
  }
  return true;
}

void FieldUnionProto::Swap(FieldUnionProto* other) {
  if (other != this) {
    std::swap(field_type_, other->field_type_);
    pixel_.Swap(&other->pixel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldUnionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldUnionProto_descriptor_;
  metadata.reflection = FieldUnionProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreeUnionProto::kLevelFieldNumber;
const int TreeUnionProto::kNodeCapacityFieldNumber;
const int TreeUnionProto::kPointFieldNumber;
#endif  // !_MSC_VER

TreeUnionProto::TreeUnionProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreeUnionProto::InitAsDefaultInstance() {
}

TreeUnionProto::TreeUnionProto(const TreeUnionProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreeUnionProto::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  node_capacity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeUnionProto::~TreeUnionProto() {
  SharedDtor();
}

void TreeUnionProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreeUnionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeUnionProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeUnionProto_descriptor_;
}

const TreeUnionProto& TreeUnionProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2omp_2eproto();
  return *default_instance_;
}

TreeUnionProto* TreeUnionProto::default_instance_ = NULL;

TreeUnionProto* TreeUnionProto::New() const {
  return new TreeUnionProto;
}

void TreeUnionProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    node_capacity_ = 0u;
  }
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeUnionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node_capacity;
        break;
      }

      // optional uint32 node_capacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_capacity_)));
          set_has_node_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_point;
        break;
      }

      // repeated .s2omp.PointProto point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_point;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreeUnionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 node_capacity = 2;
  if (has_node_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_capacity(), output);
  }

  // repeated .s2omp.PointProto point = 3;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreeUnionProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 node_capacity = 2;
  if (has_node_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_capacity(), target);
  }

  // repeated .s2omp.PointProto point = 3;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreeUnionProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 node_capacity = 2;
    if (has_node_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_capacity());
    }

  }
  // repeated .s2omp.PointProto point = 3;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeUnionProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeUnionProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeUnionProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeUnionProto::MergeFrom(const TreeUnionProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_node_capacity()) {
      set_node_capacity(from.node_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeUnionProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeUnionProto::CopyFrom(const TreeUnionProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeUnionProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < point_size(); i++) {
    if (!this->point(i).IsInitialized()) return false;
  }
  return true;
}

void TreeUnionProto::Swap(TreeUnionProto* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(node_capacity_, other->node_capacity_);
    point_.Swap(&other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeUnionProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeUnionProto_descriptor_;
  metadata.reflection = TreeUnionProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace s2omp

// @@protoc_insertion_point(global_scope)
