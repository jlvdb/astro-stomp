# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _stomp
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _stomp.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _stomp.PySwigIterator_value(*args)
    def incr(*args): return _stomp.PySwigIterator_incr(*args)
    def decr(*args): return _stomp.PySwigIterator_decr(*args)
    def distance(*args): return _stomp.PySwigIterator_distance(*args)
    def equal(*args): return _stomp.PySwigIterator_equal(*args)
    def copy(*args): return _stomp.PySwigIterator_copy(*args)
    def next(*args): return _stomp.PySwigIterator_next(*args)
    def previous(*args): return _stomp.PySwigIterator_previous(*args)
    def advance(*args): return _stomp.PySwigIterator_advance(*args)
    def __eq__(*args): return _stomp.PySwigIterator___eq__(*args)
    def __ne__(*args): return _stomp.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _stomp.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _stomp.PySwigIterator___isub__(*args)
    def __add__(*args): return _stomp.PySwigIterator___add__(*args)
    def __sub__(*args): return _stomp.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _stomp.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class GenericIterator:
    def __init__(self, begin_iter_method, deref_method, incr_method):
        self.it = begin_iter_method()
        self.incr   = incr_method
        self.deref  = deref_method

    def __iter__(self):
        return self

    def next(self):
        obj = self.deref( self.it )
        if obj is not None:
            self.incr( self.it )
            return obj
        else:
            raise StopIteration

DoubleLT = _stomp.DoubleLT
DoubleLE = _stomp.DoubleLE
DoubleGT = _stomp.DoubleGT
DoubleGE = _stomp.DoubleGE
DoubleEQ = _stomp.DoubleEQ
MostSignificantBit = _stomp.MostSignificantBit
class AngularBin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngularBin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AngularBin, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _stomp.delete_AngularBin
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _stomp.new_AngularBin(*args)
        try: self.this.append(this)
        except: self.this = this
    def ClearRegions(*args): return _stomp.AngularBin_ClearRegions(*args)
    def InitializeRegions(*args): return _stomp.AngularBin_InitializeRegions(*args)
    def SetResolution(*args): return _stomp.AngularBin_SetResolution(*args)
    def CalculateResolution(*args): return _stomp.AngularBin_CalculateResolution(*args)
    def SetThetaMin(*args): return _stomp.AngularBin_SetThetaMin(*args)
    def SetThetaMax(*args): return _stomp.AngularBin_SetThetaMax(*args)
    def SetTheta(*args): return _stomp.AngularBin_SetTheta(*args)
    def WithinBounds(*args): return _stomp.AngularBin_WithinBounds(*args)
    def WithinSin2Bounds(*args): return _stomp.AngularBin_WithinSin2Bounds(*args)
    def WithinCosBounds(*args): return _stomp.AngularBin_WithinCosBounds(*args)
    def Area(*args): return _stomp.AngularBin_Area(*args)
    def PoissonNoise(*args): return _stomp.AngularBin_PoissonNoise(*args)
    def AddToPixelWtheta(*args): return _stomp.AngularBin_AddToPixelWtheta(*args)
    def AddToWeight(*args): return _stomp.AngularBin_AddToWeight(*args)
    def AddToCounter(*args): return _stomp.AngularBin_AddToCounter(*args)
    def MoveWeightToGalGal(*args): return _stomp.AngularBin_MoveWeightToGalGal(*args)
    def MoveWeightToGalRand(*args): return _stomp.AngularBin_MoveWeightToGalRand(*args)
    def MoveWeightToRandGal(*args): return _stomp.AngularBin_MoveWeightToRandGal(*args)
    def MoveWeightToRandRand(*args): return _stomp.AngularBin_MoveWeightToRandRand(*args)
    def RescaleGalGal(*args): return _stomp.AngularBin_RescaleGalGal(*args)
    def RescaleGalRand(*args): return _stomp.AngularBin_RescaleGalRand(*args)
    def RescaleRandGal(*args): return _stomp.AngularBin_RescaleRandGal(*args)
    def RescaleRandRand(*args): return _stomp.AngularBin_RescaleRandRand(*args)
    def Reset(*args): return _stomp.AngularBin_Reset(*args)
    def ResetPixelWtheta(*args): return _stomp.AngularBin_ResetPixelWtheta(*args)
    def ResetWeight(*args): return _stomp.AngularBin_ResetWeight(*args)
    def ResetCounter(*args): return _stomp.AngularBin_ResetCounter(*args)
    def ResetGalGal(*args): return _stomp.AngularBin_ResetGalGal(*args)
    def ResetGalRand(*args): return _stomp.AngularBin_ResetGalRand(*args)
    def ResetRandGal(*args): return _stomp.AngularBin_ResetRandGal(*args)
    def ResetRandRand(*args): return _stomp.AngularBin_ResetRandRand(*args)
    def Resolution(*args): return _stomp.AngularBin_Resolution(*args)
    def NRegion(*args): return _stomp.AngularBin_NRegion(*args)
    def Theta(*args): return _stomp.AngularBin_Theta(*args)
    def ThetaMin(*args): return _stomp.AngularBin_ThetaMin(*args)
    def ThetaMax(*args): return _stomp.AngularBin_ThetaMax(*args)
    def Sin2ThetaMin(*args): return _stomp.AngularBin_Sin2ThetaMin(*args)
    def Sin2ThetaMax(*args): return _stomp.AngularBin_Sin2ThetaMax(*args)
    def CosThetaMin(*args): return _stomp.AngularBin_CosThetaMin(*args)
    def CosThetaMax(*args): return _stomp.AngularBin_CosThetaMax(*args)
    def Wtheta(*args): return _stomp.AngularBin_Wtheta(*args)
    def WthetaError(*args): return _stomp.AngularBin_WthetaError(*args)
    def WeightedCrossCorrelation(*args): return _stomp.AngularBin_WeightedCrossCorrelation(*args)
    def PixelWtheta(*args): return _stomp.AngularBin_PixelWtheta(*args)
    def PixelWeight(*args): return _stomp.AngularBin_PixelWeight(*args)
    def Weight(*args): return _stomp.AngularBin_Weight(*args)
    def Counter(*args): return _stomp.AngularBin_Counter(*args)
    def GalGal(*args): return _stomp.AngularBin_GalGal(*args)
    def GalRand(*args): return _stomp.AngularBin_GalRand(*args)
    def RandGal(*args): return _stomp.AngularBin_RandGal(*args)
    def RandRand(*args): return _stomp.AngularBin_RandRand(*args)
    def MeanWtheta(*args): return _stomp.AngularBin_MeanWtheta(*args)
    def MeanWthetaError(*args): return _stomp.AngularBin_MeanWthetaError(*args)
    def MeanWeightedCrossCorrelation(*args): return _stomp.AngularBin_MeanWeightedCrossCorrelation(*args)
    def MeanWeightedCrossCorrelationError(*args): return _stomp.AngularBin_MeanWeightedCrossCorrelationError(*args)
    def MeanWeight(*args): return _stomp.AngularBin_MeanWeight(*args)
    def MeanCounter(*args): return _stomp.AngularBin_MeanCounter(*args)
    def MeanGalGal(*args): return _stomp.AngularBin_MeanGalGal(*args)
    def MeanGalRand(*args): return _stomp.AngularBin_MeanGalRand(*args)
    def MeanRandGal(*args): return _stomp.AngularBin_MeanRandGal(*args)
    def MeanRandRand(*args): return _stomp.AngularBin_MeanRandRand(*args)
    __swig_getmethods__["ThetaOrder"] = lambda x: _stomp.AngularBin_ThetaOrder
    if _newclass:ThetaOrder = staticmethod(_stomp.AngularBin_ThetaOrder)
    __swig_getmethods__["SinThetaOrder"] = lambda x: _stomp.AngularBin_SinThetaOrder
    if _newclass:SinThetaOrder = staticmethod(_stomp.AngularBin_SinThetaOrder)
    __swig_getmethods__["ReverseResolutionOrder"] = lambda x: _stomp.AngularBin_ReverseResolutionOrder
    if _newclass:ReverseResolutionOrder = staticmethod(_stomp.AngularBin_ReverseResolutionOrder)
AngularBin_swigregister = _stomp.AngularBin_swigregister
AngularBin_swigregister(AngularBin)
cvar = _stomp.cvar
Pi = cvar.Pi
DegToRad = cvar.DegToRad
RadToDeg = cvar.RadToDeg
StradToDeg = cvar.StradToDeg
EtaOffSet = cvar.EtaOffSet
SurveyCenterRA = cvar.SurveyCenterRA
SurveyCenterDEC = cvar.SurveyCenterDEC
Node = cvar.Node
EtaPole = cvar.EtaPole
Nx0 = cvar.Nx0
Ny0 = cvar.Ny0
HPixLevel = cvar.HPixLevel
MaxPixelLevel = cvar.MaxPixelLevel
HPixResolution = cvar.HPixResolution
MaxPixelResolution = cvar.MaxPixelResolution
ResolutionLevels = cvar.ResolutionLevels
HPixArea = cvar.HPixArea
MaxPixnum = cvar.MaxPixnum
MaxSuperpixnum = cvar.MaxSuperpixnum
AngularBin_ThetaOrder = _stomp.AngularBin_ThetaOrder
AngularBin_SinThetaOrder = _stomp.AngularBin_SinThetaOrder
AngularBin_ReverseResolutionOrder = _stomp.AngularBin_ReverseResolutionOrder

class RadialBin(AngularBin):
    __swig_setmethods__ = {}
    for _s in [AngularBin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadialBin, name, value)
    __swig_getmethods__ = {}
    for _s in [AngularBin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RadialBin, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _stomp.delete_RadialBin
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _stomp.new_RadialBin(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetRadiusMin(*args): return _stomp.RadialBin_SetRadiusMin(*args)
    def SetRadiusMax(*args): return _stomp.RadialBin_SetRadiusMax(*args)
    def SetRadius(*args): return _stomp.RadialBin_SetRadius(*args)
    def SetRedshift(*args): return _stomp.RadialBin_SetRedshift(*args)
    def WithinRadialBounds(*args): return _stomp.RadialBin_WithinRadialBounds(*args)
    def Radius(*args): return _stomp.RadialBin_Radius(*args)
    def RadiusMin(*args): return _stomp.RadialBin_RadiusMin(*args)
    def RadiusMax(*args): return _stomp.RadialBin_RadiusMax(*args)
    def Redshift(*args): return _stomp.RadialBin_Redshift(*args)
    __swig_getmethods__["RadialOrder"] = lambda x: _stomp.RadialBin_RadialOrder
    if _newclass:RadialOrder = staticmethod(_stomp.RadialBin_RadialOrder)
    __swig_getmethods__["ReverseResolutionOrder"] = lambda x: _stomp.RadialBin_ReverseResolutionOrder
    if _newclass:ReverseResolutionOrder = staticmethod(_stomp.RadialBin_ReverseResolutionOrder)
RadialBin_swigregister = _stomp.RadialBin_swigregister
RadialBin_swigregister(RadialBin)
RadialBin_RadialOrder = _stomp.RadialBin_RadialOrder
RadialBin_ReverseResolutionOrder = _stomp.RadialBin_ReverseResolutionOrder

class AngularCorrelation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngularCorrelation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AngularCorrelation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_AngularCorrelation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_AngularCorrelation
    __del__ = lambda self : None;
    def AssignBinResolutions(*args): return _stomp.AngularCorrelation_AssignBinResolutions(*args)
    def SetMaxResolution(*args): return _stomp.AngularCorrelation_SetMaxResolution(*args)
    def SetMinResolution(*args): return _stomp.AngularCorrelation_SetMinResolution(*args)
    def AutoMaxResolution(*args): return _stomp.AngularCorrelation_AutoMaxResolution(*args)
    def InitializeRegions(*args): return _stomp.AngularCorrelation_InitializeRegions(*args)
    def ClearRegions(*args): return _stomp.AngularCorrelation_ClearRegions(*args)
    def NRegion(*args): return _stomp.AngularCorrelation_NRegion(*args)
    def FindAutoCorrelation(*args): return _stomp.AngularCorrelation_FindAutoCorrelation(*args)
    def FindCrossCorrelation(*args): return _stomp.AngularCorrelation_FindCrossCorrelation(*args)
    def FindAutoCorrelationWithRegions(*args): return _stomp.AngularCorrelation_FindAutoCorrelationWithRegions(*args)
    def FindCrossCorrelationWithRegions(*args): return _stomp.AngularCorrelation_FindCrossCorrelationWithRegions(*args)
    def FindPixelAutoCorrelation(*args): return _stomp.AngularCorrelation_FindPixelAutoCorrelation(*args)
    def FindPixelCrossCorrelation(*args): return _stomp.AngularCorrelation_FindPixelCrossCorrelation(*args)
    def FindPairAutoCorrelation(*args): return _stomp.AngularCorrelation_FindPairAutoCorrelation(*args)
    def FindPairCrossCorrelation(*args): return _stomp.AngularCorrelation_FindPairCrossCorrelation(*args)
    def Write(*args): return _stomp.AngularCorrelation_Write(*args)
    def UseOnlyPixels(*args): return _stomp.AngularCorrelation_UseOnlyPixels(*args)
    def UseOnlyPairs(*args): return _stomp.AngularCorrelation_UseOnlyPairs(*args)
    def ThetaMin(*args): return _stomp.AngularCorrelation_ThetaMin(*args)
    def ThetaMax(*args): return _stomp.AngularCorrelation_ThetaMax(*args)
    def Sin2ThetaMin(*args): return _stomp.AngularCorrelation_Sin2ThetaMin(*args)
    def Sin2ThetaMax(*args): return _stomp.AngularCorrelation_Sin2ThetaMax(*args)
    def Begin(*args): return _stomp.AngularCorrelation_Begin(*args)
    def End(*args): return _stomp.AngularCorrelation_End(*args)
    def Find(*args): return _stomp.AngularCorrelation_Find(*args)
    def BinIterator(*args): return _stomp.AngularCorrelation_BinIterator(*args)
    def NBins(*args): return _stomp.AngularCorrelation_NBins(*args)
    def MinResolution(*args): return _stomp.AngularCorrelation_MinResolution(*args)
    def MaxResolution(*args): return _stomp.AngularCorrelation_MaxResolution(*args)
    def Covariance(*args): return _stomp.AngularCorrelation_Covariance(*args)
    def WriteCovariance(*args): return _stomp.AngularCorrelation_WriteCovariance(*args)
    def Bins(self):
        "Returns an iterator for Bins."
        return GenericIterator(
                self._begin_Bins,
                self._deref_Bins,
                _iter_incr
                 )

    def _begin_Bins(*args): return _stomp.AngularCorrelation__begin_Bins(*args)
    def _deref_Bins(*args): return _stomp.AngularCorrelation__deref_Bins(*args)
AngularCorrelation_swigregister = _stomp.AngularCorrelation_swigregister
AngularCorrelation_swigregister(AngularCorrelation)

class Pixel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pixel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_Pixel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_Pixel
    __del__ = lambda self : None;
    def __lt__(*args): return _stomp.Pixel___lt__(*args)
    def __eq__(*args): return _stomp.Pixel___eq__(*args)
    def __ne__(*args): return _stomp.Pixel___ne__(*args)
    def SetPixnumFromAng(*args): return _stomp.Pixel_SetPixnumFromAng(*args)
    def SetResolution(*args): return _stomp.Pixel_SetResolution(*args)
    def SetLevel(*args): return _stomp.Pixel_SetLevel(*args)
    def SetPixnumFromXY(*args): return _stomp.Pixel_SetPixnumFromXY(*args)
    def SetWeight(*args): return _stomp.Pixel_SetWeight(*args)
    def Level(*args): return _stomp.Pixel_Level(*args)
    def Resolution(*args): return _stomp.Pixel_Resolution(*args)
    def PixelX(*args): return _stomp.Pixel_PixelX(*args)
    def PixelY(*args): return _stomp.Pixel_PixelY(*args)
    def Weight(*args): return _stomp.Pixel_Weight(*args)
    def ReverseWeight(*args): return _stomp.Pixel_ReverseWeight(*args)
    def InvertWeight(*args): return _stomp.Pixel_InvertWeight(*args)
    def SetToSuperPix(*args): return _stomp.Pixel_SetToSuperPix(*args)
    def SetToLevel(*args): return _stomp.Pixel_SetToLevel(*args)
    def SubPix(*args): return _stomp.Pixel_SubPix(*args)
    def FirstCohort(*args): return _stomp.Pixel_FirstCohort(*args)
    __swig_getmethods__["Area"] = lambda x: _stomp.Pixel_Area
    if _newclass:Area = staticmethod(_stomp.Pixel_Area)
    def Superpixnum(*args): return _stomp.Pixel_Superpixnum(*args)
    def HPixnum(*args): return _stomp.Pixel_HPixnum(*args)
    def Pixnum(*args): return _stomp.Pixel_Pixnum(*args)
    def Contains(*args): return _stomp.Pixel_Contains(*args)
    def WithinBounds(*args): return _stomp.Pixel_WithinBounds(*args)
    def IntersectsBounds(*args): return _stomp.Pixel_IntersectsBounds(*args)
    def WithinRadius(*args): return _stomp.Pixel_WithinRadius(*args)
    __swig_getmethods__["WithinAnnulus"] = lambda x: _stomp.Pixel_WithinAnnulus
    if _newclass:WithinAnnulus = staticmethod(_stomp.Pixel_WithinAnnulus)
    def BoundingRadius(*args): return _stomp.Pixel_BoundingRadius(*args)
    __swig_getmethods__["XYBounds"] = lambda x: _stomp.Pixel_XYBounds
    if _newclass:XYBounds = staticmethod(_stomp.Pixel_XYBounds)
    def EtaStep(*args): return _stomp.Pixel_EtaStep(*args)
    def NearEdgeDistance(*args): return _stomp.Pixel_NearEdgeDistance(*args)
    def FarEdgeDistance(*args): return _stomp.Pixel_FarEdgeDistance(*args)
    def NearCornerDistance(*args): return _stomp.Pixel_NearCornerDistance(*args)
    def FarCornerDistance(*args): return _stomp.Pixel_FarCornerDistance(*args)
    def EdgeDistances(*args): return _stomp.Pixel_EdgeDistances(*args)
    def IsWithinRadius(*args): return _stomp.Pixel_IsWithinRadius(*args)
    def IsWithinAnnulus(*args): return _stomp.Pixel_IsWithinAnnulus(*args)
    def IntersectsAnnulus(*args): return _stomp.Pixel_IntersectsAnnulus(*args)
    def Stripe(*args): return _stomp.Pixel_Stripe(*args)
    def RA(*args): return _stomp.Pixel_RA(*args)
    def DEC(*args): return _stomp.Pixel_DEC(*args)
    def GalLon(*args): return _stomp.Pixel_GalLon(*args)
    def GalLat(*args): return _stomp.Pixel_GalLat(*args)
    def Ang(*args): return _stomp.Pixel_Ang(*args)
    def Lambda(*args): return _stomp.Pixel_Lambda(*args)
    def Eta(*args): return _stomp.Pixel_Eta(*args)
    def UnitSphereX(*args): return _stomp.Pixel_UnitSphereX(*args)
    def UnitSphereY(*args): return _stomp.Pixel_UnitSphereY(*args)
    def UnitSphereZ(*args): return _stomp.Pixel_UnitSphereZ(*args)
    def LambdaMin(*args): return _stomp.Pixel_LambdaMin(*args)
    def LambdaMax(*args): return _stomp.Pixel_LambdaMax(*args)
    def EtaMin(*args): return _stomp.Pixel_EtaMin(*args)
    def EtaMax(*args): return _stomp.Pixel_EtaMax(*args)
    def EtaMaxContinuous(*args): return _stomp.Pixel_EtaMaxContinuous(*args)
    def SurveyContinuous(*args): return _stomp.Pixel_SurveyContinuous(*args)
    def DECMin(*args): return _stomp.Pixel_DECMin(*args)
    def DECMax(*args): return _stomp.Pixel_DECMax(*args)
    def RAMin(*args): return _stomp.Pixel_RAMin(*args)
    def RAMax(*args): return _stomp.Pixel_RAMax(*args)
    def RAMaxContinuous(*args): return _stomp.Pixel_RAMaxContinuous(*args)
    def EquatorialContinuous(*args): return _stomp.Pixel_EquatorialContinuous(*args)
    def GalLatMin(*args): return _stomp.Pixel_GalLatMin(*args)
    def GalLatMax(*args): return _stomp.Pixel_GalLatMax(*args)
    def GalLonMin(*args): return _stomp.Pixel_GalLonMin(*args)
    def GalLonMax(*args): return _stomp.Pixel_GalLonMax(*args)
    def GalLonMaxContinuous(*args): return _stomp.Pixel_GalLonMaxContinuous(*args)
    def GalacticContinuous(*args): return _stomp.Pixel_GalacticContinuous(*args)
    def ContinuousBounds(*args): return _stomp.Pixel_ContinuousBounds(*args)
    def UnitSphereX_UL(*args): return _stomp.Pixel_UnitSphereX_UL(*args)
    def UnitSphereY_UL(*args): return _stomp.Pixel_UnitSphereY_UL(*args)
    def UnitSphereZ_UL(*args): return _stomp.Pixel_UnitSphereZ_UL(*args)
    def UnitSphereX_UR(*args): return _stomp.Pixel_UnitSphereX_UR(*args)
    def UnitSphereY_UR(*args): return _stomp.Pixel_UnitSphereY_UR(*args)
    def UnitSphereZ_UR(*args): return _stomp.Pixel_UnitSphereZ_UR(*args)
    def UnitSphereX_LL(*args): return _stomp.Pixel_UnitSphereX_LL(*args)
    def UnitSphereY_LL(*args): return _stomp.Pixel_UnitSphereY_LL(*args)
    def UnitSphereZ_LL(*args): return _stomp.Pixel_UnitSphereZ_LL(*args)
    def UnitSphereX_LR(*args): return _stomp.Pixel_UnitSphereX_LR(*args)
    def UnitSphereY_LR(*args): return _stomp.Pixel_UnitSphereY_LR(*args)
    def UnitSphereZ_LR(*args): return _stomp.Pixel_UnitSphereZ_LR(*args)
    def Iterate(*args): return _stomp.Pixel_Iterate(*args)
    def PixelX0(*args): return _stomp.Pixel_PixelX0(*args)
    def PixelY0(*args): return _stomp.Pixel_PixelY0(*args)
    def PixelX1(*args): return _stomp.Pixel_PixelX1(*args)
    def PixelY1(*args): return _stomp.Pixel_PixelY1(*args)
    def GenerateRandomPoints(*args): return _stomp.Pixel_GenerateRandomPoints(*args)
    __swig_getmethods__["ResolutionToLevel"] = lambda x: _stomp.Pixel_ResolutionToLevel
    if _newclass:ResolutionToLevel = staticmethod(_stomp.Pixel_ResolutionToLevel)
    __swig_getmethods__["LevelToResolution"] = lambda x: _stomp.Pixel_LevelToResolution
    if _newclass:LevelToResolution = staticmethod(_stomp.Pixel_LevelToResolution)
    __swig_getmethods__["Ang2Pix"] = lambda x: _stomp.Pixel_Ang2Pix
    if _newclass:Ang2Pix = staticmethod(_stomp.Pixel_Ang2Pix)
    __swig_getmethods__["Pix2Ang"] = lambda x: _stomp.Pixel_Pix2Ang
    if _newclass:Pix2Ang = staticmethod(_stomp.Pixel_Pix2Ang)
    __swig_getmethods__["Pix2HPix"] = lambda x: _stomp.Pixel_Pix2HPix
    if _newclass:Pix2HPix = staticmethod(_stomp.Pixel_Pix2HPix)
    __swig_getmethods__["HPix2Pix"] = lambda x: _stomp.Pixel_HPix2Pix
    if _newclass:HPix2Pix = staticmethod(_stomp.Pixel_HPix2Pix)
    __swig_getmethods__["SuperPix"] = lambda x: _stomp.Pixel_SuperPix
    if _newclass:SuperPix = staticmethod(_stomp.Pixel_SuperPix)
    __swig_getmethods__["SubPixels"] = lambda x: _stomp.Pixel_SubPixels
    if _newclass:SubPixels = staticmethod(_stomp.Pixel_SubPixels)
    __swig_getmethods__["NextSubPix"] = lambda x: _stomp.Pixel_NextSubPix
    if _newclass:NextSubPix = staticmethod(_stomp.Pixel_NextSubPix)
    __swig_getmethods__["AreaIndex"] = lambda x: _stomp.Pixel_AreaIndex
    if _newclass:AreaIndex = staticmethod(_stomp.Pixel_AreaIndex)
    __swig_getmethods__["PixelBound"] = lambda x: _stomp.Pixel_PixelBound
    if _newclass:PixelBound = staticmethod(_stomp.Pixel_PixelBound)
    __swig_getmethods__["CohortPix"] = lambda x: _stomp.Pixel_CohortPix
    if _newclass:CohortPix = staticmethod(_stomp.Pixel_CohortPix)
    __swig_getmethods__["PixelArea"] = lambda x: _stomp.Pixel_PixelArea
    if _newclass:PixelArea = staticmethod(_stomp.Pixel_PixelArea)
    __swig_getmethods__["Pix2EtaStep"] = lambda x: _stomp.Pixel_Pix2EtaStep
    if _newclass:Pix2EtaStep = staticmethod(_stomp.Pixel_Pix2EtaStep)
    __swig_getmethods__["Ang2HPix"] = lambda x: _stomp.Pixel_Ang2HPix
    if _newclass:Ang2HPix = staticmethod(_stomp.Pixel_Ang2HPix)
    __swig_getmethods__["HPix2Ang"] = lambda x: _stomp.Pixel_HPix2Ang
    if _newclass:HPix2Ang = staticmethod(_stomp.Pixel_HPix2Ang)
    __swig_getmethods__["XY2HPix"] = lambda x: _stomp.Pixel_XY2HPix
    if _newclass:XY2HPix = staticmethod(_stomp.Pixel_XY2HPix)
    __swig_getmethods__["HPix2XY"] = lambda x: _stomp.Pixel_HPix2XY
    if _newclass:HPix2XY = staticmethod(_stomp.Pixel_HPix2XY)
    __swig_getmethods__["SuperHPix"] = lambda x: _stomp.Pixel_SuperHPix
    if _newclass:SuperHPix = staticmethod(_stomp.Pixel_SuperHPix)
    __swig_getmethods__["NextSubHPix"] = lambda x: _stomp.Pixel_NextSubHPix
    if _newclass:NextSubHPix = staticmethod(_stomp.Pixel_NextSubHPix)
    __swig_getmethods__["SubHPix"] = lambda x: _stomp.Pixel_SubHPix
    if _newclass:SubHPix = staticmethod(_stomp.Pixel_SubHPix)
    __swig_getmethods__["HPixelBound"] = lambda x: _stomp.Pixel_HPixelBound
    if _newclass:HPixelBound = staticmethod(_stomp.Pixel_HPixelBound)
    __swig_getmethods__["CohortHPix"] = lambda x: _stomp.Pixel_CohortHPix
    if _newclass:CohortHPix = staticmethod(_stomp.Pixel_CohortHPix)
    __swig_getmethods__["HPixelArea"] = lambda x: _stomp.Pixel_HPixelArea
    if _newclass:HPixelArea = staticmethod(_stomp.Pixel_HPixelArea)
    __swig_getmethods__["HPix2EtaStep"] = lambda x: _stomp.Pixel_HPix2EtaStep
    if _newclass:HPix2EtaStep = staticmethod(_stomp.Pixel_HPix2EtaStep)
    __swig_getmethods__["XY2Pix"] = lambda x: _stomp.Pixel_XY2Pix
    if _newclass:XY2Pix = staticmethod(_stomp.Pixel_XY2Pix)
    __swig_getmethods__["Pix2XY"] = lambda x: _stomp.Pixel_Pix2XY
    if _newclass:Pix2XY = staticmethod(_stomp.Pixel_Pix2XY)
    __swig_getmethods__["LocalOrder"] = lambda x: _stomp.Pixel_LocalOrder
    if _newclass:LocalOrder = staticmethod(_stomp.Pixel_LocalOrder)
    __swig_getmethods__["SuperPixelBasedOrder"] = lambda x: _stomp.Pixel_SuperPixelBasedOrder
    if _newclass:SuperPixelBasedOrder = staticmethod(_stomp.Pixel_SuperPixelBasedOrder)
    __swig_getmethods__["SuperPixelOrder"] = lambda x: _stomp.Pixel_SuperPixelOrder
    if _newclass:SuperPixelOrder = staticmethod(_stomp.Pixel_SuperPixelOrder)
    __swig_getmethods__["WeightedOrder"] = lambda x: _stomp.Pixel_WeightedOrder
    if _newclass:WeightedOrder = staticmethod(_stomp.Pixel_WeightedOrder)
    __swig_getmethods__["WeightMatch"] = lambda x: _stomp.Pixel_WeightMatch
    if _newclass:WeightMatch = staticmethod(_stomp.Pixel_WeightMatch)
    __swig_getmethods__["WeightedPixelMatch"] = lambda x: _stomp.Pixel_WeightedPixelMatch
    if _newclass:WeightedPixelMatch = staticmethod(_stomp.Pixel_WeightedPixelMatch)
    __swig_getmethods__["PixelMatch"] = lambda x: _stomp.Pixel_PixelMatch
    if _newclass:PixelMatch = staticmethod(_stomp.Pixel_PixelMatch)
    __swig_getmethods__["ResolveSuperPixel"] = lambda x: _stomp.Pixel_ResolveSuperPixel
    if _newclass:ResolveSuperPixel = staticmethod(_stomp.Pixel_ResolveSuperPixel)
    __swig_getmethods__["ResolvePixel"] = lambda x: _stomp.Pixel_ResolvePixel
    if _newclass:ResolvePixel = staticmethod(_stomp.Pixel_ResolvePixel)
    __swig_getmethods__["FindUniquePixels"] = lambda x: _stomp.Pixel_FindUniquePixels
    if _newclass:FindUniquePixels = staticmethod(_stomp.Pixel_FindUniquePixels)
Pixel_swigregister = _stomp.Pixel_swigregister
Pixel_swigregister(Pixel)
Pixel_Area = _stomp.Pixel_Area
Pixel_WithinAnnulus = _stomp.Pixel_WithinAnnulus
Pixel_XYBounds = _stomp.Pixel_XYBounds
Pixel_ResolutionToLevel = _stomp.Pixel_ResolutionToLevel
Pixel_LevelToResolution = _stomp.Pixel_LevelToResolution
Pixel_Ang2Pix = _stomp.Pixel_Ang2Pix
Pixel_Pix2Ang = _stomp.Pixel_Pix2Ang
Pixel_Pix2HPix = _stomp.Pixel_Pix2HPix
Pixel_HPix2Pix = _stomp.Pixel_HPix2Pix
Pixel_SuperPix = _stomp.Pixel_SuperPix
Pixel_SubPixels = _stomp.Pixel_SubPixels
Pixel_NextSubPix = _stomp.Pixel_NextSubPix
Pixel_AreaIndex = _stomp.Pixel_AreaIndex
Pixel_PixelBound = _stomp.Pixel_PixelBound
Pixel_CohortPix = _stomp.Pixel_CohortPix
Pixel_PixelArea = _stomp.Pixel_PixelArea
Pixel_Pix2EtaStep = _stomp.Pixel_Pix2EtaStep
Pixel_Ang2HPix = _stomp.Pixel_Ang2HPix
Pixel_HPix2Ang = _stomp.Pixel_HPix2Ang
Pixel_XY2HPix = _stomp.Pixel_XY2HPix
Pixel_HPix2XY = _stomp.Pixel_HPix2XY
Pixel_SuperHPix = _stomp.Pixel_SuperHPix
Pixel_NextSubHPix = _stomp.Pixel_NextSubHPix
Pixel_SubHPix = _stomp.Pixel_SubHPix
Pixel_HPixelBound = _stomp.Pixel_HPixelBound
Pixel_CohortHPix = _stomp.Pixel_CohortHPix
Pixel_HPixelArea = _stomp.Pixel_HPixelArea
Pixel_HPix2EtaStep = _stomp.Pixel_HPix2EtaStep
Pixel_XY2Pix = _stomp.Pixel_XY2Pix
Pixel_Pix2XY = _stomp.Pixel_Pix2XY
Pixel_LocalOrder = _stomp.Pixel_LocalOrder
Pixel_SuperPixelBasedOrder = _stomp.Pixel_SuperPixelBasedOrder
Pixel_SuperPixelOrder = _stomp.Pixel_SuperPixelOrder
Pixel_WeightedOrder = _stomp.Pixel_WeightedOrder
Pixel_WeightMatch = _stomp.Pixel_WeightMatch
Pixel_WeightedPixelMatch = _stomp.Pixel_WeightedPixelMatch
Pixel_PixelMatch = _stomp.Pixel_PixelMatch
Pixel_ResolveSuperPixel = _stomp.Pixel_ResolveSuperPixel
Pixel_ResolvePixel = _stomp.Pixel_ResolvePixel
Pixel_FindUniquePixels = _stomp.Pixel_FindUniquePixels

class PixelOrdering(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelOrdering, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelOrdering, name)
    __repr__ = _swig_repr
    def __call__(*args): return _stomp.PixelOrdering___call__(*args)
    def __init__(self, *args): 
        this = _stomp.new_PixelOrdering(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_PixelOrdering
    __del__ = lambda self : None;
PixelOrdering_swigregister = _stomp.PixelOrdering_swigregister
PixelOrdering_swigregister(PixelOrdering)

class ScalarPixel(Pixel):
    __swig_setmethods__ = {}
    for _s in [Pixel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarPixel, name, value)
    __swig_getmethods__ = {}
    for _s in [Pixel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarPixel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_ScalarPixel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_ScalarPixel
    __del__ = lambda self : None;
    def SetIntensity(*args): return _stomp.ScalarPixel_SetIntensity(*args)
    def SetNPoints(*args): return _stomp.ScalarPixel_SetNPoints(*args)
    def Intensity(*args): return _stomp.ScalarPixel_Intensity(*args)
    def NPoints(*args): return _stomp.ScalarPixel_NPoints(*args)
    def MeanIntensity(*args): return _stomp.ScalarPixel_MeanIntensity(*args)
    def AddToIntensity(*args): return _stomp.ScalarPixel_AddToIntensity(*args)
    def ScaleIntensity(*args): return _stomp.ScalarPixel_ScaleIntensity(*args)
    def NormalizeIntensity(*args): return _stomp.ScalarPixel_NormalizeIntensity(*args)
    def ConvertToOverDensity(*args): return _stomp.ScalarPixel_ConvertToOverDensity(*args)
    def ConvertToFractionalOverDensity(*args): return _stomp.ScalarPixel_ConvertToFractionalOverDensity(*args)
    def ConvertFromOverDensity(*args): return _stomp.ScalarPixel_ConvertFromOverDensity(*args)
    def ConvertFromFractionalOverDensity(*args): return _stomp.ScalarPixel_ConvertFromFractionalOverDensity(*args)
    def UnitSphereX(*args): return _stomp.ScalarPixel_UnitSphereX(*args)
    def UnitSphereY(*args): return _stomp.ScalarPixel_UnitSphereY(*args)
    def UnitSphereZ(*args): return _stomp.ScalarPixel_UnitSphereZ(*args)
    def _WithinAnnulus(*args): return _stomp.ScalarPixel__WithinAnnulus(*args)
    def IsOverDensity(*args): return _stomp.ScalarPixel_IsOverDensity(*args)
ScalarPixel_swigregister = _stomp.ScalarPixel_swigregister
ScalarPixel_swigregister(ScalarPixel)

class section(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, section, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, section, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min_stripe"] = _stomp.section_min_stripe_set
    __swig_getmethods__["min_stripe"] = _stomp.section_min_stripe_get
    if _newclass:min_stripe = _swig_property(_stomp.section_min_stripe_get, _stomp.section_min_stripe_set)
    __swig_setmethods__["max_stripe"] = _stomp.section_max_stripe_set
    __swig_getmethods__["max_stripe"] = _stomp.section_max_stripe_get
    if _newclass:max_stripe = _swig_property(_stomp.section_max_stripe_get, _stomp.section_max_stripe_set)
    def __init__(self, *args): 
        this = _stomp.new_section(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_section
    __del__ = lambda self : None;
section_swigregister = _stomp.section_swigregister
section_swigregister(section)

class RegionBound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionBound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegionBound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_RegionBound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_RegionBound
    __del__ = lambda self : None;
    def SetGeometricBound(*args): return _stomp.RegionBound_SetGeometricBound(*args)
    def SetNRegion(*args): return _stomp.RegionBound_SetNRegion(*args)
    def NRegion(*args): return _stomp.RegionBound_NRegion(*args)
    def CheckPixel(*args): return _stomp.RegionBound_CheckPixel(*args)
    def ScorePixel(*args): return _stomp.RegionBound_ScorePixel(*args)
    def AddPixel(*args): return _stomp.RegionBound_AddPixel(*args)
    def RemovePixel(*args): return _stomp.RegionBound_RemovePixel(*args)
    def ClearPixels(*args): return _stomp.RegionBound_ClearPixels(*args)
    def Coverage(*args): return _stomp.RegionBound_Coverage(*args)
    def CoveragePixels(*args): return _stomp.RegionBound_CoveragePixels(*args)
    def CoverageArea(*args): return _stomp.RegionBound_CoverageArea(*args)
    def BoundArea(*args): return _stomp.RegionBound_BoundArea(*args)
RegionBound_swigregister = _stomp.RegionBound_swigregister
RegionBound_swigregister(RegionBound)

class RegionMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegionMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_RegionMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_RegionMap
    __del__ = lambda self : None;
    def InitializeRegions(*args): return _stomp.RegionMap_InitializeRegions(*args)
    def _FindRegionResolution(*args): return _stomp.RegionMap__FindRegionResolution(*args)
    def _FindUniqueStripes(*args): return _stomp.RegionMap__FindUniqueStripes(*args)
    def _FindSections(*args): return _stomp.RegionMap__FindSections(*args)
    def _Regionate(*args): return _stomp.RegionMap__Regionate(*args)
    def _VerifyRegionation(*args): return _stomp.RegionMap__VerifyRegionation(*args)
    def FindRegion(*args): return _stomp.RegionMap_FindRegion(*args)
    def ClearRegions(*args): return _stomp.RegionMap_ClearRegions(*args)
    def Region(*args): return _stomp.RegionMap_Region(*args)
    def RegionArea(*args): return _stomp.RegionMap_RegionArea(*args)
    def NRegion(*args): return _stomp.RegionMap_NRegion(*args)
    def Resolution(*args): return _stomp.RegionMap_Resolution(*args)
    def Initialized(*args): return _stomp.RegionMap_Initialized(*args)
    def Begin(*args): return _stomp.RegionMap_Begin(*args)
    def End(*args): return _stomp.RegionMap_End(*args)
RegionMap_swigregister = _stomp.RegionMap_swigregister
RegionMap_swigregister(RegionMap)

class BaseMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_BaseMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_BaseMap
    __del__ = lambda self : None;
    def Coverage(*args): return _stomp.BaseMap_Coverage(*args)
    def FindUnmaskedFraction(*args): return _stomp.BaseMap_FindUnmaskedFraction(*args)
    def FindUnmaskedStatus(*args): return _stomp.BaseMap_FindUnmaskedStatus(*args)
    def Empty(*args): return _stomp.BaseMap_Empty(*args)
    def Clear(*args): return _stomp.BaseMap_Clear(*args)
    def Size(*args): return _stomp.BaseMap_Size(*args)
    def Area(*args): return _stomp.BaseMap_Area(*args)
    def MinResolution(*args): return _stomp.BaseMap_MinResolution(*args)
    def MaxResolution(*args): return _stomp.BaseMap_MaxResolution(*args)
    def MinLevel(*args): return _stomp.BaseMap_MinLevel(*args)
    def MaxLevel(*args): return _stomp.BaseMap_MaxLevel(*args)
    def InitializeRegions(*args): return _stomp.BaseMap_InitializeRegions(*args)
    def FindRegion(*args): return _stomp.BaseMap_FindRegion(*args)
    def ClearRegions(*args): return _stomp.BaseMap_ClearRegions(*args)
    def Region(*args): return _stomp.BaseMap_Region(*args)
    def RegionArea(*args): return _stomp.BaseMap_RegionArea(*args)
    def NRegion(*args): return _stomp.BaseMap_NRegion(*args)
    def RegionResolution(*args): return _stomp.BaseMap_RegionResolution(*args)
    def RegionsInitialized(*args): return _stomp.BaseMap_RegionsInitialized(*args)
    def RegionBegin(*args): return _stomp.BaseMap_RegionBegin(*args)
    def RegionEnd(*args): return _stomp.BaseMap_RegionEnd(*args)
BaseMap_swigregister = _stomp.BaseMap_swigregister
BaseMap_swigregister(BaseMap)

class SubMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_SubMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_SubMap
    __del__ = lambda self : None;
    def AddPixel(*args): return _stomp.SubMap_AddPixel(*args)
    def Resolve(*args): return _stomp.SubMap_Resolve(*args)
    def SetMinimumWeight(*args): return _stomp.SubMap_SetMinimumWeight(*args)
    def SetMaximumWeight(*args): return _stomp.SubMap_SetMaximumWeight(*args)
    def SetMaximumResolution(*args): return _stomp.SubMap_SetMaximumResolution(*args)
    def FindLocation(*args): return _stomp.SubMap_FindLocation(*args)
    def FindUnmaskedFraction(*args): return _stomp.SubMap_FindUnmaskedFraction(*args)
    def FindUnmaskedStatus(*args): return _stomp.SubMap_FindUnmaskedStatus(*args)
    def FindAverageWeight(*args): return _stomp.SubMap_FindAverageWeight(*args)
    def FindMatchingPixels(*args): return _stomp.SubMap_FindMatchingPixels(*args)
    def AverageWeight(*args): return _stomp.SubMap_AverageWeight(*args)
    def Soften(*args): return _stomp.SubMap_Soften(*args)
    def Add(*args): return _stomp.SubMap_Add(*args)
    def Multiply(*args): return _stomp.SubMap_Multiply(*args)
    def Exclude(*args): return _stomp.SubMap_Exclude(*args)
    def ScaleWeight(*args): return _stomp.SubMap_ScaleWeight(*args)
    def AddConstantWeight(*args): return _stomp.SubMap_AddConstantWeight(*args)
    def InvertWeight(*args): return _stomp.SubMap_InvertWeight(*args)
    def Pixels(*args): return _stomp.SubMap_Pixels(*args)
    def Clear(*args): return _stomp.SubMap_Clear(*args)
    def Superpixnum(*args): return _stomp.SubMap_Superpixnum(*args)
    def Begin(*args): return _stomp.SubMap_Begin(*args)
    def End(*args): return _stomp.SubMap_End(*args)
    def Area(*args): return _stomp.SubMap_Area(*args)
    def Initialized(*args): return _stomp.SubMap_Initialized(*args)
    def Unsorted(*args): return _stomp.SubMap_Unsorted(*args)
    def SetUnsorted(*args): return _stomp.SubMap_SetUnsorted(*args)
    def MinResolution(*args): return _stomp.SubMap_MinResolution(*args)
    def MaxResolution(*args): return _stomp.SubMap_MaxResolution(*args)
    def MinLevel(*args): return _stomp.SubMap_MinLevel(*args)
    def MaxLevel(*args): return _stomp.SubMap_MaxLevel(*args)
    def MinWeight(*args): return _stomp.SubMap_MinWeight(*args)
    def MaxWeight(*args): return _stomp.SubMap_MaxWeight(*args)
    def LambdaMin(*args): return _stomp.SubMap_LambdaMin(*args)
    def LambdaMax(*args): return _stomp.SubMap_LambdaMax(*args)
    def EtaMin(*args): return _stomp.SubMap_EtaMin(*args)
    def EtaMax(*args): return _stomp.SubMap_EtaMax(*args)
    def ZMin(*args): return _stomp.SubMap_ZMin(*args)
    def ZMax(*args): return _stomp.SubMap_ZMax(*args)
    def Size(*args): return _stomp.SubMap_Size(*args)
    def PixelCount(*args): return _stomp.SubMap_PixelCount(*args)
SubMap_swigregister = _stomp.SubMap_swigregister
SubMap_swigregister(SubMap)

class Map(BaseMap):
    __swig_setmethods__ = {}
    for _s in [BaseMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Map, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Map, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_Map(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_Map
    __del__ = lambda self : None;
    def Initialize(*args): return _stomp.Map_Initialize(*args)
    def AddPixel(*args): return _stomp.Map_AddPixel(*args)
    def FindLocation(*args): return _stomp.Map_FindLocation(*args)
    def FindLocationWeight(*args): return _stomp.Map_FindLocationWeight(*args)
    def FindUnmaskedStatus(*args): return _stomp.Map_FindUnmaskedStatus(*args)
    def FindAverageWeight(*args): return _stomp.Map_FindAverageWeight(*args)
    def AverageWeight(*args): return _stomp.Map_AverageWeight(*args)
    def FindMatchingPixels(*args): return _stomp.Map_FindMatchingPixels(*args)
    def Coverage(*args): return _stomp.Map_Coverage(*args)
    def Covering(*args): return _stomp.Map_Covering(*args)
    def Soften(*args): return _stomp.Map_Soften(*args)
    def SetMinimumWeight(*args): return _stomp.Map_SetMinimumWeight(*args)
    def SetMaximumWeight(*args): return _stomp.Map_SetMaximumWeight(*args)
    def RegionOnlyMap(*args): return _stomp.Map_RegionOnlyMap(*args)
    def RegionExcludedMap(*args): return _stomp.Map_RegionExcludedMap(*args)
    def GenerateRandomPoints(*args): return _stomp.Map_GenerateRandomPoints(*args)
    def GenerateRandomEq(*args): return _stomp.Map_GenerateRandomEq(*args)
    def GenerateRandomSurvey(*args): return _stomp.Map_GenerateRandomSurvey(*args)
    def GenerateRandomGal(*args): return _stomp.Map_GenerateRandomGal(*args)
    __swig_setmethods__["INSIDE_MAP"] = _stomp.Map_INSIDE_MAP_set
    __swig_getmethods__["INSIDE_MAP"] = _stomp.Map_INSIDE_MAP_get
    if _newclass:INSIDE_MAP = _swig_property(_stomp.Map_INSIDE_MAP_get, _stomp.Map_INSIDE_MAP_set)
    __swig_setmethods__["FIRST_QUADRANT_OK"] = _stomp.Map_FIRST_QUADRANT_OK_set
    __swig_getmethods__["FIRST_QUADRANT_OK"] = _stomp.Map_FIRST_QUADRANT_OK_get
    if _newclass:FIRST_QUADRANT_OK = _swig_property(_stomp.Map_FIRST_QUADRANT_OK_get, _stomp.Map_FIRST_QUADRANT_OK_set)
    __swig_setmethods__["SECOND_QUADRANT_OK"] = _stomp.Map_SECOND_QUADRANT_OK_set
    __swig_getmethods__["SECOND_QUADRANT_OK"] = _stomp.Map_SECOND_QUADRANT_OK_get
    if _newclass:SECOND_QUADRANT_OK = _swig_property(_stomp.Map_SECOND_QUADRANT_OK_get, _stomp.Map_SECOND_QUADRANT_OK_set)
    __swig_setmethods__["THIRD_QUADRANT_OK"] = _stomp.Map_THIRD_QUADRANT_OK_set
    __swig_getmethods__["THIRD_QUADRANT_OK"] = _stomp.Map_THIRD_QUADRANT_OK_get
    if _newclass:THIRD_QUADRANT_OK = _swig_property(_stomp.Map_THIRD_QUADRANT_OK_get, _stomp.Map_THIRD_QUADRANT_OK_set)
    __swig_setmethods__["FOURTH_QUADRANT_OK"] = _stomp.Map_FOURTH_QUADRANT_OK_set
    __swig_getmethods__["FOURTH_QUADRANT_OK"] = _stomp.Map_FOURTH_QUADRANT_OK_get
    if _newclass:FOURTH_QUADRANT_OK = _swig_property(_stomp.Map_FOURTH_QUADRANT_OK_get, _stomp.Map_FOURTH_QUADRANT_OK_set)
    def QuadrantsContainedMC(*args): return _stomp.Map_QuadrantsContainedMC(*args)
    def QuadrantContainedMC(*args): return _stomp.Map_QuadrantContainedMC(*args)
    def Contains(*args): return _stomp.Map_Contains(*args)
    def FindUnmaskedFraction(*args): return _stomp.Map_FindUnmaskedFraction(*args)
    def Write(*args): return _stomp.Map_Write(*args)
    def Read(*args): return _stomp.Map_Read(*args)
    def PixelizeBound(*args): return _stomp.Map_PixelizeBound(*args)
    def _FindStartingResolutionLevel(*args): return _stomp.Map__FindStartingResolutionLevel(*args)
    def _FindXYBounds(*args): return _stomp.Map__FindXYBounds(*args)
    def ScaleWeight(*args): return _stomp.Map_ScaleWeight(*args)
    def AddConstantWeight(*args): return _stomp.Map_AddConstantWeight(*args)
    def InvertWeight(*args): return _stomp.Map_InvertWeight(*args)
    def IngestMap(*args): return _stomp.Map_IngestMap(*args)
    def IntersectMap(*args): return _stomp.Map_IntersectMap(*args)
    def ExcludeMap(*args): return _stomp.Map_ExcludeMap(*args)
    def AddMap(*args): return _stomp.Map_AddMap(*args)
    def MultiplyMap(*args): return _stomp.Map_MultiplyMap(*args)
    def ImprintMap(*args): return _stomp.Map_ImprintMap(*args)
    def Pixels(*args): return _stomp.Map_Pixels(*args)
    def Begin(*args): return _stomp.Map_Begin(*args)
    def End(*args): return _stomp.Map_End(*args)
    def Iterate(*args): return _stomp.Map_Iterate(*args)
    def Clear(*args): return _stomp.Map_Clear(*args)
    def ContainsSuperpixel(*args): return _stomp.Map_ContainsSuperpixel(*args)
    def Area(*args): return _stomp.Map_Area(*args)
    def MinResolution(*args): return _stomp.Map_MinResolution(*args)
    def MaxResolution(*args): return _stomp.Map_MaxResolution(*args)
    def MinLevel(*args): return _stomp.Map_MinLevel(*args)
    def MaxLevel(*args): return _stomp.Map_MaxLevel(*args)
    def MinWeight(*args): return _stomp.Map_MinWeight(*args)
    def MaxWeight(*args): return _stomp.Map_MaxWeight(*args)
    def Size(*args): return _stomp.Map_Size(*args)
    def Empty(*args): return _stomp.Map_Empty(*args)
    def PixelCount(*args): return _stomp.Map_PixelCount(*args)
Map_swigregister = _stomp.Map_swigregister
Map_swigregister(Map)

class ScalarMap(BaseMap):
    __swig_setmethods__ = {}
    for _s in [BaseMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarMap, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarMap, name)
    __repr__ = _swig_repr
    ScalarField = _stomp.ScalarMap_ScalarField
    DensityField = _stomp.ScalarMap_DensityField
    SampledField = _stomp.ScalarMap_SampledField
    def __init__(self, *args): 
        this = _stomp.new_ScalarMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_ScalarMap
    __del__ = lambda self : None;
    def SetResolution(*args): return _stomp.ScalarMap_SetResolution(*args)
    def InitializeFromMap(*args): return _stomp.ScalarMap_InitializeFromMap(*args)
    def InitializeFromScalarMap(*args): return _stomp.ScalarMap_InitializeFromScalarMap(*args)
    def InitializeFromScalarPixels(*args): return _stomp.ScalarMap_InitializeFromScalarPixels(*args)
    def AddToMap(*args): return _stomp.ScalarMap_AddToMap(*args)
    def Coverage(*args): return _stomp.ScalarMap_Coverage(*args)
    def Covering(*args): return _stomp.ScalarMap_Covering(*args)
    def FindUnmaskedFraction(*args): return _stomp.ScalarMap_FindUnmaskedFraction(*args)
    def FindUnmaskedStatus(*args): return _stomp.ScalarMap_FindUnmaskedStatus(*args)
    def Resample(*args): return _stomp.ScalarMap_Resample(*args)
    def FindIntensity(*args): return _stomp.ScalarMap_FindIntensity(*args)
    def FindDensity(*args): return _stomp.ScalarMap_FindDensity(*args)
    def FindPointDensity(*args): return _stomp.ScalarMap_FindPointDensity(*args)
    def FindLocalArea(*args): return _stomp.ScalarMap_FindLocalArea(*args)
    def FindLocalIntensity(*args): return _stomp.ScalarMap_FindLocalIntensity(*args)
    def FindLocalDensity(*args): return _stomp.ScalarMap_FindLocalDensity(*args)
    def FindLocalPointDensity(*args): return _stomp.ScalarMap_FindLocalPointDensity(*args)
    def CalculateMeanIntensity(*args): return _stomp.ScalarMap_CalculateMeanIntensity(*args)
    def ConvertToOverDensity(*args): return _stomp.ScalarMap_ConvertToOverDensity(*args)
    def ConvertFromOverDensity(*args): return _stomp.ScalarMap_ConvertFromOverDensity(*args)
    def UseLocalMeanIntensity(*args): return _stomp.ScalarMap_UseLocalMeanIntensity(*args)
    def UsingLocalMeanIntensity(*args): return _stomp.ScalarMap_UsingLocalMeanIntensity(*args)
    def ImprintMap(*args): return _stomp.ScalarMap_ImprintMap(*args)
    def AutoCorrelate(*args): return _stomp.ScalarMap_AutoCorrelate(*args)
    def AutoCorrelateWithRegions(*args): return _stomp.ScalarMap_AutoCorrelateWithRegions(*args)
    def CrossCorrelate(*args): return _stomp.ScalarMap_CrossCorrelate(*args)
    def CrossCorrelateWithRegions(*args): return _stomp.ScalarMap_CrossCorrelateWithRegions(*args)
    def Variance(*args): return _stomp.ScalarMap_Variance(*args)
    def Covariance(*args): return _stomp.ScalarMap_Covariance(*args)
    def VarianceWithErrors(*args): return _stomp.ScalarMap_VarianceWithErrors(*args)
    def CovarianceWithErrors(*args): return _stomp.ScalarMap_CovarianceWithErrors(*args)
    def Resolution(*args): return _stomp.ScalarMap_Resolution(*args)
    def Intensity(*args): return _stomp.ScalarMap_Intensity(*args)
    def NPoints(*args): return _stomp.ScalarMap_NPoints(*args)
    def Density(*args): return _stomp.ScalarMap_Density(*args)
    def PointDensity(*args): return _stomp.ScalarMap_PointDensity(*args)
    def Begin(*args): return _stomp.ScalarMap_Begin(*args)
    def End(*args): return _stomp.ScalarMap_End(*args)
    def MeanIntensity(*args): return _stomp.ScalarMap_MeanIntensity(*args)
    def IsOverDensityMap(*args): return _stomp.ScalarMap_IsOverDensityMap(*args)
    def MapType(*args): return _stomp.ScalarMap_MapType(*args)
    def Area(*args): return _stomp.ScalarMap_Area(*args)
    def Size(*args): return _stomp.ScalarMap_Size(*args)
    def MinResolution(*args): return _stomp.ScalarMap_MinResolution(*args)
    def MaxResolution(*args): return _stomp.ScalarMap_MaxResolution(*args)
    def MinLevel(*args): return _stomp.ScalarMap_MinLevel(*args)
    def MaxLevel(*args): return _stomp.ScalarMap_MaxLevel(*args)
    def Empty(*args): return _stomp.ScalarMap_Empty(*args)
    def Clear(*args): return _stomp.ScalarMap_Clear(*args)
ScalarMap_swigregister = _stomp.ScalarMap_swigregister
ScalarMap_swigregister(ScalarMap)

class GeometricBound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometricBound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometricBound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_GeometricBound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_GeometricBound
    __del__ = lambda self : None;
    def CheckPoint(*args): return _stomp.GeometricBound_CheckPoint(*args)
    def FindAngularBounds(*args): return _stomp.GeometricBound_FindAngularBounds(*args)
    def FindArea(*args): return _stomp.GeometricBound_FindArea(*args)
    def CheckPixel(*args): return _stomp.GeometricBound_CheckPixel(*args)
    def ScorePixel(*args): return _stomp.GeometricBound_ScorePixel(*args)
    def SetArea(*args): return _stomp.GeometricBound_SetArea(*args)
    def SetAngularBounds(*args): return _stomp.GeometricBound_SetAngularBounds(*args)
    def SetContinuousBounds(*args): return _stomp.GeometricBound_SetContinuousBounds(*args)
    def Area(*args): return _stomp.GeometricBound_Area(*args)
    def LambdaMin(*args): return _stomp.GeometricBound_LambdaMin(*args)
    def LambdaMax(*args): return _stomp.GeometricBound_LambdaMax(*args)
    def EtaMin(*args): return _stomp.GeometricBound_EtaMin(*args)
    def EtaMax(*args): return _stomp.GeometricBound_EtaMax(*args)
    def ContinuousBounds(*args): return _stomp.GeometricBound_ContinuousBounds(*args)
    def GenerateRandomPoint(*args): return _stomp.GeometricBound_GenerateRandomPoint(*args)
    def GenerateRandomPoints(*args): return _stomp.GeometricBound_GenerateRandomPoints(*args)
GeometricBound_swigregister = _stomp.GeometricBound_swigregister
GeometricBound_swigregister(GeometricBound)

class CircleBound(GeometricBound):
    __swig_setmethods__ = {}
    for _s in [GeometricBound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CircleBound, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometricBound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CircleBound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_CircleBound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_CircleBound
    __del__ = lambda self : None;
    def CheckPoint(*args): return _stomp.CircleBound_CheckPoint(*args)
    def FindAngularBounds(*args): return _stomp.CircleBound_FindAngularBounds(*args)
    def FindArea(*args): return _stomp.CircleBound_FindArea(*args)
CircleBound_swigregister = _stomp.CircleBound_swigregister
CircleBound_swigregister(CircleBound)

class AnnulusBound(GeometricBound):
    __swig_setmethods__ = {}
    for _s in [GeometricBound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnulusBound, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometricBound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnnulusBound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_AnnulusBound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_AnnulusBound
    __del__ = lambda self : None;
    def CheckPoint(*args): return _stomp.AnnulusBound_CheckPoint(*args)
    def FindAngularBounds(*args): return _stomp.AnnulusBound_FindAngularBounds(*args)
    def FindArea(*args): return _stomp.AnnulusBound_FindArea(*args)
AnnulusBound_swigregister = _stomp.AnnulusBound_swigregister
AnnulusBound_swigregister(AnnulusBound)

class WedgeBound(GeometricBound):
    __swig_setmethods__ = {}
    for _s in [GeometricBound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WedgeBound, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometricBound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WedgeBound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_WedgeBound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_WedgeBound
    __del__ = lambda self : None;
    def CheckPoint(*args): return _stomp.WedgeBound_CheckPoint(*args)
    def FindAngularBounds(*args): return _stomp.WedgeBound_FindAngularBounds(*args)
    def FindArea(*args): return _stomp.WedgeBound_FindArea(*args)
WedgeBound_swigregister = _stomp.WedgeBound_swigregister
WedgeBound_swigregister(WedgeBound)

class PolygonBound(GeometricBound):
    __swig_setmethods__ = {}
    for _s in [GeometricBound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolygonBound, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometricBound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolygonBound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_PolygonBound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_PolygonBound
    __del__ = lambda self : None;
    def CheckPoint(*args): return _stomp.PolygonBound_CheckPoint(*args)
    def FindAngularBounds(*args): return _stomp.PolygonBound_FindAngularBounds(*args)
    def FindArea(*args): return _stomp.PolygonBound_FindArea(*args)
PolygonBound_swigregister = _stomp.PolygonBound_swigregister
PolygonBound_swigregister(PolygonBound)

class LongitudeBound(GeometricBound):
    __swig_setmethods__ = {}
    for _s in [GeometricBound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongitudeBound, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometricBound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LongitudeBound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_LongitudeBound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_LongitudeBound
    __del__ = lambda self : None;
    def CheckPoint(*args): return _stomp.LongitudeBound_CheckPoint(*args)
    def FindAngularBounds(*args): return _stomp.LongitudeBound_FindAngularBounds(*args)
    def FindArea(*args): return _stomp.LongitudeBound_FindArea(*args)
    def LongitudeMin(*args): return _stomp.LongitudeBound_LongitudeMin(*args)
    def LongitudeMax(*args): return _stomp.LongitudeBound_LongitudeMax(*args)
    def Sphere(*args): return _stomp.LongitudeBound_Sphere(*args)
LongitudeBound_swigregister = _stomp.LongitudeBound_swigregister
LongitudeBound_swigregister(LongitudeBound)

class LatitudeBound(GeometricBound):
    __swig_setmethods__ = {}
    for _s in [GeometricBound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatitudeBound, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometricBound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LatitudeBound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_LatitudeBound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_LatitudeBound
    __del__ = lambda self : None;
    def CheckPoint(*args): return _stomp.LatitudeBound_CheckPoint(*args)
    def FindAngularBounds(*args): return _stomp.LatitudeBound_FindAngularBounds(*args)
    def FindArea(*args): return _stomp.LatitudeBound_FindArea(*args)
    def LatitudeMin(*args): return _stomp.LatitudeBound_LatitudeMin(*args)
    def LatitudeMax(*args): return _stomp.LatitudeBound_LatitudeMax(*args)
    def Sphere(*args): return _stomp.LatitudeBound_Sphere(*args)
LatitudeBound_swigregister = _stomp.LatitudeBound_swigregister
LatitudeBound_swigregister(LatitudeBound)

class LatLonBound(GeometricBound):
    __swig_setmethods__ = {}
    for _s in [GeometricBound]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LatLonBound, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometricBound]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LatLonBound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_LatLonBound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_LatLonBound
    __del__ = lambda self : None;
    def CheckPoint(*args): return _stomp.LatLonBound_CheckPoint(*args)
    def FindAngularBounds(*args): return _stomp.LatLonBound_FindAngularBounds(*args)
    def FindArea(*args): return _stomp.LatLonBound_FindArea(*args)
    def LongitudeMin(*args): return _stomp.LatLonBound_LongitudeMin(*args)
    def LongitudeMax(*args): return _stomp.LatLonBound_LongitudeMax(*args)
    def LatitudeMin(*args): return _stomp.LatLonBound_LatitudeMin(*args)
    def LatitudeMax(*args): return _stomp.LatLonBound_LatitudeMax(*args)
    def Sphere(*args): return _stomp.LatLonBound_Sphere(*args)
LatLonBound_swigregister = _stomp.LatLonBound_swigregister
LatLonBound_swigregister(LatLonBound)

class Cosmology(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cosmology, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cosmology, name)
    __repr__ = _swig_repr
    __swig_setmethods__["omega_m"] = _stomp.Cosmology_omega_m_set
    __swig_getmethods__["omega_m"] = _stomp.Cosmology_omega_m_get
    if _newclass:omega_m = _swig_property(_stomp.Cosmology_omega_m_get, _stomp.Cosmology_omega_m_set)
    __swig_setmethods__["h"] = _stomp.Cosmology_h_set
    __swig_getmethods__["h"] = _stomp.Cosmology_h_get
    if _newclass:h = _swig_property(_stomp.Cosmology_h_get, _stomp.Cosmology_h_set)
    __swig_setmethods__["a_"] = _stomp.Cosmology_a__set
    __swig_getmethods__["a_"] = _stomp.Cosmology_a__get
    if _newclass:a_ = _swig_property(_stomp.Cosmology_a__get, _stomp.Cosmology_a__set)
    __swig_setmethods__["b_"] = _stomp.Cosmology_b__set
    __swig_getmethods__["b_"] = _stomp.Cosmology_b__get
    if _newclass:b_ = _swig_property(_stomp.Cosmology_b__get, _stomp.Cosmology_b__set)
    __swig_getmethods__["OmegaM"] = lambda x: _stomp.Cosmology_OmegaM
    if _newclass:OmegaM = staticmethod(_stomp.Cosmology_OmegaM)
    __swig_getmethods__["HubbleConstant"] = lambda x: _stomp.Cosmology_HubbleConstant
    if _newclass:HubbleConstant = staticmethod(_stomp.Cosmology_HubbleConstant)
    __swig_getmethods__["HubbleDistance"] = lambda x: _stomp.Cosmology_HubbleDistance
    if _newclass:HubbleDistance = staticmethod(_stomp.Cosmology_HubbleDistance)
    __swig_getmethods__["OmegaL"] = lambda x: _stomp.Cosmology_OmegaL
    if _newclass:OmegaL = staticmethod(_stomp.Cosmology_OmegaL)
    __swig_getmethods__["SetOmegaM"] = lambda x: _stomp.Cosmology_SetOmegaM
    if _newclass:SetOmegaM = staticmethod(_stomp.Cosmology_SetOmegaM)
    __swig_getmethods__["SetHubbleConstant"] = lambda x: _stomp.Cosmology_SetHubbleConstant
    if _newclass:SetHubbleConstant = staticmethod(_stomp.Cosmology_SetHubbleConstant)
    __swig_getmethods__["SetOmegaL"] = lambda x: _stomp.Cosmology_SetOmegaL
    if _newclass:SetOmegaL = staticmethod(_stomp.Cosmology_SetOmegaL)
    __swig_getmethods__["ComovingDistance"] = lambda x: _stomp.Cosmology_ComovingDistance
    if _newclass:ComovingDistance = staticmethod(_stomp.Cosmology_ComovingDistance)
    __swig_getmethods__["AngularDiameterDistance"] = lambda x: _stomp.Cosmology_AngularDiameterDistance
    if _newclass:AngularDiameterDistance = staticmethod(_stomp.Cosmology_AngularDiameterDistance)
    __swig_getmethods__["LuminosityDistance"] = lambda x: _stomp.Cosmology_LuminosityDistance
    if _newclass:LuminosityDistance = staticmethod(_stomp.Cosmology_LuminosityDistance)
    __swig_getmethods__["ProjectedDistance"] = lambda x: _stomp.Cosmology_ProjectedDistance
    if _newclass:ProjectedDistance = staticmethod(_stomp.Cosmology_ProjectedDistance)
    __swig_getmethods__["ProjectedAngle"] = lambda x: _stomp.Cosmology_ProjectedAngle
    if _newclass:ProjectedAngle = staticmethod(_stomp.Cosmology_ProjectedAngle)
    def __init__(self, *args): 
        this = _stomp.new_Cosmology(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_Cosmology
    __del__ = lambda self : None;
Cosmology_swigregister = _stomp.Cosmology_swigregister
Cosmology_swigregister(Cosmology)
Cosmology.AA_ = _stomp.cvar.Cosmology_AA_
Cosmology.BB_ = _stomp.cvar.Cosmology_BB_
Cosmology_OmegaM = _stomp.Cosmology_OmegaM
Cosmology_HubbleConstant = _stomp.Cosmology_HubbleConstant
Cosmology_HubbleDistance = _stomp.Cosmology_HubbleDistance
Cosmology_OmegaL = _stomp.Cosmology_OmegaL
Cosmology_SetOmegaM = _stomp.Cosmology_SetOmegaM
Cosmology_SetHubbleConstant = _stomp.Cosmology_SetHubbleConstant
Cosmology_SetOmegaL = _stomp.Cosmology_SetOmegaL
Cosmology_ComovingDistance = _stomp.Cosmology_ComovingDistance
Cosmology_AngularDiameterDistance = _stomp.Cosmology_AngularDiameterDistance
Cosmology_LuminosityDistance = _stomp.Cosmology_LuminosityDistance
Cosmology_ProjectedDistance = _stomp.Cosmology_ProjectedDistance
Cosmology_ProjectedAngle = _stomp.Cosmology_ProjectedAngle

class StompWatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StompWatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StompWatch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_StompWatch(*args)
        try: self.this.append(this)
        except: self.this = this
    def StartTimer(*args): return _stomp.StompWatch_StartTimer(*args)
    def StopTimer(*args): return _stomp.StompWatch_StopTimer(*args)
    def ElapsedTime(*args): return _stomp.StompWatch_ElapsedTime(*args)
    __swig_destroy__ = _stomp.delete_StompWatch
    __del__ = lambda self : None;
StompWatch_swigregister = _stomp.StompWatch_swigregister
StompWatch_swigregister(StompWatch)

class HistogramBin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistogramBin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistogramBin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_HistogramBin(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_HistogramBin
    __del__ = lambda self : None;
    def SetBounds(*args): return _stomp.HistogramBin_SetBounds(*args)
    def AddToBin(*args): return _stomp.HistogramBin_AddToBin(*args)
    def BinMinimum(*args): return _stomp.HistogramBin_BinMinimum(*args)
    def BinMaximum(*args): return _stomp.HistogramBin_BinMaximum(*args)
    def BinCenter(*args): return _stomp.HistogramBin_BinCenter(*args)
    def BinLogCenter(*args): return _stomp.HistogramBin_BinLogCenter(*args)
    def BinWeightedCenter(*args): return _stomp.HistogramBin_BinWeightedCenter(*args)
    def BinAveragedCenter(*args): return _stomp.HistogramBin_BinAveragedCenter(*args)
    def WithinBin(*args): return _stomp.HistogramBin_WithinBin(*args)
    def BinWeight(*args): return _stomp.HistogramBin_BinWeight(*args)
    def BinItems(*args): return _stomp.HistogramBin_BinItems(*args)
    def BinMeanWeight(*args): return _stomp.HistogramBin_BinMeanWeight(*args)
HistogramBin_swigregister = _stomp.HistogramBin_swigregister
HistogramBin_swigregister(HistogramBin)

class Histogram(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Histogram, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Histogram, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_Histogram(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_Histogram
    __del__ = lambda self : None;
    def SetBounds(*args): return _stomp.Histogram_SetBounds(*args)
    def SetNBins(*args): return _stomp.Histogram_SetNBins(*args)
    def SetLogBinning(*args): return _stomp.Histogram_SetLogBinning(*args)
    def AssignBins(*args): return _stomp.Histogram_AssignBins(*args)
    def AddToBin(*args): return _stomp.Histogram_AddToBin(*args)
    def Begin(*args): return _stomp.Histogram_Begin(*args)
    def End(*args): return _stomp.Histogram_End(*args)
    def BoundMin(*args): return _stomp.Histogram_BoundMin(*args)
    def BoundMax(*args): return _stomp.Histogram_BoundMax(*args)
    def NBins(*args): return _stomp.Histogram_NBins(*args)
    def LogBinning(*args): return _stomp.Histogram_LogBinning(*args)
    def TotalItems(*args): return _stomp.Histogram_TotalItems(*args)
    def TotalWeight(*args): return _stomp.Histogram_TotalWeight(*args)
    def MeanItemWeight(*args): return _stomp.Histogram_MeanItemWeight(*args)
    def MeanBinValue(*args): return _stomp.Histogram_MeanBinValue(*args)
    def MeanWeightedBinValue(*args): return _stomp.Histogram_MeanWeightedBinValue(*args)
    def Bins(self):
        "Returns an iterator for Bins."
        return GenericIterator(
                self._begin_Bins,
                self._deref_Bins,
                _iter_incr
                 )

    def _begin_Bins(*args): return _stomp.Histogram__begin_Bins(*args)
    def _deref_Bins(*args): return _stomp.Histogram__deref_Bins(*args)
Histogram_swigregister = _stomp.Histogram_swigregister
Histogram_swigregister(Histogram)

Tokenize = _stomp.Tokenize
class AngularCoordinate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngularCoordinate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AngularCoordinate, name)
    __repr__ = _swig_repr
    Survey = _stomp.AngularCoordinate_Survey
    Equatorial = _stomp.AngularCoordinate_Equatorial
    Galactic = _stomp.AngularCoordinate_Galactic
    def __init__(self, *args): 
        this = _stomp.new_AngularCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_AngularCoordinate
    __del__ = lambda self : None;
    def SetSurveyCoordinates(*args): return _stomp.AngularCoordinate_SetSurveyCoordinates(*args)
    def SetEquatorialCoordinates(*args): return _stomp.AngularCoordinate_SetEquatorialCoordinates(*args)
    def SetGalacticCoordinates(*args): return _stomp.AngularCoordinate_SetGalacticCoordinates(*args)
    def SetUnitSphereCoordinates(*args): return _stomp.AngularCoordinate_SetUnitSphereCoordinates(*args)
    def Set(*args): return _stomp.AngularCoordinate_Set(*args)
    def Lambda(*args): return _stomp.AngularCoordinate_Lambda(*args)
    def Eta(*args): return _stomp.AngularCoordinate_Eta(*args)
    def LambdaRadians(*args): return _stomp.AngularCoordinate_LambdaRadians(*args)
    def EtaRadians(*args): return _stomp.AngularCoordinate_EtaRadians(*args)
    def RA(*args): return _stomp.AngularCoordinate_RA(*args)
    def DEC(*args): return _stomp.AngularCoordinate_DEC(*args)
    def RARadians(*args): return _stomp.AngularCoordinate_RARadians(*args)
    def DECRadians(*args): return _stomp.AngularCoordinate_DECRadians(*args)
    def GalLon(*args): return _stomp.AngularCoordinate_GalLon(*args)
    def GalLat(*args): return _stomp.AngularCoordinate_GalLat(*args)
    def GalLonRadians(*args): return _stomp.AngularCoordinate_GalLonRadians(*args)
    def GalLatRadians(*args): return _stomp.AngularCoordinate_GalLatRadians(*args)
    def UnitSphereX(*args): return _stomp.AngularCoordinate_UnitSphereX(*args)
    def UnitSphereY(*args): return _stomp.AngularCoordinate_UnitSphereY(*args)
    def UnitSphereZ(*args): return _stomp.AngularCoordinate_UnitSphereZ(*args)
    def AngularDistance(*args): return _stomp.AngularCoordinate_AngularDistance(*args)
    def DotProduct(*args): return _stomp.AngularCoordinate_DotProduct(*args)
    def CrossProduct(*args): return _stomp.AngularCoordinate_CrossProduct(*args)
    def GreatCircle(*args): return _stomp.AngularCoordinate_GreatCircle(*args)
    def PositionAngle(*args): return _stomp.AngularCoordinate_PositionAngle(*args)
    def CosPositionAngle(*args): return _stomp.AngularCoordinate_CosPositionAngle(*args)
    def SinPositionAngle(*args): return _stomp.AngularCoordinate_SinPositionAngle(*args)
    def Rotate(*args): return _stomp.AngularCoordinate_Rotate(*args)
    __swig_getmethods__["SurveyToGalactic"] = lambda x: _stomp.AngularCoordinate_SurveyToGalactic
    if _newclass:SurveyToGalactic = staticmethod(_stomp.AngularCoordinate_SurveyToGalactic)
    __swig_getmethods__["SurveyToEquatorial"] = lambda x: _stomp.AngularCoordinate_SurveyToEquatorial
    if _newclass:SurveyToEquatorial = staticmethod(_stomp.AngularCoordinate_SurveyToEquatorial)
    __swig_getmethods__["EquatorialToSurvey"] = lambda x: _stomp.AngularCoordinate_EquatorialToSurvey
    if _newclass:EquatorialToSurvey = staticmethod(_stomp.AngularCoordinate_EquatorialToSurvey)
    __swig_getmethods__["EquatorialToGalactic"] = lambda x: _stomp.AngularCoordinate_EquatorialToGalactic
    if _newclass:EquatorialToGalactic = staticmethod(_stomp.AngularCoordinate_EquatorialToGalactic)
    __swig_getmethods__["GalacticToSurvey"] = lambda x: _stomp.AngularCoordinate_GalacticToSurvey
    if _newclass:GalacticToSurvey = staticmethod(_stomp.AngularCoordinate_GalacticToSurvey)
    __swig_getmethods__["GalacticToEquatorial"] = lambda x: _stomp.AngularCoordinate_GalacticToEquatorial
    if _newclass:GalacticToEquatorial = staticmethod(_stomp.AngularCoordinate_GalacticToEquatorial)
    __swig_getmethods__["SurveyToXYZ"] = lambda x: _stomp.AngularCoordinate_SurveyToXYZ
    if _newclass:SurveyToXYZ = staticmethod(_stomp.AngularCoordinate_SurveyToXYZ)
    __swig_getmethods__["EquatorialToXYZ"] = lambda x: _stomp.AngularCoordinate_EquatorialToXYZ
    if _newclass:EquatorialToXYZ = staticmethod(_stomp.AngularCoordinate_EquatorialToXYZ)
    __swig_getmethods__["GalacticToXYZ"] = lambda x: _stomp.AngularCoordinate_GalacticToXYZ
    if _newclass:GalacticToXYZ = staticmethod(_stomp.AngularCoordinate_GalacticToXYZ)
    __swig_getmethods__["EtaMultiplier"] = lambda x: _stomp.AngularCoordinate_EtaMultiplier
    if _newclass:EtaMultiplier = staticmethod(_stomp.AngularCoordinate_EtaMultiplier)
    __swig_getmethods__["RAMultiplier"] = lambda x: _stomp.AngularCoordinate_RAMultiplier
    if _newclass:RAMultiplier = staticmethod(_stomp.AngularCoordinate_RAMultiplier)
    __swig_getmethods__["GalLonMultiplier"] = lambda x: _stomp.AngularCoordinate_GalLonMultiplier
    if _newclass:GalLonMultiplier = staticmethod(_stomp.AngularCoordinate_GalLonMultiplier)
    __swig_getmethods__["ToAngularVector"] = lambda x: _stomp.AngularCoordinate_ToAngularVector
    if _newclass:ToAngularVector = staticmethod(_stomp.AngularCoordinate_ToAngularVector)
    __swig_getmethods__["FromAngularVector"] = lambda x: _stomp.AngularCoordinate_FromAngularVector
    if _newclass:FromAngularVector = staticmethod(_stomp.AngularCoordinate_FromAngularVector)
AngularCoordinate_swigregister = _stomp.AngularCoordinate_swigregister
AngularCoordinate_swigregister(AngularCoordinate)
AngularCoordinate_SurveyToGalactic = _stomp.AngularCoordinate_SurveyToGalactic
AngularCoordinate_SurveyToEquatorial = _stomp.AngularCoordinate_SurveyToEquatorial
AngularCoordinate_EquatorialToSurvey = _stomp.AngularCoordinate_EquatorialToSurvey
AngularCoordinate_EquatorialToGalactic = _stomp.AngularCoordinate_EquatorialToGalactic
AngularCoordinate_GalacticToSurvey = _stomp.AngularCoordinate_GalacticToSurvey
AngularCoordinate_GalacticToEquatorial = _stomp.AngularCoordinate_GalacticToEquatorial
AngularCoordinate_SurveyToXYZ = _stomp.AngularCoordinate_SurveyToXYZ
AngularCoordinate_EquatorialToXYZ = _stomp.AngularCoordinate_EquatorialToXYZ
AngularCoordinate_GalacticToXYZ = _stomp.AngularCoordinate_GalacticToXYZ
AngularCoordinate_EtaMultiplier = _stomp.AngularCoordinate_EtaMultiplier
AngularCoordinate_RAMultiplier = _stomp.AngularCoordinate_RAMultiplier
AngularCoordinate_GalLonMultiplier = _stomp.AngularCoordinate_GalLonMultiplier
AngularCoordinate_ToAngularVector = _stomp.AngularCoordinate_ToAngularVector
AngularCoordinate_FromAngularVector = _stomp.AngularCoordinate_FromAngularVector

class WeightedAngularCoordinate(AngularCoordinate):
    __swig_setmethods__ = {}
    for _s in [AngularCoordinate]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeightedAngularCoordinate, name, value)
    __swig_getmethods__ = {}
    for _s in [AngularCoordinate]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeightedAngularCoordinate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_WeightedAngularCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_WeightedAngularCoordinate
    __del__ = lambda self : None;
    def SetWeight(*args): return _stomp.WeightedAngularCoordinate_SetWeight(*args)
    def Weight(*args): return _stomp.WeightedAngularCoordinate_Weight(*args)
    def SetField(*args): return _stomp.WeightedAngularCoordinate_SetField(*args)
    def Field(*args): return _stomp.WeightedAngularCoordinate_Field(*args)
    def NFields(*args): return _stomp.WeightedAngularCoordinate_NFields(*args)
    def HasFields(*args): return _stomp.WeightedAngularCoordinate_HasFields(*args)
    def FieldNames(*args): return _stomp.WeightedAngularCoordinate_FieldNames(*args)
    def CopyFields(*args): return _stomp.WeightedAngularCoordinate_CopyFields(*args)
    def CopyFieldToWeight(*args): return _stomp.WeightedAngularCoordinate_CopyFieldToWeight(*args)
    def RestoreOriginalWeight(*args): return _stomp.WeightedAngularCoordinate_RestoreOriginalWeight(*args)
    __swig_getmethods__["ToWAngularVector"] = lambda x: _stomp.WeightedAngularCoordinate_ToWAngularVector
    if _newclass:ToWAngularVector = staticmethod(_stomp.WeightedAngularCoordinate_ToWAngularVector)
    __swig_getmethods__["FromWAngularVector"] = lambda x: _stomp.WeightedAngularCoordinate_FromWAngularVector
    if _newclass:FromWAngularVector = staticmethod(_stomp.WeightedAngularCoordinate_FromWAngularVector)
    __swig_getmethods__["AddField"] = lambda x: _stomp.WeightedAngularCoordinate_AddField
    if _newclass:AddField = staticmethod(_stomp.WeightedAngularCoordinate_AddField)
WeightedAngularCoordinate_swigregister = _stomp.WeightedAngularCoordinate_swigregister
WeightedAngularCoordinate_swigregister(WeightedAngularCoordinate)
WeightedAngularCoordinate_ToWAngularVector = _stomp.WeightedAngularCoordinate_ToWAngularVector
WeightedAngularCoordinate_FromWAngularVector = _stomp.WeightedAngularCoordinate_FromWAngularVector
WeightedAngularCoordinate_AddField = _stomp.WeightedAngularCoordinate_AddField

class CosmoCoordinate(WeightedAngularCoordinate):
    __swig_setmethods__ = {}
    for _s in [WeightedAngularCoordinate]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosmoCoordinate, name, value)
    __swig_getmethods__ = {}
    for _s in [WeightedAngularCoordinate]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CosmoCoordinate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_CosmoCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_CosmoCoordinate
    __del__ = lambda self : None;
    def ProjectedRadius(*args): return _stomp.CosmoCoordinate_ProjectedRadius(*args)
    def DotProduct(*args): return _stomp.CosmoCoordinate_DotProduct(*args)
    def ComovingDistance(*args): return _stomp.CosmoCoordinate_ComovingDistance(*args)
    def AngularDiameterDistance(*args): return _stomp.CosmoCoordinate_AngularDiameterDistance(*args)
    def LuminosityDistance(*args): return _stomp.CosmoCoordinate_LuminosityDistance(*args)
    def Redshift(*args): return _stomp.CosmoCoordinate_Redshift(*args)
    def SetRedshift(*args): return _stomp.CosmoCoordinate_SetRedshift(*args)
    __swig_getmethods__["ToCosmoVector"] = lambda x: _stomp.CosmoCoordinate_ToCosmoVector
    if _newclass:ToCosmoVector = staticmethod(_stomp.CosmoCoordinate_ToCosmoVector)
    __swig_getmethods__["FromCosmoVector"] = lambda x: _stomp.CosmoCoordinate_FromCosmoVector
    if _newclass:FromCosmoVector = staticmethod(_stomp.CosmoCoordinate_FromCosmoVector)
CosmoCoordinate_swigregister = _stomp.CosmoCoordinate_swigregister
CosmoCoordinate_swigregister(CosmoCoordinate)
CosmoCoordinate_ToCosmoVector = _stomp.CosmoCoordinate_ToCosmoVector
CosmoCoordinate_FromCosmoVector = _stomp.CosmoCoordinate_FromCosmoVector

class IndexedAngularCoordinate(AngularCoordinate):
    __swig_setmethods__ = {}
    for _s in [AngularCoordinate]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexedAngularCoordinate, name, value)
    __swig_getmethods__ = {}
    for _s in [AngularCoordinate]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexedAngularCoordinate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_IndexedAngularCoordinate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_IndexedAngularCoordinate
    __del__ = lambda self : None;
    def SetIndex(*args): return _stomp.IndexedAngularCoordinate_SetIndex(*args)
    def Index(*args): return _stomp.IndexedAngularCoordinate_Index(*args)
    __swig_getmethods__["ToIAngularVector"] = lambda x: _stomp.IndexedAngularCoordinate_ToIAngularVector
    if _newclass:ToIAngularVector = staticmethod(_stomp.IndexedAngularCoordinate_ToIAngularVector)
    __swig_getmethods__["FromIAngularVector"] = lambda x: _stomp.IndexedAngularCoordinate_FromIAngularVector
    if _newclass:FromIAngularVector = staticmethod(_stomp.IndexedAngularCoordinate_FromIAngularVector)
IndexedAngularCoordinate_swigregister = _stomp.IndexedAngularCoordinate_swigregister
IndexedAngularCoordinate_swigregister(IndexedAngularCoordinate)
IndexedAngularCoordinate_ToIAngularVector = _stomp.IndexedAngularCoordinate_ToIAngularVector
IndexedAngularCoordinate_FromIAngularVector = _stomp.IndexedAngularCoordinate_FromIAngularVector

class TreePixel(Pixel):
    __swig_setmethods__ = {}
    for _s in [Pixel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreePixel, name, value)
    __swig_getmethods__ = {}
    for _s in [Pixel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreePixel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_TreePixel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_TreePixel
    __del__ = lambda self : None;
    def _InitializeSubPixels(*args): return _stomp.TreePixel__InitializeSubPixels(*args)
    def DirectPairCount(*args): return _stomp.TreePixel_DirectPairCount(*args)
    def FindPairs(*args): return _stomp.TreePixel_FindPairs(*args)
    def DirectWeightedPairs(*args): return _stomp.TreePixel_DirectWeightedPairs(*args)
    def FindWeightedPairs(*args): return _stomp.TreePixel_FindWeightedPairs(*args)
    def FindKNearestNeighbors(*args): return _stomp.TreePixel_FindKNearestNeighbors(*args)
    def FindNearestNeighbor(*args): return _stomp.TreePixel_FindNearestNeighbor(*args)
    def KNearestNeighborDistance(*args): return _stomp.TreePixel_KNearestNeighborDistance(*args)
    def NearestNeighborDistance(*args): return _stomp.TreePixel_NearestNeighborDistance(*args)
    def ClosestMatch(*args): return _stomp.TreePixel_ClosestMatch(*args)
    def InitializeCorners(*args): return _stomp.TreePixel_InitializeCorners(*args)
    def AddPoint(*args): return _stomp.TreePixel_AddPoint(*args)
    def NPoints(*args): return _stomp.TreePixel_NPoints(*args)
    def PixelWeight(*args): return _stomp.TreePixel_PixelWeight(*args)
    def Coverage(*args): return _stomp.TreePixel_Coverage(*args)
    def Points(*args): return _stomp.TreePixel_Points(*args)
    def Nodes(*args): return _stomp.TreePixel_Nodes(*args)
    def AddToWeight(*args): return _stomp.TreePixel_AddToWeight(*args)
    def FieldTotal(*args): return _stomp.TreePixel_FieldTotal(*args)
    def AddToField(*args): return _stomp.TreePixel_AddToField(*args)
    def NField(*args): return _stomp.TreePixel_NField(*args)
    def HasFields(*args): return _stomp.TreePixel_HasFields(*args)
    def FieldNames(*args): return _stomp.TreePixel_FieldNames(*args)
    def SetPixelCapacity(*args): return _stomp.TreePixel_SetPixelCapacity(*args)
    def PixelCapacity(*args): return _stomp.TreePixel_PixelCapacity(*args)
    def HasPoints(*args): return _stomp.TreePixel_HasPoints(*args)
    def HasNodes(*args): return _stomp.TreePixel_HasNodes(*args)
    def Clear(*args): return _stomp.TreePixel_Clear(*args)
    def UnitSphereX(*args): return _stomp.TreePixel_UnitSphereX(*args)
    def UnitSphereY(*args): return _stomp.TreePixel_UnitSphereY(*args)
    def UnitSphereZ(*args): return _stomp.TreePixel_UnitSphereZ(*args)
    def UnitSphereX_UL(*args): return _stomp.TreePixel_UnitSphereX_UL(*args)
    def UnitSphereY_UL(*args): return _stomp.TreePixel_UnitSphereY_UL(*args)
    def UnitSphereZ_UL(*args): return _stomp.TreePixel_UnitSphereZ_UL(*args)
    def UnitSphereX_UR(*args): return _stomp.TreePixel_UnitSphereX_UR(*args)
    def UnitSphereY_UR(*args): return _stomp.TreePixel_UnitSphereY_UR(*args)
    def UnitSphereZ_UR(*args): return _stomp.TreePixel_UnitSphereZ_UR(*args)
    def UnitSphereX_LL(*args): return _stomp.TreePixel_UnitSphereX_LL(*args)
    def UnitSphereY_LL(*args): return _stomp.TreePixel_UnitSphereY_LL(*args)
    def UnitSphereZ_LL(*args): return _stomp.TreePixel_UnitSphereZ_LL(*args)
    def UnitSphereX_LR(*args): return _stomp.TreePixel_UnitSphereX_LR(*args)
    def UnitSphereY_LR(*args): return _stomp.TreePixel_UnitSphereY_LR(*args)
    def UnitSphereZ_LR(*args): return _stomp.TreePixel_UnitSphereZ_LR(*args)
    def WithinAnnulus(*args): return _stomp.TreePixel_WithinAnnulus(*args)
TreePixel_swigregister = _stomp.TreePixel_swigregister
TreePixel_swigregister(TreePixel)

class NearestNeighborPixel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NearestNeighborPixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NearestNeighborPixel, name)
    __repr__ = _swig_repr
    def __call__(*args): return _stomp.NearestNeighborPixel___call__(*args)
    def __init__(self, *args): 
        this = _stomp.new_NearestNeighborPixel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_NearestNeighborPixel
    __del__ = lambda self : None;
NearestNeighborPixel_swigregister = _stomp.NearestNeighborPixel_swigregister
NearestNeighborPixel_swigregister(NearestNeighborPixel)

class NearestNeighborPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NearestNeighborPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NearestNeighborPoint, name)
    __repr__ = _swig_repr
    def __call__(*args): return _stomp.NearestNeighborPoint___call__(*args)
    def __init__(self, *args): 
        this = _stomp.new_NearestNeighborPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_NearestNeighborPoint
    __del__ = lambda self : None;
NearestNeighborPoint_swigregister = _stomp.NearestNeighborPoint_swigregister
NearestNeighborPoint_swigregister(NearestNeighborPoint)

class TreeNeighbor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeNeighbor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TreeNeighbor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_TreeNeighbor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_TreeNeighbor
    __del__ = lambda self : None;
    def NearestNeighbors(*args): return _stomp.TreeNeighbor_NearestNeighbors(*args)
    def Neighbors(*args): return _stomp.TreeNeighbor_Neighbors(*args)
    def MaxNeighbors(*args): return _stomp.TreeNeighbor_MaxNeighbors(*args)
    def TestPoint(*args): return _stomp.TreeNeighbor_TestPoint(*args)
    def MaxDistance(*args): return _stomp.TreeNeighbor_MaxDistance(*args)
    def MaxAngularDistance(*args): return _stomp.TreeNeighbor_MaxAngularDistance(*args)
    def NodesVisited(*args): return _stomp.TreeNeighbor_NodesVisited(*args)
    def AddNode(*args): return _stomp.TreeNeighbor_AddNode(*args)
TreeNeighbor_swigregister = _stomp.TreeNeighbor_swigregister
TreeNeighbor_swigregister(TreeNeighbor)

class IndexedTreePixel(Pixel):
    __swig_setmethods__ = {}
    for _s in [Pixel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexedTreePixel, name, value)
    __swig_getmethods__ = {}
    for _s in [Pixel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexedTreePixel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_IndexedTreePixel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_IndexedTreePixel
    __del__ = lambda self : None;
    def FindPairs(*args): return _stomp.IndexedTreePixel_FindPairs(*args)
    def FindKNearestNeighbors(*args): return _stomp.IndexedTreePixel_FindKNearestNeighbors(*args)
    def FindNearestNeighbor(*args): return _stomp.IndexedTreePixel_FindNearestNeighbor(*args)
    def KNearestNeighborDistance(*args): return _stomp.IndexedTreePixel_KNearestNeighborDistance(*args)
    def NearestNeighborDistance(*args): return _stomp.IndexedTreePixel_NearestNeighborDistance(*args)
    def ClosestMatch(*args): return _stomp.IndexedTreePixel_ClosestMatch(*args)
    def InitializeCorners(*args): return _stomp.IndexedTreePixel_InitializeCorners(*args)
    def AddPoint(*args): return _stomp.IndexedTreePixel_AddPoint(*args)
    def NPoints(*args): return _stomp.IndexedTreePixel_NPoints(*args)
    def Indices(*args): return _stomp.IndexedTreePixel_Indices(*args)
    def Coverage(*args): return _stomp.IndexedTreePixel_Coverage(*args)
    def Points(*args): return _stomp.IndexedTreePixel_Points(*args)
    def Nodes(*args): return _stomp.IndexedTreePixel_Nodes(*args)
    def SetPixelCapacity(*args): return _stomp.IndexedTreePixel_SetPixelCapacity(*args)
    def PixelCapacity(*args): return _stomp.IndexedTreePixel_PixelCapacity(*args)
    def HasPoints(*args): return _stomp.IndexedTreePixel_HasPoints(*args)
    def HasNodes(*args): return _stomp.IndexedTreePixel_HasNodes(*args)
    def Clear(*args): return _stomp.IndexedTreePixel_Clear(*args)
    def UnitSphereX(*args): return _stomp.IndexedTreePixel_UnitSphereX(*args)
    def UnitSphereY(*args): return _stomp.IndexedTreePixel_UnitSphereY(*args)
    def UnitSphereZ(*args): return _stomp.IndexedTreePixel_UnitSphereZ(*args)
    def UnitSphereX_UL(*args): return _stomp.IndexedTreePixel_UnitSphereX_UL(*args)
    def UnitSphereY_UL(*args): return _stomp.IndexedTreePixel_UnitSphereY_UL(*args)
    def UnitSphereZ_UL(*args): return _stomp.IndexedTreePixel_UnitSphereZ_UL(*args)
    def UnitSphereX_UR(*args): return _stomp.IndexedTreePixel_UnitSphereX_UR(*args)
    def UnitSphereY_UR(*args): return _stomp.IndexedTreePixel_UnitSphereY_UR(*args)
    def UnitSphereZ_UR(*args): return _stomp.IndexedTreePixel_UnitSphereZ_UR(*args)
    def UnitSphereX_LL(*args): return _stomp.IndexedTreePixel_UnitSphereX_LL(*args)
    def UnitSphereY_LL(*args): return _stomp.IndexedTreePixel_UnitSphereY_LL(*args)
    def UnitSphereZ_LL(*args): return _stomp.IndexedTreePixel_UnitSphereZ_LL(*args)
    def UnitSphereX_LR(*args): return _stomp.IndexedTreePixel_UnitSphereX_LR(*args)
    def UnitSphereY_LR(*args): return _stomp.IndexedTreePixel_UnitSphereY_LR(*args)
    def UnitSphereZ_LR(*args): return _stomp.IndexedTreePixel_UnitSphereZ_LR(*args)
    def WithinAnnulus(*args): return _stomp.IndexedTreePixel_WithinAnnulus(*args)
IndexedTreePixel_swigregister = _stomp.IndexedTreePixel_swigregister
IndexedTreePixel_swigregister(IndexedTreePixel)

class NearestNeighborIndexedPixel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NearestNeighborIndexedPixel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NearestNeighborIndexedPixel, name)
    __repr__ = _swig_repr
    def __call__(*args): return _stomp.NearestNeighborIndexedPixel___call__(*args)
    def __init__(self, *args): 
        this = _stomp.new_NearestNeighborIndexedPixel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_NearestNeighborIndexedPixel
    __del__ = lambda self : None;
NearestNeighborIndexedPixel_swigregister = _stomp.NearestNeighborIndexedPixel_swigregister
NearestNeighborIndexedPixel_swigregister(NearestNeighborIndexedPixel)

class NearestNeighborIndexedPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NearestNeighborIndexedPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NearestNeighborIndexedPoint, name)
    __repr__ = _swig_repr
    def __call__(*args): return _stomp.NearestNeighborIndexedPoint___call__(*args)
    def __init__(self, *args): 
        this = _stomp.new_NearestNeighborIndexedPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_NearestNeighborIndexedPoint
    __del__ = lambda self : None;
NearestNeighborIndexedPoint_swigregister = _stomp.NearestNeighborIndexedPoint_swigregister
NearestNeighborIndexedPoint_swigregister(NearestNeighborIndexedPoint)

class IndexedTreeNeighbor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexedTreeNeighbor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexedTreeNeighbor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_IndexedTreeNeighbor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_IndexedTreeNeighbor
    __del__ = lambda self : None;
    def NearestNeighbors(*args): return _stomp.IndexedTreeNeighbor_NearestNeighbors(*args)
    def Neighbors(*args): return _stomp.IndexedTreeNeighbor_Neighbors(*args)
    def MaxNeighbors(*args): return _stomp.IndexedTreeNeighbor_MaxNeighbors(*args)
    def TestPoint(*args): return _stomp.IndexedTreeNeighbor_TestPoint(*args)
    def MaxDistance(*args): return _stomp.IndexedTreeNeighbor_MaxDistance(*args)
    def MaxAngularDistance(*args): return _stomp.IndexedTreeNeighbor_MaxAngularDistance(*args)
    def NodesVisited(*args): return _stomp.IndexedTreeNeighbor_NodesVisited(*args)
    def AddNode(*args): return _stomp.IndexedTreeNeighbor_AddNode(*args)
IndexedTreeNeighbor_swigregister = _stomp.IndexedTreeNeighbor_swigregister
IndexedTreeNeighbor_swigregister(IndexedTreeNeighbor)

class TreeMap(BaseMap):
    __swig_setmethods__ = {}
    for _s in [BaseMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TreeMap, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TreeMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_TreeMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_TreeMap
    __del__ = lambda self : None;
    def FindPairs(*args): return _stomp.TreeMap_FindPairs(*args)
    def FindWeightedPairs(*args): return _stomp.TreeMap_FindWeightedPairs(*args)
    def FindPairsWithRegions(*args): return _stomp.TreeMap_FindPairsWithRegions(*args)
    def FindWeightedPairsWithRegions(*args): return _stomp.TreeMap_FindWeightedPairsWithRegions(*args)
    def FindKNearestNeighbors(*args): return _stomp.TreeMap_FindKNearestNeighbors(*args)
    def FindNearestNeighbor(*args): return _stomp.TreeMap_FindNearestNeighbor(*args)
    def KNearestNeighborDistance(*args): return _stomp.TreeMap_KNearestNeighborDistance(*args)
    def NearestNeighborDistance(*args): return _stomp.TreeMap_NearestNeighborDistance(*args)
    def ClosestMatch(*args): return _stomp.TreeMap_ClosestMatch(*args)
    def AddPoint(*args): return _stomp.TreeMap_AddPoint(*args)
    def Read(*args): return _stomp.TreeMap_Read(*args)
    def Coverage(*args): return _stomp.TreeMap_Coverage(*args)
    def Covering(*args): return _stomp.TreeMap_Covering(*args)
    def FindUnmaskedFraction(*args): return _stomp.TreeMap_FindUnmaskedFraction(*args)
    def FindUnmaskedStatus(*args): return _stomp.TreeMap_FindUnmaskedStatus(*args)
    def NodeMap(*args): return _stomp.TreeMap_NodeMap(*args)
    def Resolution(*args): return _stomp.TreeMap_Resolution(*args)
    def PixelCapacity(*args): return _stomp.TreeMap_PixelCapacity(*args)
    def SetResolution(*args): return _stomp.TreeMap_SetResolution(*args)
    def SetPixelCapacity(*args): return _stomp.TreeMap_SetPixelCapacity(*args)
    def NPoints(*args): return _stomp.TreeMap_NPoints(*args)
    def Points(*args): return _stomp.TreeMap_Points(*args)
    def Weight(*args): return _stomp.TreeMap_Weight(*args)
    def FieldTotal(*args): return _stomp.TreeMap_FieldTotal(*args)
    def NField(*args): return _stomp.TreeMap_NField(*args)
    def HasFields(*args): return _stomp.TreeMap_HasFields(*args)
    def FieldNames(*args): return _stomp.TreeMap_FieldNames(*args)
    def BaseNodes(*args): return _stomp.TreeMap_BaseNodes(*args)
    def Nodes(*args): return _stomp.TreeMap_Nodes(*args)
    def Size(*args): return _stomp.TreeMap_Size(*args)
    def Area(*args): return _stomp.TreeMap_Area(*args)
    def CalculateArea(*args): return _stomp.TreeMap_CalculateArea(*args)
    def MinResolution(*args): return _stomp.TreeMap_MinResolution(*args)
    def MaxResolution(*args): return _stomp.TreeMap_MaxResolution(*args)
    def MinLevel(*args): return _stomp.TreeMap_MinLevel(*args)
    def MaxLevel(*args): return _stomp.TreeMap_MaxLevel(*args)
    def Empty(*args): return _stomp.TreeMap_Empty(*args)
    def Clear(*args): return _stomp.TreeMap_Clear(*args)
TreeMap_swigregister = _stomp.TreeMap_swigregister
TreeMap_swigregister(TreeMap)

class IndexedTreeMap(BaseMap):
    __swig_setmethods__ = {}
    for _s in [BaseMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexedTreeMap, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexedTreeMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _stomp.new_IndexedTreeMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _stomp.delete_IndexedTreeMap
    __del__ = lambda self : None;
    def FindPairs(*args): return _stomp.IndexedTreeMap_FindPairs(*args)
    def FindKNearestNeighbors(*args): return _stomp.IndexedTreeMap_FindKNearestNeighbors(*args)
    def FindNearestNeighbor(*args): return _stomp.IndexedTreeMap_FindNearestNeighbor(*args)
    def KNearestNeighborDistance(*args): return _stomp.IndexedTreeMap_KNearestNeighborDistance(*args)
    def NearestNeighborDistance(*args): return _stomp.IndexedTreeMap_NearestNeighborDistance(*args)
    def ClosestMatch(*args): return _stomp.IndexedTreeMap_ClosestMatch(*args)
    def AddPoint(*args): return _stomp.IndexedTreeMap_AddPoint(*args)
    def Read(*args): return _stomp.IndexedTreeMap_Read(*args)
    def Coverage(*args): return _stomp.IndexedTreeMap_Coverage(*args)
    def Covering(*args): return _stomp.IndexedTreeMap_Covering(*args)
    def FindUnmaskedFraction(*args): return _stomp.IndexedTreeMap_FindUnmaskedFraction(*args)
    def FindUnmaskedStatus(*args): return _stomp.IndexedTreeMap_FindUnmaskedStatus(*args)
    def NodeMap(*args): return _stomp.IndexedTreeMap_NodeMap(*args)
    def Resolution(*args): return _stomp.IndexedTreeMap_Resolution(*args)
    def PixelCapacity(*args): return _stomp.IndexedTreeMap_PixelCapacity(*args)
    def SetResolution(*args): return _stomp.IndexedTreeMap_SetResolution(*args)
    def SetPixelCapacity(*args): return _stomp.IndexedTreeMap_SetPixelCapacity(*args)
    def NPoints(*args): return _stomp.IndexedTreeMap_NPoints(*args)
    def Points(*args): return _stomp.IndexedTreeMap_Points(*args)
    def Indices(*args): return _stomp.IndexedTreeMap_Indices(*args)
    def BaseNodes(*args): return _stomp.IndexedTreeMap_BaseNodes(*args)
    def Nodes(*args): return _stomp.IndexedTreeMap_Nodes(*args)
    def Size(*args): return _stomp.IndexedTreeMap_Size(*args)
    def Area(*args): return _stomp.IndexedTreeMap_Area(*args)
    def CalculateArea(*args): return _stomp.IndexedTreeMap_CalculateArea(*args)
    def MinResolution(*args): return _stomp.IndexedTreeMap_MinResolution(*args)
    def MaxResolution(*args): return _stomp.IndexedTreeMap_MaxResolution(*args)
    def MinLevel(*args): return _stomp.IndexedTreeMap_MinLevel(*args)
    def MaxLevel(*args): return _stomp.IndexedTreeMap_MaxLevel(*args)
    def Empty(*args): return _stomp.IndexedTreeMap_Empty(*args)
    def Clear(*args): return _stomp.IndexedTreeMap_Clear(*args)
IndexedTreeMap_swigregister = _stomp.IndexedTreeMap_swigregister
IndexedTreeMap_swigregister(IndexedTreeMap)

class AngularVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngularVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AngularVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _stomp.AngularVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _stomp.AngularVector___nonzero__(*args)
    def __len__(*args): return _stomp.AngularVector___len__(*args)
    def pop(*args): return _stomp.AngularVector_pop(*args)
    def __getslice__(*args): return _stomp.AngularVector___getslice__(*args)
    def __setslice__(*args): return _stomp.AngularVector___setslice__(*args)
    def __delslice__(*args): return _stomp.AngularVector___delslice__(*args)
    def __delitem__(*args): return _stomp.AngularVector___delitem__(*args)
    def __getitem__(*args): return _stomp.AngularVector___getitem__(*args)
    def __setitem__(*args): return _stomp.AngularVector___setitem__(*args)
    def append(*args): return _stomp.AngularVector_append(*args)
    def empty(*args): return _stomp.AngularVector_empty(*args)
    def size(*args): return _stomp.AngularVector_size(*args)
    def clear(*args): return _stomp.AngularVector_clear(*args)
    def swap(*args): return _stomp.AngularVector_swap(*args)
    def get_allocator(*args): return _stomp.AngularVector_get_allocator(*args)
    def begin(*args): return _stomp.AngularVector_begin(*args)
    def end(*args): return _stomp.AngularVector_end(*args)
    def rbegin(*args): return _stomp.AngularVector_rbegin(*args)
    def rend(*args): return _stomp.AngularVector_rend(*args)
    def pop_back(*args): return _stomp.AngularVector_pop_back(*args)
    def erase(*args): return _stomp.AngularVector_erase(*args)
    def __init__(self, *args): 
        this = _stomp.new_AngularVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _stomp.AngularVector_push_back(*args)
    def front(*args): return _stomp.AngularVector_front(*args)
    def back(*args): return _stomp.AngularVector_back(*args)
    def assign(*args): return _stomp.AngularVector_assign(*args)
    def resize(*args): return _stomp.AngularVector_resize(*args)
    def insert(*args): return _stomp.AngularVector_insert(*args)
    def reserve(*args): return _stomp.AngularVector_reserve(*args)
    def capacity(*args): return _stomp.AngularVector_capacity(*args)
    __swig_destroy__ = _stomp.delete_AngularVector
    __del__ = lambda self : None;
AngularVector_swigregister = _stomp.AngularVector_swigregister
AngularVector_swigregister(AngularVector)

class ThetaVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThetaVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThetaVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _stomp.ThetaVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _stomp.ThetaVector___nonzero__(*args)
    def __len__(*args): return _stomp.ThetaVector___len__(*args)
    def pop(*args): return _stomp.ThetaVector_pop(*args)
    def __getslice__(*args): return _stomp.ThetaVector___getslice__(*args)
    def __setslice__(*args): return _stomp.ThetaVector___setslice__(*args)
    def __delslice__(*args): return _stomp.ThetaVector___delslice__(*args)
    def __delitem__(*args): return _stomp.ThetaVector___delitem__(*args)
    def __getitem__(*args): return _stomp.ThetaVector___getitem__(*args)
    def __setitem__(*args): return _stomp.ThetaVector___setitem__(*args)
    def append(*args): return _stomp.ThetaVector_append(*args)
    def empty(*args): return _stomp.ThetaVector_empty(*args)
    def size(*args): return _stomp.ThetaVector_size(*args)
    def clear(*args): return _stomp.ThetaVector_clear(*args)
    def swap(*args): return _stomp.ThetaVector_swap(*args)
    def get_allocator(*args): return _stomp.ThetaVector_get_allocator(*args)
    def begin(*args): return _stomp.ThetaVector_begin(*args)
    def end(*args): return _stomp.ThetaVector_end(*args)
    def rbegin(*args): return _stomp.ThetaVector_rbegin(*args)
    def rend(*args): return _stomp.ThetaVector_rend(*args)
    def pop_back(*args): return _stomp.ThetaVector_pop_back(*args)
    def erase(*args): return _stomp.ThetaVector_erase(*args)
    def __init__(self, *args): 
        this = _stomp.new_ThetaVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _stomp.ThetaVector_push_back(*args)
    def front(*args): return _stomp.ThetaVector_front(*args)
    def back(*args): return _stomp.ThetaVector_back(*args)
    def assign(*args): return _stomp.ThetaVector_assign(*args)
    def resize(*args): return _stomp.ThetaVector_resize(*args)
    def insert(*args): return _stomp.ThetaVector_insert(*args)
    def reserve(*args): return _stomp.ThetaVector_reserve(*args)
    def capacity(*args): return _stomp.ThetaVector_capacity(*args)
    __swig_destroy__ = _stomp.delete_ThetaVector
    __del__ = lambda self : None;
ThetaVector_swigregister = _stomp.ThetaVector_swigregister
ThetaVector_swigregister(ThetaVector)

class RadialVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadialVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadialVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _stomp.RadialVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _stomp.RadialVector___nonzero__(*args)
    def __len__(*args): return _stomp.RadialVector___len__(*args)
    def pop(*args): return _stomp.RadialVector_pop(*args)
    def __getslice__(*args): return _stomp.RadialVector___getslice__(*args)
    def __setslice__(*args): return _stomp.RadialVector___setslice__(*args)
    def __delslice__(*args): return _stomp.RadialVector___delslice__(*args)
    def __delitem__(*args): return _stomp.RadialVector___delitem__(*args)
    def __getitem__(*args): return _stomp.RadialVector___getitem__(*args)
    def __setitem__(*args): return _stomp.RadialVector___setitem__(*args)
    def append(*args): return _stomp.RadialVector_append(*args)
    def empty(*args): return _stomp.RadialVector_empty(*args)
    def size(*args): return _stomp.RadialVector_size(*args)
    def clear(*args): return _stomp.RadialVector_clear(*args)
    def swap(*args): return _stomp.RadialVector_swap(*args)
    def get_allocator(*args): return _stomp.RadialVector_get_allocator(*args)
    def begin(*args): return _stomp.RadialVector_begin(*args)
    def end(*args): return _stomp.RadialVector_end(*args)
    def rbegin(*args): return _stomp.RadialVector_rbegin(*args)
    def rend(*args): return _stomp.RadialVector_rend(*args)
    def pop_back(*args): return _stomp.RadialVector_pop_back(*args)
    def erase(*args): return _stomp.RadialVector_erase(*args)
    def __init__(self, *args): 
        this = _stomp.new_RadialVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _stomp.RadialVector_push_back(*args)
    def front(*args): return _stomp.RadialVector_front(*args)
    def back(*args): return _stomp.RadialVector_back(*args)
    def assign(*args): return _stomp.RadialVector_assign(*args)
    def resize(*args): return _stomp.RadialVector_resize(*args)
    def insert(*args): return _stomp.RadialVector_insert(*args)
    def reserve(*args): return _stomp.RadialVector_reserve(*args)
    def capacity(*args): return _stomp.RadialVector_capacity(*args)
    __swig_destroy__ = _stomp.delete_RadialVector
    __del__ = lambda self : None;
RadialVector_swigregister = _stomp.RadialVector_swigregister
RadialVector_swigregister(RadialVector)

class WAngularVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WAngularVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WAngularVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _stomp.WAngularVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _stomp.WAngularVector___nonzero__(*args)
    def __len__(*args): return _stomp.WAngularVector___len__(*args)
    def pop(*args): return _stomp.WAngularVector_pop(*args)
    def __getslice__(*args): return _stomp.WAngularVector___getslice__(*args)
    def __setslice__(*args): return _stomp.WAngularVector___setslice__(*args)
    def __delslice__(*args): return _stomp.WAngularVector___delslice__(*args)
    def __delitem__(*args): return _stomp.WAngularVector___delitem__(*args)
    def __getitem__(*args): return _stomp.WAngularVector___getitem__(*args)
    def __setitem__(*args): return _stomp.WAngularVector___setitem__(*args)
    def append(*args): return _stomp.WAngularVector_append(*args)
    def empty(*args): return _stomp.WAngularVector_empty(*args)
    def size(*args): return _stomp.WAngularVector_size(*args)
    def clear(*args): return _stomp.WAngularVector_clear(*args)
    def swap(*args): return _stomp.WAngularVector_swap(*args)
    def get_allocator(*args): return _stomp.WAngularVector_get_allocator(*args)
    def begin(*args): return _stomp.WAngularVector_begin(*args)
    def end(*args): return _stomp.WAngularVector_end(*args)
    def rbegin(*args): return _stomp.WAngularVector_rbegin(*args)
    def rend(*args): return _stomp.WAngularVector_rend(*args)
    def pop_back(*args): return _stomp.WAngularVector_pop_back(*args)
    def erase(*args): return _stomp.WAngularVector_erase(*args)
    def __init__(self, *args): 
        this = _stomp.new_WAngularVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _stomp.WAngularVector_push_back(*args)
    def front(*args): return _stomp.WAngularVector_front(*args)
    def back(*args): return _stomp.WAngularVector_back(*args)
    def assign(*args): return _stomp.WAngularVector_assign(*args)
    def resize(*args): return _stomp.WAngularVector_resize(*args)
    def insert(*args): return _stomp.WAngularVector_insert(*args)
    def reserve(*args): return _stomp.WAngularVector_reserve(*args)
    def capacity(*args): return _stomp.WAngularVector_capacity(*args)
    __swig_destroy__ = _stomp.delete_WAngularVector
    __del__ = lambda self : None;
WAngularVector_swigregister = _stomp.WAngularVector_swigregister
WAngularVector_swigregister(WAngularVector)

class CosmoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosmoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CosmoVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _stomp.CosmoVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _stomp.CosmoVector___nonzero__(*args)
    def __len__(*args): return _stomp.CosmoVector___len__(*args)
    def pop(*args): return _stomp.CosmoVector_pop(*args)
    def __getslice__(*args): return _stomp.CosmoVector___getslice__(*args)
    def __setslice__(*args): return _stomp.CosmoVector___setslice__(*args)
    def __delslice__(*args): return _stomp.CosmoVector___delslice__(*args)
    def __delitem__(*args): return _stomp.CosmoVector___delitem__(*args)
    def __getitem__(*args): return _stomp.CosmoVector___getitem__(*args)
    def __setitem__(*args): return _stomp.CosmoVector___setitem__(*args)
    def append(*args): return _stomp.CosmoVector_append(*args)
    def empty(*args): return _stomp.CosmoVector_empty(*args)
    def size(*args): return _stomp.CosmoVector_size(*args)
    def clear(*args): return _stomp.CosmoVector_clear(*args)
    def swap(*args): return _stomp.CosmoVector_swap(*args)
    def get_allocator(*args): return _stomp.CosmoVector_get_allocator(*args)
    def begin(*args): return _stomp.CosmoVector_begin(*args)
    def end(*args): return _stomp.CosmoVector_end(*args)
    def rbegin(*args): return _stomp.CosmoVector_rbegin(*args)
    def rend(*args): return _stomp.CosmoVector_rend(*args)
    def pop_back(*args): return _stomp.CosmoVector_pop_back(*args)
    def erase(*args): return _stomp.CosmoVector_erase(*args)
    def __init__(self, *args): 
        this = _stomp.new_CosmoVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _stomp.CosmoVector_push_back(*args)
    def front(*args): return _stomp.CosmoVector_front(*args)
    def back(*args): return _stomp.CosmoVector_back(*args)
    def assign(*args): return _stomp.CosmoVector_assign(*args)
    def resize(*args): return _stomp.CosmoVector_resize(*args)
    def insert(*args): return _stomp.CosmoVector_insert(*args)
    def reserve(*args): return _stomp.CosmoVector_reserve(*args)
    def capacity(*args): return _stomp.CosmoVector_capacity(*args)
    __swig_destroy__ = _stomp.delete_CosmoVector
    __del__ = lambda self : None;
CosmoVector_swigregister = _stomp.CosmoVector_swigregister
CosmoVector_swigregister(CosmoVector)

class IAngularVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IAngularVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IAngularVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _stomp.IAngularVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _stomp.IAngularVector___nonzero__(*args)
    def __len__(*args): return _stomp.IAngularVector___len__(*args)
    def pop(*args): return _stomp.IAngularVector_pop(*args)
    def __getslice__(*args): return _stomp.IAngularVector___getslice__(*args)
    def __setslice__(*args): return _stomp.IAngularVector___setslice__(*args)
    def __delslice__(*args): return _stomp.IAngularVector___delslice__(*args)
    def __delitem__(*args): return _stomp.IAngularVector___delitem__(*args)
    def __getitem__(*args): return _stomp.IAngularVector___getitem__(*args)
    def __setitem__(*args): return _stomp.IAngularVector___setitem__(*args)
    def append(*args): return _stomp.IAngularVector_append(*args)
    def empty(*args): return _stomp.IAngularVector_empty(*args)
    def size(*args): return _stomp.IAngularVector_size(*args)
    def clear(*args): return _stomp.IAngularVector_clear(*args)
    def swap(*args): return _stomp.IAngularVector_swap(*args)
    def get_allocator(*args): return _stomp.IAngularVector_get_allocator(*args)
    def begin(*args): return _stomp.IAngularVector_begin(*args)
    def end(*args): return _stomp.IAngularVector_end(*args)
    def rbegin(*args): return _stomp.IAngularVector_rbegin(*args)
    def rend(*args): return _stomp.IAngularVector_rend(*args)
    def pop_back(*args): return _stomp.IAngularVector_pop_back(*args)
    def erase(*args): return _stomp.IAngularVector_erase(*args)
    def __init__(self, *args): 
        this = _stomp.new_IAngularVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _stomp.IAngularVector_push_back(*args)
    def front(*args): return _stomp.IAngularVector_front(*args)
    def back(*args): return _stomp.IAngularVector_back(*args)
    def assign(*args): return _stomp.IAngularVector_assign(*args)
    def resize(*args): return _stomp.IAngularVector_resize(*args)
    def insert(*args): return _stomp.IAngularVector_insert(*args)
    def reserve(*args): return _stomp.IAngularVector_reserve(*args)
    def capacity(*args): return _stomp.IAngularVector_capacity(*args)
    __swig_destroy__ = _stomp.delete_IAngularVector
    __del__ = lambda self : None;
IAngularVector_swigregister = _stomp.IAngularVector_swigregister
IAngularVector_swigregister(IAngularVector)

class PixelVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixelVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _stomp.PixelVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _stomp.PixelVector___nonzero__(*args)
    def __len__(*args): return _stomp.PixelVector___len__(*args)
    def pop(*args): return _stomp.PixelVector_pop(*args)
    def __getslice__(*args): return _stomp.PixelVector___getslice__(*args)
    def __setslice__(*args): return _stomp.PixelVector___setslice__(*args)
    def __delslice__(*args): return _stomp.PixelVector___delslice__(*args)
    def __delitem__(*args): return _stomp.PixelVector___delitem__(*args)
    def __getitem__(*args): return _stomp.PixelVector___getitem__(*args)
    def __setitem__(*args): return _stomp.PixelVector___setitem__(*args)
    def append(*args): return _stomp.PixelVector_append(*args)
    def empty(*args): return _stomp.PixelVector_empty(*args)
    def size(*args): return _stomp.PixelVector_size(*args)
    def clear(*args): return _stomp.PixelVector_clear(*args)
    def swap(*args): return _stomp.PixelVector_swap(*args)
    def get_allocator(*args): return _stomp.PixelVector_get_allocator(*args)
    def begin(*args): return _stomp.PixelVector_begin(*args)
    def end(*args): return _stomp.PixelVector_end(*args)
    def rbegin(*args): return _stomp.PixelVector_rbegin(*args)
    def rend(*args): return _stomp.PixelVector_rend(*args)
    def pop_back(*args): return _stomp.PixelVector_pop_back(*args)
    def erase(*args): return _stomp.PixelVector_erase(*args)
    def __init__(self, *args): 
        this = _stomp.new_PixelVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _stomp.PixelVector_push_back(*args)
    def front(*args): return _stomp.PixelVector_front(*args)
    def back(*args): return _stomp.PixelVector_back(*args)
    def assign(*args): return _stomp.PixelVector_assign(*args)
    def resize(*args): return _stomp.PixelVector_resize(*args)
    def insert(*args): return _stomp.PixelVector_insert(*args)
    def reserve(*args): return _stomp.PixelVector_reserve(*args)
    def capacity(*args): return _stomp.PixelVector_capacity(*args)
    __swig_destroy__ = _stomp.delete_PixelVector
    __del__ = lambda self : None;
PixelVector_swigregister = _stomp.PixelVector_swigregister
PixelVector_swigregister(PixelVector)

class FieldDict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldDict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldDict, name)
    __repr__ = _swig_repr
    def iterator(*args): return _stomp.FieldDict_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _stomp.FieldDict___nonzero__(*args)
    def __len__(*args): return _stomp.FieldDict___len__(*args)
    def __getitem__(*args): return _stomp.FieldDict___getitem__(*args)
    def __delitem__(*args): return _stomp.FieldDict___delitem__(*args)
    def has_key(*args): return _stomp.FieldDict_has_key(*args)
    def keys(*args): return _stomp.FieldDict_keys(*args)
    def values(*args): return _stomp.FieldDict_values(*args)
    def items(*args): return _stomp.FieldDict_items(*args)
    def __contains__(*args): return _stomp.FieldDict___contains__(*args)
    def key_iterator(*args): return _stomp.FieldDict_key_iterator(*args)
    def value_iterator(*args): return _stomp.FieldDict_value_iterator(*args)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(*args): return _stomp.FieldDict___setitem__(*args)
    def __init__(self, *args): 
        this = _stomp.new_FieldDict(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return _stomp.FieldDict_empty(*args)
    def size(*args): return _stomp.FieldDict_size(*args)
    def clear(*args): return _stomp.FieldDict_clear(*args)
    def swap(*args): return _stomp.FieldDict_swap(*args)
    def get_allocator(*args): return _stomp.FieldDict_get_allocator(*args)
    def begin(*args): return _stomp.FieldDict_begin(*args)
    def end(*args): return _stomp.FieldDict_end(*args)
    def rbegin(*args): return _stomp.FieldDict_rbegin(*args)
    def rend(*args): return _stomp.FieldDict_rend(*args)
    def count(*args): return _stomp.FieldDict_count(*args)
    def erase(*args): return _stomp.FieldDict_erase(*args)
    def find(*args): return _stomp.FieldDict_find(*args)
    def lower_bound(*args): return _stomp.FieldDict_lower_bound(*args)
    def upper_bound(*args): return _stomp.FieldDict_upper_bound(*args)
    __swig_destroy__ = _stomp.delete_FieldDict
    __del__ = lambda self : None;
FieldDict_swigregister = _stomp.FieldDict_swigregister
FieldDict_swigregister(FieldDict)

class FieldColumnDict(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldColumnDict, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldColumnDict, name)
    __repr__ = _swig_repr
    def iterator(*args): return _stomp.FieldColumnDict_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _stomp.FieldColumnDict___nonzero__(*args)
    def __len__(*args): return _stomp.FieldColumnDict___len__(*args)
    def __getitem__(*args): return _stomp.FieldColumnDict___getitem__(*args)
    def __delitem__(*args): return _stomp.FieldColumnDict___delitem__(*args)
    def has_key(*args): return _stomp.FieldColumnDict_has_key(*args)
    def keys(*args): return _stomp.FieldColumnDict_keys(*args)
    def values(*args): return _stomp.FieldColumnDict_values(*args)
    def items(*args): return _stomp.FieldColumnDict_items(*args)
    def __contains__(*args): return _stomp.FieldColumnDict___contains__(*args)
    def key_iterator(*args): return _stomp.FieldColumnDict_key_iterator(*args)
    def value_iterator(*args): return _stomp.FieldColumnDict_value_iterator(*args)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(*args): return _stomp.FieldColumnDict___setitem__(*args)
    def __init__(self, *args): 
        this = _stomp.new_FieldColumnDict(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args): return _stomp.FieldColumnDict_empty(*args)
    def size(*args): return _stomp.FieldColumnDict_size(*args)
    def clear(*args): return _stomp.FieldColumnDict_clear(*args)
    def swap(*args): return _stomp.FieldColumnDict_swap(*args)
    def get_allocator(*args): return _stomp.FieldColumnDict_get_allocator(*args)
    def begin(*args): return _stomp.FieldColumnDict_begin(*args)
    def end(*args): return _stomp.FieldColumnDict_end(*args)
    def rbegin(*args): return _stomp.FieldColumnDict_rbegin(*args)
    def rend(*args): return _stomp.FieldColumnDict_rend(*args)
    def count(*args): return _stomp.FieldColumnDict_count(*args)
    def erase(*args): return _stomp.FieldColumnDict_erase(*args)
    def find(*args): return _stomp.FieldColumnDict_find(*args)
    def lower_bound(*args): return _stomp.FieldColumnDict_lower_bound(*args)
    def upper_bound(*args): return _stomp.FieldColumnDict_upper_bound(*args)
    __swig_destroy__ = _stomp.delete_FieldColumnDict
    __del__ = lambda self : None;
FieldColumnDict_swigregister = _stomp.FieldColumnDict_swigregister
FieldColumnDict_swigregister(FieldColumnDict)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _stomp.DoubleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _stomp.DoubleVector___nonzero__(*args)
    def __len__(*args): return _stomp.DoubleVector___len__(*args)
    def pop(*args): return _stomp.DoubleVector_pop(*args)
    def __getslice__(*args): return _stomp.DoubleVector___getslice__(*args)
    def __setslice__(*args): return _stomp.DoubleVector___setslice__(*args)
    def __delslice__(*args): return _stomp.DoubleVector___delslice__(*args)
    def __delitem__(*args): return _stomp.DoubleVector___delitem__(*args)
    def __getitem__(*args): return _stomp.DoubleVector___getitem__(*args)
    def __setitem__(*args): return _stomp.DoubleVector___setitem__(*args)
    def append(*args): return _stomp.DoubleVector_append(*args)
    def empty(*args): return _stomp.DoubleVector_empty(*args)
    def size(*args): return _stomp.DoubleVector_size(*args)
    def clear(*args): return _stomp.DoubleVector_clear(*args)
    def swap(*args): return _stomp.DoubleVector_swap(*args)
    def get_allocator(*args): return _stomp.DoubleVector_get_allocator(*args)
    def begin(*args): return _stomp.DoubleVector_begin(*args)
    def end(*args): return _stomp.DoubleVector_end(*args)
    def rbegin(*args): return _stomp.DoubleVector_rbegin(*args)
    def rend(*args): return _stomp.DoubleVector_rend(*args)
    def pop_back(*args): return _stomp.DoubleVector_pop_back(*args)
    def erase(*args): return _stomp.DoubleVector_erase(*args)
    def __init__(self, *args): 
        this = _stomp.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _stomp.DoubleVector_push_back(*args)
    def front(*args): return _stomp.DoubleVector_front(*args)
    def back(*args): return _stomp.DoubleVector_back(*args)
    def assign(*args): return _stomp.DoubleVector_assign(*args)
    def resize(*args): return _stomp.DoubleVector_resize(*args)
    def insert(*args): return _stomp.DoubleVector_insert(*args)
    def reserve(*args): return _stomp.DoubleVector_reserve(*args)
    def capacity(*args): return _stomp.DoubleVector_capacity(*args)
    __swig_destroy__ = _stomp.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _stomp.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class IndexVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IndexVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _stomp.IndexVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _stomp.IndexVector___nonzero__(*args)
    def __len__(*args): return _stomp.IndexVector___len__(*args)
    def pop(*args): return _stomp.IndexVector_pop(*args)
    def __getslice__(*args): return _stomp.IndexVector___getslice__(*args)
    def __setslice__(*args): return _stomp.IndexVector___setslice__(*args)
    def __delslice__(*args): return _stomp.IndexVector___delslice__(*args)
    def __delitem__(*args): return _stomp.IndexVector___delitem__(*args)
    def __getitem__(*args): return _stomp.IndexVector___getitem__(*args)
    def __setitem__(*args): return _stomp.IndexVector___setitem__(*args)
    def append(*args): return _stomp.IndexVector_append(*args)
    def empty(*args): return _stomp.IndexVector_empty(*args)
    def size(*args): return _stomp.IndexVector_size(*args)
    def clear(*args): return _stomp.IndexVector_clear(*args)
    def swap(*args): return _stomp.IndexVector_swap(*args)
    def get_allocator(*args): return _stomp.IndexVector_get_allocator(*args)
    def begin(*args): return _stomp.IndexVector_begin(*args)
    def end(*args): return _stomp.IndexVector_end(*args)
    def rbegin(*args): return _stomp.IndexVector_rbegin(*args)
    def rend(*args): return _stomp.IndexVector_rend(*args)
    def pop_back(*args): return _stomp.IndexVector_pop_back(*args)
    def erase(*args): return _stomp.IndexVector_erase(*args)
    def __init__(self, *args): 
        this = _stomp.new_IndexVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _stomp.IndexVector_push_back(*args)
    def front(*args): return _stomp.IndexVector_front(*args)
    def back(*args): return _stomp.IndexVector_back(*args)
    def assign(*args): return _stomp.IndexVector_assign(*args)
    def resize(*args): return _stomp.IndexVector_resize(*args)
    def insert(*args): return _stomp.IndexVector_insert(*args)
    def reserve(*args): return _stomp.IndexVector_reserve(*args)
    def capacity(*args): return _stomp.IndexVector_capacity(*args)
    __swig_destroy__ = _stomp.delete_IndexVector
    __del__ = lambda self : None;
IndexVector_swigregister = _stomp.IndexVector_swigregister
IndexVector_swigregister(IndexVector)


_iter_incr = _stomp._iter_incr

