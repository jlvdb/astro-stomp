/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif
/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif


/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif


/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);
    PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}



#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         PySwigClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* PySwigClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} PySwigClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  PySwigClientData *data = (PySwigClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  PySwigClientData *data = desc ? (PySwigClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME PySwigClientData * 
PySwigClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    PySwigClientData *data = (PySwigClientData *)malloc(sizeof(PySwigClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
PySwigClientData_Del(PySwigClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== PySwigObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} PySwigObject;

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0) {
      PyObject *ofmt = PyString_FromString(fmt);
      if (ofmt) {
	res = PyString_Format(ofmt,args);
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
PySwigObject_repr(PySwigObject *v)
#else
PySwigObject_repr(PySwigObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *hex = PySwigObject_hex(v);    
  PyObject *repr = PyString_FromFormat("<Swig Object of type '%s' at 0x%s>", name, PyString_AsString(hex));
  Py_DECREF(hex);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next);
#else
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next, args);
#endif
    PyString_ConcatAndDel(&repr,nrep);
  }
  return repr;  
}

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
#ifdef METH_NOARGS
  PyObject *repr = PySwigObject_repr(v);
#else
  PyObject *repr = PySwigObject_repr(v, NULL);
#endif
  if (repr) {
    fputs(PyString_AsString(repr), fp);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type())
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
PySwigObject_dealloc(PyObject *v)
{
  PySwigObject *sobj = (PySwigObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporal object to carry the destroy operation */
	PyObject *tmp = PySwigObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
PySwigObject_append(PyObject* v, PyObject* next)
{
  PySwigObject *sobj = (PySwigObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!PySwigObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
PySwigObject_next(PyObject* v)
#else
PySwigObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_disown(PyObject *v)
#else
PySwigObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_acquire(PyObject *v)
#else
PySwigObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
PySwigObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      PySwigObject *sobj = (PySwigObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v);
	} else {
	  PySwigObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v,args);
	} else {
	  PySwigObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
PySwigObject_getattr(PySwigObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
	(char *)"PySwigObject",		    /* tp_name */
	sizeof(PySwigObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)PySwigObject_dealloc,   /* tp_dealloc */
	(printfunc)PySwigObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)PySwigObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
	(cmpfunc)PySwigObject_compare,	    /* tp_compare */ 
	(reprfunc)PySwigObject_repr,	    /* tp_repr */    
	&PySwigObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)PySwigObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigobject_type = tmp;
    pyswigobject_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own)
{
  PySwigObject *sobj = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->ty->name);
  } else {
    return PyString_FromString(v->ty->name);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

SWIGRUNTIME void
PySwigPacked_dealloc(PyObject *v)
{
  if (PySwigPacked_Check(v)) {
    PySwigPacked *sobj = (PySwigPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */	
	(char *)"PySwigPacked",		    /* tp_name */	
	sizeof(PySwigPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)PySwigPacked_dealloc,   /* tp_dealloc */	
	(printfunc)PySwigPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
	(cmpfunc)PySwigPacked_compare,	    /* tp_compare */ 	
	(reprfunc)PySwigPacked_repr,	    /* tp_repr */    	
	0,	                            /* tp_as_number */	
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */	
	(hashfunc)0,			    /* tp_hash */	
	(ternaryfunc)0,			    /* tp_call */	
	(reprfunc)PySwigPacked_str,	    /* tp_str */	
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigpacked_type = tmp;
    pyswigpacked_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  PySwigPacked *sobj = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (PySwigPacked_Check(obj)) {
    PySwigPacked *sobj = (PySwigPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
  return PyString_FromString("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

SWIGRUNTIME PySwigObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (PySwigObject_Check(pyobj)) {
    return (PySwigObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !PySwigObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 PySwigObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (PySwigObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (PySwigObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own);
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      PySwigObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc) {
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
      if (!desc) return SWIG_ERROR;
    }
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = PySwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, whitout calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(PySwigClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    PySwigObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      PySwigObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = PySwigObject_New(ptr, type, own);
    PySwigClientData *clientdata = type ? (PySwigClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? PySwigPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      PySwigClientData *data = (PySwigClientData *) ty->clientdata;
      if (data) PySwigClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = PyString_FromString(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  PySwigObject *v = (PySwigObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Stomp__AngularBin swig_types[0]
#define SWIGTYPE_p_Stomp__AngularCoordinate swig_types[1]
#define SWIGTYPE_p_Stomp__AngularCorrelation swig_types[2]
#define SWIGTYPE_p_Stomp__AngularPtrVector__iterator swig_types[3]
#define SWIGTYPE_p_Stomp__AngularVector__iterator swig_types[4]
#define SWIGTYPE_p_Stomp__AnnulusBound swig_types[5]
#define SWIGTYPE_p_Stomp__AnnulusVector__iterator swig_types[6]
#define SWIGTYPE_p_Stomp__BaseMap swig_types[7]
#define SWIGTYPE_p_Stomp__BinVector__iterator swig_types[8]
#define SWIGTYPE_p_Stomp__CircleBound swig_types[9]
#define SWIGTYPE_p_Stomp__CircleVector__iterator swig_types[10]
#define SWIGTYPE_p_Stomp__CosmoCoordinate swig_types[11]
#define SWIGTYPE_p_Stomp__CosmoPtrVector__iterator swig_types[12]
#define SWIGTYPE_p_Stomp__CosmoVector__iterator swig_types[13]
#define SWIGTYPE_p_Stomp__Cosmology swig_types[14]
#define SWIGTYPE_p_Stomp__CoverageDict__iterator swig_types[15]
#define SWIGTYPE_p_Stomp__FieldColumnDict__iterator swig_types[16]
#define SWIGTYPE_p_Stomp__FieldDict__iterator swig_types[17]
#define SWIGTYPE_p_Stomp__GeometricBound swig_types[18]
#define SWIGTYPE_p_Stomp__Histogram swig_types[19]
#define SWIGTYPE_p_Stomp__HistogramBin swig_types[20]
#define SWIGTYPE_p_Stomp__IAngularPtrVector__iterator swig_types[21]
#define SWIGTYPE_p_Stomp__IAngularVector__iterator swig_types[22]
#define SWIGTYPE_p_Stomp__IndexVector__iterator swig_types[23]
#define SWIGTYPE_p_Stomp__IndexedAngularCoordinate swig_types[24]
#define SWIGTYPE_p_Stomp__IndexedTreeMap swig_types[25]
#define SWIGTYPE_p_Stomp__IndexedTreeNeighbor swig_types[26]
#define SWIGTYPE_p_Stomp__IndexedTreePixel swig_types[27]
#define SWIGTYPE_p_Stomp__LatLonBound swig_types[28]
#define SWIGTYPE_p_Stomp__LatLonVector__iterator swig_types[29]
#define SWIGTYPE_p_Stomp__LatitudeBound swig_types[30]
#define SWIGTYPE_p_Stomp__LatitudeVector__iterator swig_types[31]
#define SWIGTYPE_p_Stomp__LongitudeBound swig_types[32]
#define SWIGTYPE_p_Stomp__LongitudeVector__iterator swig_types[33]
#define SWIGTYPE_p_Stomp__Map swig_types[34]
#define SWIGTYPE_p_Stomp__NearestNeighborIndexedPixel swig_types[35]
#define SWIGTYPE_p_Stomp__NearestNeighborIndexedPoint swig_types[36]
#define SWIGTYPE_p_Stomp__NearestNeighborPixel swig_types[37]
#define SWIGTYPE_p_Stomp__NearestNeighborPoint swig_types[38]
#define SWIGTYPE_p_Stomp__Pixel swig_types[39]
#define SWIGTYPE_p_Stomp__PixelOrdering swig_types[40]
#define SWIGTYPE_p_Stomp__PixelPtrVector__iterator swig_types[41]
#define SWIGTYPE_p_Stomp__PixelVector__iterator swig_types[42]
#define SWIGTYPE_p_Stomp__PolygonBound swig_types[43]
#define SWIGTYPE_p_Stomp__PolygonVector__iterator swig_types[44]
#define SWIGTYPE_p_Stomp__RadialBin swig_types[45]
#define SWIGTYPE_p_Stomp__RadialPtrVector__iterator swig_types[46]
#define SWIGTYPE_p_Stomp__RadialVector__iterator swig_types[47]
#define SWIGTYPE_p_Stomp__RegionAreaDict__iterator swig_types[48]
#define SWIGTYPE_p_Stomp__RegionBound swig_types[49]
#define SWIGTYPE_p_Stomp__RegionBoundVector__iterator swig_types[50]
#define SWIGTYPE_p_Stomp__RegionDict__iterator swig_types[51]
#define SWIGTYPE_p_Stomp__RegionMap swig_types[52]
#define SWIGTYPE_p_Stomp__ResolutionDict__iterator swig_types[53]
#define SWIGTYPE_p_Stomp__ScalarMap swig_types[54]
#define SWIGTYPE_p_Stomp__ScalarMapVector__iterator swig_types[55]
#define SWIGTYPE_p_Stomp__ScalarPixel swig_types[56]
#define SWIGTYPE_p_Stomp__ScalarPtrVector__iterator swig_types[57]
#define SWIGTYPE_p_Stomp__ScalarVector__iterator swig_types[58]
#define SWIGTYPE_p_Stomp__StompWatch swig_types[59]
#define SWIGTYPE_p_Stomp__SubMap swig_types[60]
#define SWIGTYPE_p_Stomp__SubMapVector__iterator swig_types[61]
#define SWIGTYPE_p_Stomp__ThetaPtrVector__iterator swig_types[62]
#define SWIGTYPE_p_Stomp__ThetaVector__iterator swig_types[63]
#define SWIGTYPE_p_Stomp__TreeMap swig_types[64]
#define SWIGTYPE_p_Stomp__TreeNeighbor swig_types[65]
#define SWIGTYPE_p_Stomp__TreePixel swig_types[66]
#define SWIGTYPE_p_Stomp__WAngularPtrVector__iterator swig_types[67]
#define SWIGTYPE_p_Stomp__WAngularVector__iterator swig_types[68]
#define SWIGTYPE_p_Stomp__WThetaVector__iterator swig_types[69]
#define SWIGTYPE_p_Stomp__WedgeBound swig_types[70]
#define SWIGTYPE_p_Stomp__WedgeVector__iterator swig_types[71]
#define SWIGTYPE_p_Stomp__WeightedAngularCoordinate swig_types[72]
#define SWIGTYPE_p_Stomp__section swig_types[73]
#define SWIGTYPE_p_allocator_type swig_types[74]
#define SWIGTYPE_p_char swig_types[75]
#define SWIGTYPE_p_difference_type swig_types[76]
#define SWIGTYPE_p_double swig_types[77]
#define SWIGTYPE_p_int swig_types[78]
#define SWIGTYPE_p_key_type swig_types[79]
#define SWIGTYPE_p_long_long swig_types[80]
#define SWIGTYPE_p_mapped_type swig_types[81]
#define SWIGTYPE_p_p_PyObject swig_types[82]
#define SWIGTYPE_p_short swig_types[83]
#define SWIGTYPE_p_signed_char swig_types[84]
#define SWIGTYPE_p_size_type swig_types[85]
#define SWIGTYPE_p_std__invalid_argument swig_types[86]
#define SWIGTYPE_p_std__lessT_std__string_t swig_types[87]
#define SWIGTYPE_p_std__mapT_Stomp__Pixel_const_bool_Stomp__PixelOrdering_std__allocatorT_std__pairT_Stomp__Pixel_const_const_bool_t_t_t swig_types[88]
#define SWIGTYPE_p_std__mapT_short_const_double_std__lessT_short_const_t_std__allocatorT_std__pairT_short_const_const_double_t_t_t swig_types[89]
#define SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t swig_types[90]
#define SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t__allocator_type swig_types[91]
#define SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t swig_types[92]
#define SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t__allocator_type swig_types[93]
#define SWIGTYPE_p_std__mapT_unsigned_int_const_short_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_short_t_t_t swig_types[94]
#define SWIGTYPE_p_std__mapT_unsigned_int_const_unsigned_int_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_unsigned_int_t_t_t swig_types[95]
#define SWIGTYPE_p_std__pairT_Stomp__PixelVector__iterator_Stomp__PixelVector__iterator_t swig_types[96]
#define SWIGTYPE_p_std__pairT_Stomp__RadialVector__iterator_Stomp__RadialVector__iterator_t swig_types[97]
#define SWIGTYPE_p_std__pairT_Stomp__RegionAreaDict__iterator_Stomp__RegionAreaDict__iterator_t swig_types[98]
#define SWIGTYPE_p_std__pairT_Stomp__RegionDict__iterator_Stomp__RegionDict__iterator_t swig_types[99]
#define SWIGTYPE_p_std__pairT_Stomp__ResolutionDict__iterator_Stomp__ResolutionDict__iterator_t swig_types[100]
#define SWIGTYPE_p_std__pairT_Stomp__ScalarMapVector__iterator_Stomp__ScalarMapVector__iterator_t swig_types[101]
#define SWIGTYPE_p_std__pairT_Stomp__ScalarVector__iterator_Stomp__ScalarVector__iterator_t swig_types[102]
#define SWIGTYPE_p_std__pairT_Stomp__SubMapVector__iterator_Stomp__SubMapVector__iterator_t swig_types[103]
#define SWIGTYPE_p_std__pairT_Stomp__ThetaVector__iterator_Stomp__ThetaVector__iterator_t swig_types[104]
#define SWIGTYPE_p_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t swig_types[105]
#define SWIGTYPE_p_std__pairT_double_Stomp__IndexedTreePixel_p_t swig_types[106]
#define SWIGTYPE_p_std__pairT_double_Stomp__TreePixel_p_t swig_types[107]
#define SWIGTYPE_p_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t swig_types[108]
#define SWIGTYPE_p_std__pairT_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_t swig_types[109]
#define SWIGTYPE_p_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t swig_types[110]
#define SWIGTYPE_p_std__priority_queueT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborIndexedPoint_t swig_types[111]
#define SWIGTYPE_p_std__priority_queueT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__vectorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_t_t_Stomp__NearestNeighborIndexedPixel_t swig_types[112]
#define SWIGTYPE_p_std__priority_queueT_std__pairT_double_Stomp__TreePixel_p_t_std__vectorT_std__pairT_double_Stomp__TreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__TreePixel_p_t_t_t_Stomp__NearestNeighborPixel_t swig_types[113]
#define SWIGTYPE_p_std__priority_queueT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborPoint_t swig_types[114]
#define SWIGTYPE_p_std__vectorT_Stomp__AngularBin_p_std__allocatorT_Stomp__AngularBin_p_t_t swig_types[115]
#define SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t swig_types[116]
#define SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__allocator_type swig_types[117]
#define SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__const_iterator swig_types[118]
#define SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type swig_types[119]
#define SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_p_std__allocatorT_Stomp__AngularCoordinate_p_t_t swig_types[120]
#define SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t swig_types[121]
#define SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__allocator_type swig_types[122]
#define SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type swig_types[123]
#define SWIGTYPE_p_std__vectorT_Stomp__AngularCorrelation_std__allocatorT_Stomp__AngularCorrelation_t_t swig_types[124]
#define SWIGTYPE_p_std__vectorT_Stomp__AnnulusBound_std__allocatorT_Stomp__AnnulusBound_t_t swig_types[125]
#define SWIGTYPE_p_std__vectorT_Stomp__CircleBound_std__allocatorT_Stomp__CircleBound_t_t swig_types[126]
#define SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_p_std__allocatorT_Stomp__CosmoCoordinate_p_t_t swig_types[127]
#define SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t swig_types[128]
#define SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__allocator_type swig_types[129]
#define SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type swig_types[130]
#define SWIGTYPE_p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t swig_types[131]
#define SWIGTYPE_p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t__const_iterator swig_types[132]
#define SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_p_std__allocatorT_Stomp__IndexedAngularCoordinate_p_t_t swig_types[133]
#define SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t swig_types[134]
#define SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__allocator_type swig_types[135]
#define SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type swig_types[136]
#define SWIGTYPE_p_std__vectorT_Stomp__LatLonBound_std__allocatorT_Stomp__LatLonBound_t_t swig_types[137]
#define SWIGTYPE_p_std__vectorT_Stomp__LatitudeBound_std__allocatorT_Stomp__LatitudeBound_t_t swig_types[138]
#define SWIGTYPE_p_std__vectorT_Stomp__LongitudeBound_std__allocatorT_Stomp__LongitudeBound_t_t swig_types[139]
#define SWIGTYPE_p_std__vectorT_Stomp__Pixel_p_std__allocatorT_Stomp__Pixel_p_t_t swig_types[140]
#define SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t swig_types[141]
#define SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__allocator_type swig_types[142]
#define SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type swig_types[143]
#define SWIGTYPE_p_std__vectorT_Stomp__PolygonBound_std__allocatorT_Stomp__PolygonBound_t_t swig_types[144]
#define SWIGTYPE_p_std__vectorT_Stomp__RadialBin_p_std__allocatorT_Stomp__RadialBin_p_t_t swig_types[145]
#define SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t swig_types[146]
#define SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__allocator_type swig_types[147]
#define SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type swig_types[148]
#define SWIGTYPE_p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t swig_types[149]
#define SWIGTYPE_p_std__vectorT_Stomp__ScalarMap_std__allocatorT_Stomp__ScalarMap_t_t swig_types[150]
#define SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_p_std__allocatorT_Stomp__ScalarPixel_p_t_t swig_types[151]
#define SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t swig_types[152]
#define SWIGTYPE_p_std__vectorT_Stomp__SubMap_std__allocatorT_Stomp__SubMap_t_t swig_types[153]
#define SWIGTYPE_p_std__vectorT_Stomp__WedgeBound_std__allocatorT_Stomp__WedgeBound_t_t swig_types[154]
#define SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_p_std__allocatorT_Stomp__WeightedAngularCoordinate_p_t_t swig_types[155]
#define SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t swig_types[156]
#define SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__allocator_type swig_types[157]
#define SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type swig_types[158]
#define SWIGTYPE_p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t swig_types[159]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[160]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type swig_types[161]
#define SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t swig_types[162]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[163]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[164]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type swig_types[165]
#define SWIGTYPE_p_swig__PySwigIterator swig_types[166]
#define SWIGTYPE_p_unsigned_char swig_types[167]
#define SWIGTYPE_p_unsigned_int swig_types[168]
#define SWIGTYPE_p_unsigned_long_long swig_types[169]
#define SWIGTYPE_p_unsigned_short swig_types[170]
#define SWIGTYPE_p_value_type swig_types[171]
static swig_type_info *swig_types[173];
static swig_module_info swig_module = {swig_types, 172, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _stomp.so
  ------------------------------------------------*/
#define SWIG_init    init_stomp

#define SWIG_name    "_stomp"

#define SWIGVERSION 0x010336 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class PyObject_ptr {
  protected:
    PyObject *_obj;

  public:
    PyObject_ptr() :_obj(0)
    {
    }

    PyObject_ptr(const PyObject_ptr& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    PyObject_ptr(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    PyObject_ptr & operator=(const PyObject_ptr& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~PyObject_ptr() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct PyObject_var : PyObject_ptr {
    PyObject_var(PyObject* obj = 0) : PyObject_ptr(obj, false) { }
    
    PyObject_var & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include "../stomp/stomp_core.h"
#include "../stomp/stomp_angular_bin.h"
#include "../stomp/stomp_radial_bin.h"
#include "../stomp/stomp_angular_coordinate.h"
#include "../stomp/stomp_angular_correlation.h"
#include "../stomp/stomp_pixel.h"
#include "../stomp/stomp_scalar_pixel.h"
#include "../stomp/stomp_tree_pixel.h"
#include "../stomp/stomp_itree_pixel.h"
#include "../stomp/stomp_base_map.h"
#include "../stomp/stomp_map.h"
#include "../stomp/stomp_scalar_map.h"
#include "../stomp/stomp_tree_map.h"
#include "../stomp/stomp_itree_map.h"
#include "../stomp/stomp_geometry.h"
#include "../stomp/stomp_util.h"


#include <stdint.h>		// Use the C99 official header


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>


#include <string>


#include <iostream>

  
namespace swig {
  struct stop_iteration {
  };

  struct PySwigIterator {
  private:
    PyObject_ptr _seq;

  protected:
    PySwigIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~PySwigIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual PySwigIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual PySwigIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const PySwigIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const PySwigIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual PySwigIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    PySwigIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const PySwigIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const PySwigIterator& x) const
    {
      return ! operator==(x);
    }
      
    PySwigIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    PySwigIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    PySwigIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    PySwigIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const PySwigIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::PySwigIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
  if (PyString_Check(obj)) {
    char *cstr; Py_ssize_t len;
    PyString_AsStringAndSize(obj, &cstr, &len);
    if (cptr)  {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
	*cptr = PyString_AsString(obj);
      }
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERN std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator *Stomp_AngularCorrelation__begin_Bins(Stomp::AngularCorrelation *self){
    return new std::vector<Stomp::AngularBin>::const_iterator( (self)->Begin() );
}
SWIGINTERN Stomp::AngularBin const *Stomp_AngularCorrelation__deref_Bins(Stomp::AngularCorrelation *self,std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator const *iter){
    // if at the end, return NULL
    if (*iter == (self)->End() ) {
        return NULL;
    }
    // otherwise, return the POINTER to the dereferenced iterator
    return &(**iter);
}

SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_signed_SS_char  (signed char value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator *Stomp_Histogram__begin_Bins(Stomp::Histogram *self){
    return new std::vector<Stomp::HistogramBin>::const_iterator( (self)->Begin() );
}
SWIGINTERN Stomp::HistogramBin const *Stomp_Histogram__deref_Bins(Stomp::Histogram *self,std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator const *iter){
    // if at the end, return NULL
    if (*iter == (self)->End() ) {
        return NULL;
    }
    // otherwise, return the POINTER to the dereferenced iterator
    return &(**iter);
}

SWIGINTERN int
SWIG_AsVal_signed_SS_char (PyObject * obj, signed char *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SCHAR_MIN || v > SCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< signed char >(v);
    }
  }  
  return res;
}


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = (SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0) == SWIG_OK) ? SWIG_OLDOBJ : 0;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_Compare(v, w) < 0;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::PyObject_ptr>: public binary_function<swig::PyObject_ptr, swig::PyObject_ptr, bool>
  {
    bool
    operator()(const swig::PyObject_ptr& v, const swig::PyObject_ptr& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::PyObject_var>: public binary_function<swig::PyObject_var, swig::PyObject_var, bool>
  {
    bool
    operator()(const swig::PyObject_var& v, const swig::PyObject_var& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class PySwigIterator_T :  public PySwigIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef PySwigIterator_T<out_iterator> self_type;

    PySwigIterator_T(out_iterator curr, PyObject *seq)
      : PySwigIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const PySwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const PySwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class PySwigIteratorOpen_T :  public PySwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef PySwigIterator_T<out_iterator>  base;
    typedef PySwigIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    PySwigIteratorOpen_T(out_iterator curr, PyObject *seq)
      : PySwigIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    PySwigIterator *copy() const
    {
      return new self_type(*this);
    }

    PySwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    PySwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class PySwigIteratorClosed_T :  public PySwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef PySwigIterator_T<out_iterator>  base;    
    typedef PySwigIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    PySwigIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : PySwigIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    PySwigIterator *copy() const
    {
      return new self_type(*this);
    }

    PySwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    PySwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline PySwigIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new PySwigIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline PySwigIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new PySwigIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct PySequence_Ref
  {
    PySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::PyObject_var item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    PySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct PySequence_ArrowProxy
  {
    PySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct PySequence_InputIterator
  {
    typedef PySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    PySequence_InputIterator()
    {
    }

    PySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    PySequence_ArrowProxy<T>
    operator->() const {
      return PySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct PySequence_Cont
  {
    typedef PySequence_Ref<T> reference;
    typedef const PySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef PySequence_InputIterator<T, reference> iterator;
    typedef PySequence_InputIterator<T, const_reference> const_iterator;

    PySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~PySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::PyObject_var item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits<Stomp::AngularCoordinate > {
      typedef pointer_category category;
      static const char* type_name() { return"Stomp::AngularCoordinate"; }
    };
  }


namespace swig {
  template <class PySeq, class Seq>
  inline void
  assign(const PySeq& pyseq, Seq* seq) {
    // seq->assign(pyseq.begin(), pyseq.end()); // not used as not always implemented
    typedef typename PySeq::value_type value_type;
    typename PySeq::const_iterator it = pyseq.begin();
    for (;it != pyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  PySequence_Cont<value_type> pyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(pyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return pyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Stomp::AngularCoordinate, std::allocator< Stomp::AngularCoordinate > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Stomp::AngularCoordinate" "," "std::allocator< Stomp::AngularCoordinate >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_Stomp_AngularCoordinate_Sg__iterator(std::vector< Stomp::AngularCoordinate > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Stomp_AngularCoordinate_Sg____nonzero__(std::vector< Stomp::AngularCoordinate > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Stomp::AngularCoordinate >::size_type std_vector_Sl_Stomp_AngularCoordinate_Sg____len__(std::vector< Stomp::AngularCoordinate > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< Stomp::AngularCoordinate >::value_type std_vector_Sl_Stomp_AngularCoordinate_Sg__pop(std::vector< Stomp::AngularCoordinate > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > *std_vector_Sl_Stomp_AngularCoordinate_Sg____getslice__(std::vector< Stomp::AngularCoordinate > *self,std::vector< Stomp::AngularCoordinate >::difference_type i,std::vector< Stomp::AngularCoordinate >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_AngularCoordinate_Sg____setslice__(std::vector< Stomp::AngularCoordinate > *self,std::vector< Stomp::AngularCoordinate >::difference_type i,std::vector< Stomp::AngularCoordinate >::difference_type j,std::vector< Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Stomp_AngularCoordinate_Sg____delslice__(std::vector< Stomp::AngularCoordinate > *self,std::vector< Stomp::AngularCoordinate >::difference_type i,std::vector< Stomp::AngularCoordinate >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_AngularCoordinate_Sg____delitem__(std::vector< Stomp::AngularCoordinate > *self,std::vector< Stomp::AngularCoordinate >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Stomp::AngularCoordinate >::value_type const &std_vector_Sl_Stomp_AngularCoordinate_Sg____getitem__(std::vector< Stomp::AngularCoordinate > const *self,std::vector< Stomp::AngularCoordinate >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Stomp_AngularCoordinate_Sg____setitem__(std::vector< Stomp::AngularCoordinate > *self,std::vector< Stomp::AngularCoordinate >::difference_type i,std::vector< Stomp::AngularCoordinate >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Stomp_AngularCoordinate_Sg__append(std::vector< Stomp::AngularCoordinate > *self,std::vector< Stomp::AngularCoordinate >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Stomp::AngularBin > {
      typedef pointer_category category;
      static const char* type_name() { return"Stomp::AngularBin"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Stomp::AngularBin, std::allocator< Stomp::AngularBin > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Stomp::AngularBin" "," "std::allocator< Stomp::AngularBin >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_Stomp_AngularBin_Sg__iterator(std::vector< Stomp::AngularBin > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Stomp_AngularBin_Sg____nonzero__(std::vector< Stomp::AngularBin > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Stomp::AngularBin >::size_type std_vector_Sl_Stomp_AngularBin_Sg____len__(std::vector< Stomp::AngularBin > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Stomp::AngularBin >::value_type std_vector_Sl_Stomp_AngularBin_Sg__pop(std::vector< Stomp::AngularBin > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > > *std_vector_Sl_Stomp_AngularBin_Sg____getslice__(std::vector< Stomp::AngularBin > *self,std::vector< Stomp::AngularBin >::difference_type i,std::vector< Stomp::AngularBin >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_AngularBin_Sg____setslice__(std::vector< Stomp::AngularBin > *self,std::vector< Stomp::AngularBin >::difference_type i,std::vector< Stomp::AngularBin >::difference_type j,std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Stomp_AngularBin_Sg____delslice__(std::vector< Stomp::AngularBin > *self,std::vector< Stomp::AngularBin >::difference_type i,std::vector< Stomp::AngularBin >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_AngularBin_Sg____delitem__(std::vector< Stomp::AngularBin > *self,std::vector< Stomp::AngularBin >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Stomp::AngularBin >::value_type const &std_vector_Sl_Stomp_AngularBin_Sg____getitem__(std::vector< Stomp::AngularBin > const *self,std::vector< Stomp::AngularBin >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Stomp_AngularBin_Sg____setitem__(std::vector< Stomp::AngularBin > *self,std::vector< Stomp::AngularBin >::difference_type i,std::vector< Stomp::AngularBin >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Stomp_AngularBin_Sg__append(std::vector< Stomp::AngularBin > *self,std::vector< Stomp::AngularBin >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Stomp::RadialBin > {
      typedef pointer_category category;
      static const char* type_name() { return"Stomp::RadialBin"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Stomp::RadialBin, std::allocator< Stomp::RadialBin > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Stomp::RadialBin" "," "std::allocator< Stomp::RadialBin >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_Stomp_RadialBin_Sg__iterator(std::vector< Stomp::RadialBin > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Stomp_RadialBin_Sg____nonzero__(std::vector< Stomp::RadialBin > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Stomp::RadialBin >::size_type std_vector_Sl_Stomp_RadialBin_Sg____len__(std::vector< Stomp::RadialBin > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Stomp::RadialBin >::value_type std_vector_Sl_Stomp_RadialBin_Sg__pop(std::vector< Stomp::RadialBin > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Stomp::RadialBin,std::allocator< Stomp::RadialBin > > *std_vector_Sl_Stomp_RadialBin_Sg____getslice__(std::vector< Stomp::RadialBin > *self,std::vector< Stomp::RadialBin >::difference_type i,std::vector< Stomp::RadialBin >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_RadialBin_Sg____setslice__(std::vector< Stomp::RadialBin > *self,std::vector< Stomp::RadialBin >::difference_type i,std::vector< Stomp::RadialBin >::difference_type j,std::vector< Stomp::RadialBin,std::allocator< Stomp::RadialBin > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Stomp_RadialBin_Sg____delslice__(std::vector< Stomp::RadialBin > *self,std::vector< Stomp::RadialBin >::difference_type i,std::vector< Stomp::RadialBin >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_RadialBin_Sg____delitem__(std::vector< Stomp::RadialBin > *self,std::vector< Stomp::RadialBin >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Stomp::RadialBin >::value_type const &std_vector_Sl_Stomp_RadialBin_Sg____getitem__(std::vector< Stomp::RadialBin > const *self,std::vector< Stomp::RadialBin >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Stomp_RadialBin_Sg____setitem__(std::vector< Stomp::RadialBin > *self,std::vector< Stomp::RadialBin >::difference_type i,std::vector< Stomp::RadialBin >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Stomp_RadialBin_Sg__append(std::vector< Stomp::RadialBin > *self,std::vector< Stomp::RadialBin >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Stomp::WeightedAngularCoordinate > {
      typedef pointer_category category;
      static const char* type_name() { return"Stomp::WeightedAngularCoordinate"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Stomp::WeightedAngularCoordinate, std::allocator< Stomp::WeightedAngularCoordinate > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Stomp::WeightedAngularCoordinate" "," "std::allocator< Stomp::WeightedAngularCoordinate >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg__iterator(std::vector< Stomp::WeightedAngularCoordinate > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____nonzero__(std::vector< Stomp::WeightedAngularCoordinate > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Stomp::WeightedAngularCoordinate >::size_type std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____len__(std::vector< Stomp::WeightedAngularCoordinate > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Stomp::WeightedAngularCoordinate >::value_type std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg__pop(std::vector< Stomp::WeightedAngularCoordinate > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > *std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____getslice__(std::vector< Stomp::WeightedAngularCoordinate > *self,std::vector< Stomp::WeightedAngularCoordinate >::difference_type i,std::vector< Stomp::WeightedAngularCoordinate >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____setslice__(std::vector< Stomp::WeightedAngularCoordinate > *self,std::vector< Stomp::WeightedAngularCoordinate >::difference_type i,std::vector< Stomp::WeightedAngularCoordinate >::difference_type j,std::vector< Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____delslice__(std::vector< Stomp::WeightedAngularCoordinate > *self,std::vector< Stomp::WeightedAngularCoordinate >::difference_type i,std::vector< Stomp::WeightedAngularCoordinate >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____delitem__(std::vector< Stomp::WeightedAngularCoordinate > *self,std::vector< Stomp::WeightedAngularCoordinate >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Stomp::WeightedAngularCoordinate >::value_type const &std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____getitem__(std::vector< Stomp::WeightedAngularCoordinate > const *self,std::vector< Stomp::WeightedAngularCoordinate >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____setitem__(std::vector< Stomp::WeightedAngularCoordinate > *self,std::vector< Stomp::WeightedAngularCoordinate >::difference_type i,std::vector< Stomp::WeightedAngularCoordinate >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg__append(std::vector< Stomp::WeightedAngularCoordinate > *self,std::vector< Stomp::WeightedAngularCoordinate >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Stomp::CosmoCoordinate > {
      typedef pointer_category category;
      static const char* type_name() { return"Stomp::CosmoCoordinate"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Stomp::CosmoCoordinate, std::allocator< Stomp::CosmoCoordinate > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Stomp::CosmoCoordinate" "," "std::allocator< Stomp::CosmoCoordinate >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_Stomp_CosmoCoordinate_Sg__iterator(std::vector< Stomp::CosmoCoordinate > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Stomp_CosmoCoordinate_Sg____nonzero__(std::vector< Stomp::CosmoCoordinate > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Stomp::CosmoCoordinate >::size_type std_vector_Sl_Stomp_CosmoCoordinate_Sg____len__(std::vector< Stomp::CosmoCoordinate > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Stomp::CosmoCoordinate >::value_type std_vector_Sl_Stomp_CosmoCoordinate_Sg__pop(std::vector< Stomp::CosmoCoordinate > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > *std_vector_Sl_Stomp_CosmoCoordinate_Sg____getslice__(std::vector< Stomp::CosmoCoordinate > *self,std::vector< Stomp::CosmoCoordinate >::difference_type i,std::vector< Stomp::CosmoCoordinate >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_CosmoCoordinate_Sg____setslice__(std::vector< Stomp::CosmoCoordinate > *self,std::vector< Stomp::CosmoCoordinate >::difference_type i,std::vector< Stomp::CosmoCoordinate >::difference_type j,std::vector< Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Stomp_CosmoCoordinate_Sg____delslice__(std::vector< Stomp::CosmoCoordinate > *self,std::vector< Stomp::CosmoCoordinate >::difference_type i,std::vector< Stomp::CosmoCoordinate >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_CosmoCoordinate_Sg____delitem__(std::vector< Stomp::CosmoCoordinate > *self,std::vector< Stomp::CosmoCoordinate >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Stomp::CosmoCoordinate >::value_type const &std_vector_Sl_Stomp_CosmoCoordinate_Sg____getitem__(std::vector< Stomp::CosmoCoordinate > const *self,std::vector< Stomp::CosmoCoordinate >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Stomp_CosmoCoordinate_Sg____setitem__(std::vector< Stomp::CosmoCoordinate > *self,std::vector< Stomp::CosmoCoordinate >::difference_type i,std::vector< Stomp::CosmoCoordinate >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Stomp_CosmoCoordinate_Sg__append(std::vector< Stomp::CosmoCoordinate > *self,std::vector< Stomp::CosmoCoordinate >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Stomp::IndexedAngularCoordinate > {
      typedef pointer_category category;
      static const char* type_name() { return"Stomp::IndexedAngularCoordinate"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Stomp::IndexedAngularCoordinate, std::allocator< Stomp::IndexedAngularCoordinate > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Stomp::IndexedAngularCoordinate" "," "std::allocator< Stomp::IndexedAngularCoordinate >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg__iterator(std::vector< Stomp::IndexedAngularCoordinate > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____nonzero__(std::vector< Stomp::IndexedAngularCoordinate > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Stomp::IndexedAngularCoordinate >::size_type std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____len__(std::vector< Stomp::IndexedAngularCoordinate > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Stomp::IndexedAngularCoordinate >::value_type std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg__pop(std::vector< Stomp::IndexedAngularCoordinate > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > *std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____getslice__(std::vector< Stomp::IndexedAngularCoordinate > *self,std::vector< Stomp::IndexedAngularCoordinate >::difference_type i,std::vector< Stomp::IndexedAngularCoordinate >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____setslice__(std::vector< Stomp::IndexedAngularCoordinate > *self,std::vector< Stomp::IndexedAngularCoordinate >::difference_type i,std::vector< Stomp::IndexedAngularCoordinate >::difference_type j,std::vector< Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____delslice__(std::vector< Stomp::IndexedAngularCoordinate > *self,std::vector< Stomp::IndexedAngularCoordinate >::difference_type i,std::vector< Stomp::IndexedAngularCoordinate >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____delitem__(std::vector< Stomp::IndexedAngularCoordinate > *self,std::vector< Stomp::IndexedAngularCoordinate >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Stomp::IndexedAngularCoordinate >::value_type const &std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____getitem__(std::vector< Stomp::IndexedAngularCoordinate > const *self,std::vector< Stomp::IndexedAngularCoordinate >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____setitem__(std::vector< Stomp::IndexedAngularCoordinate > *self,std::vector< Stomp::IndexedAngularCoordinate >::difference_type i,std::vector< Stomp::IndexedAngularCoordinate >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg__append(std::vector< Stomp::IndexedAngularCoordinate > *self,std::vector< Stomp::IndexedAngularCoordinate >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Stomp::Pixel > {
      typedef pointer_category category;
      static const char* type_name() { return"Stomp::Pixel"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Stomp::Pixel, std::allocator< Stomp::Pixel > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Stomp::Pixel" "," "std::allocator< Stomp::Pixel >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_Stomp_Pixel_Sg__iterator(std::vector< Stomp::Pixel > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Stomp_Pixel_Sg____nonzero__(std::vector< Stomp::Pixel > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< Stomp::Pixel >::size_type std_vector_Sl_Stomp_Pixel_Sg____len__(std::vector< Stomp::Pixel > const *self){
      return self->size();
    }
SWIGINTERN std::vector< Stomp::Pixel >::value_type std_vector_Sl_Stomp_Pixel_Sg__pop(std::vector< Stomp::Pixel > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< Stomp::Pixel,std::allocator< Stomp::Pixel > > *std_vector_Sl_Stomp_Pixel_Sg____getslice__(std::vector< Stomp::Pixel > *self,std::vector< Stomp::Pixel >::difference_type i,std::vector< Stomp::Pixel >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_Pixel_Sg____setslice__(std::vector< Stomp::Pixel > *self,std::vector< Stomp::Pixel >::difference_type i,std::vector< Stomp::Pixel >::difference_type j,std::vector< Stomp::Pixel,std::allocator< Stomp::Pixel > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Stomp_Pixel_Sg____delslice__(std::vector< Stomp::Pixel > *self,std::vector< Stomp::Pixel >::difference_type i,std::vector< Stomp::Pixel >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Stomp_Pixel_Sg____delitem__(std::vector< Stomp::Pixel > *self,std::vector< Stomp::Pixel >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< Stomp::Pixel >::value_type const &std_vector_Sl_Stomp_Pixel_Sg____getitem__(std::vector< Stomp::Pixel > const *self,std::vector< Stomp::Pixel >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Stomp_Pixel_Sg____setitem__(std::vector< Stomp::Pixel > *self,std::vector< Stomp::Pixel >::difference_type i,std::vector< Stomp::Pixel >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Stomp_Pixel_Sg__append(std::vector< Stomp::Pixel > *self,std::vector< Stomp::Pixel >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


  namespace swig {

















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>);
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}	
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::PyObject_var first = PySequence_GetItem(obj,0);
	    swig::PyObject_var second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<value_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair< std::string, double > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "double" " >";
	  }
	};
      }
    

  namespace swig {
    template <class PySeq, class K, class T >
    inline void
    assign(const PySeq& pyseq, std::map<K,T > *map) {
      typedef typename std::map<K,T>::value_type value_type;
      typename PySeq::const_iterator it = pyseq.begin();
      for (;it != pyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T>
    struct traits_asptr<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      static int asptr(PyObject *obj, map_type **val) {
	int res = SWIG_ERROR;
	if (PyDict_Check(obj)) {
	  PyObject_var items = PyObject_CallMethod(obj,(char *)"items",NULL);
	  res = traits_asptr_stdseq<std::map<K,T>, std::pair<K, T> >::asptr(items, val);
	} else {
	  map_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<map_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }      
    };
      
    template <class K, class T >
    struct traits_from<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;
            
      static PyObject *from(const map_type& map) {
	swig_type_info *desc = swig::type_info<map_type>();
	if (desc && desc->clientdata) {
	  return SWIG_NewPointerObj(new map_type(map), desc, SWIG_POINTER_OWN);
	} else {
	  size_type size = map.size();
	  int pysize = (size <= (size_type) INT_MAX) ? (int) size : -1;
	  if (pysize < 0) {
	    SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	    PyErr_SetString(PyExc_OverflowError,
			    "map size not valid in python");
	    SWIG_PYTHON_THREAD_END_BLOCK;
	    return NULL;
	  }
	  PyObject *obj = PyDict_New();
	  for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	    swig::PyObject_var key = swig::from(i->first);
	    swig::PyObject_var val = swig::from(i->second);
	    PyDict_SetItem(obj, key, val);
	  }
	  return obj;
	}
      }
    };

    template <class ValueType>
    struct from_key_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.first);
      }
    };

    template <class ValueType>
    struct from_value_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.second);
      }
    };

    template<class OutIterator, class FromOper, class ValueType = typename OutIterator::value_type>
    struct PyMapIterator_T : PySwigIteratorClosed_T<OutIterator, ValueType, FromOper>
    {
      PyMapIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: PySwigIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
      {
      }
    };


    template<class OutIterator,
	     class FromOper = from_key_oper<typename OutIterator::value_type> >
    struct PyMapKeyIterator_T : PyMapIterator_T<OutIterator, FromOper>
    {
      PyMapKeyIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: PyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };

    template<typename OutIter>
    inline PySwigIterator*
    make_output_key_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new PyMapKeyIterator_T<OutIter>(current, begin, end, seq);
    }

    template<class OutIterator,
	     class FromOper = from_value_oper<typename OutIterator::value_type> >
    struct PyMapValueIterator_T : PyMapIterator_T<OutIterator, FromOper>
    {
      PyMapValueIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: PyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };
    

    template<typename OutIter>
    inline PySwigIterator*
    make_output_value_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new PyMapValueIterator_T<OutIter>(current, begin, end, seq);
    }
  }


      namespace swig {
	template <>  struct traits<std::map<std::string, double, std::less< std::string >, std::allocator< std::pair< std::string const,double > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "double" "," "std::less< std::string >" "," "std::allocator< std::pair< std::string const,double > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_map_Sl_std_string_Sc_double_Sg__iterator(std::map< std::string,double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_double_Sg____nonzero__(std::map< std::string,double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< std::string,double >::size_type std_map_Sl_std_string_Sc_double_Sg____len__(std::map< std::string,double > const *self){
      return self->size();
    }
SWIGINTERN std::map< std::string,double >::mapped_type std_map_Sl_std_string_Sc_double_Sg____getitem__(std::map< std::string,double > const *self,std::map< std::string,double >::key_type const &key){
      std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_std_string_Sc_double_Sg____delitem__(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key){
      std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_double_Sg__has_key(std::map< std::string,double > const *self,std::map< std::string,double >::key_type const &key){
      std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_double_Sg__keys(std::map< std::string,double > *self){
      std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_double_Sg__values(std::map< std::string,double > *self){
      std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_double_Sg__items(std::map< std::string,double > *self){
      std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      return itemList;
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_double_Sg____contains__(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::PySwigIterator *std_map_Sl_std_string_Sc_double_Sg__key_iterator(std::map< std::string,double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::PySwigIterator *std_map_Sl_std_string_Sc_double_Sg__value_iterator(std::map< std::string,double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_double_Sg____setitem__(std::map< std::string,double > *self,std::map< std::string,double >::key_type const &key,std::map< std::string,double >::mapped_type const &x){
      (*self)[key] = x;
    }

namespace swig {
  template <> struct traits<unsigned char > {
    typedef value_category category;
    static const char* type_name() { return"unsigned char"; }
  };  
  template <>  struct traits_asval<unsigned char > {   
    typedef unsigned char value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_unsigned_SS_char (obj, val);
    }
  };
  template <>  struct traits_from<unsigned char > {
    typedef unsigned char value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_char  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::pair< std::string, unsigned char > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "unsigned char" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map<std::string, unsigned char, std::less< std::string >, std::allocator< std::pair< std::string const,unsigned char > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "unsigned char" "," "std::less< std::string >" "," "std::allocator< std::pair< std::string const,unsigned char > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_map_Sl_std_string_Sc_uint8_t_Sg__iterator(std::map< std::string,uint8_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_uint8_t_Sg____nonzero__(std::map< std::string,uint8_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< std::string,unsigned char >::size_type std_map_Sl_std_string_Sc_uint8_t_Sg____len__(std::map< std::string,uint8_t > const *self){
      return self->size();
    }
SWIGINTERN std::map< std::string,unsigned char >::mapped_type std_map_Sl_std_string_Sc_uint8_t_Sg____getitem__(std::map< std::string,uint8_t > const *self,std::map< std::string,unsigned char >::key_type const &key){
      std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_std_string_Sc_uint8_t_Sg____delitem__(std::map< std::string,uint8_t > *self,std::map< std::string,unsigned char >::key_type const &key){
      std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_uint8_t_Sg__has_key(std::map< std::string,uint8_t > const *self,std::map< std::string,unsigned char >::key_type const &key){
      std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_uint8_t_Sg__keys(std::map< std::string,uint8_t > *self){
      std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_uint8_t_Sg__values(std::map< std::string,uint8_t > *self){
      std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_uint8_t_Sg__items(std::map< std::string,uint8_t > *self){
      std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      return itemList;
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_uint8_t_Sg____contains__(std::map< std::string,uint8_t > *self,std::map< std::string,unsigned char >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::PySwigIterator *std_map_Sl_std_string_Sc_uint8_t_Sg__key_iterator(std::map< std::string,uint8_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::PySwigIterator *std_map_Sl_std_string_Sc_uint8_t_Sg__value_iterator(std::map< std::string,uint8_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_uint8_t_Sg____setitem__(std::map< std::string,uint8_t > *self,std::map< std::string,unsigned char >::key_type const &key,std::map< std::string,unsigned char >::mapped_type const &x){
      (*self)[key] = x;
    }

      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem__(std::vector< double > *self,std::vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem__(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }

namespace swig {
  template <> struct traits<unsigned int > {
    typedef value_category category;
    static const char* type_name() { return"unsigned int"; }
  };  
  template <>  struct traits_asval<unsigned int > {   
    typedef unsigned int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_unsigned_SS_int (obj, val);
    }
  };
  template <>  struct traits_from<unsigned int > {
    typedef unsigned int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<unsigned int, std::allocator< unsigned int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned int" "," "std::allocator< unsigned int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_uint32_t_Sg__iterator(std::vector< uint32_t > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_uint32_t_Sg____nonzero__(std::vector< uint32_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< unsigned int >::size_type std_vector_Sl_uint32_t_Sg____len__(std::vector< uint32_t > const *self){
      return self->size();
    }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_uint32_t_Sg__pop(std::vector< uint32_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<unsigned int,std::allocator< unsigned int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< unsigned int,std::allocator< unsigned int > > *std_vector_Sl_uint32_t_Sg____getslice__(std::vector< uint32_t > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____setslice__(std::vector< uint32_t > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j,std::vector< unsigned int,std::allocator< unsigned int > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____delslice__(std::vector< uint32_t > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____delitem__(std::vector< uint32_t > *self,std::vector< unsigned int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< unsigned int >::value_type const &std_vector_Sl_uint32_t_Sg____getitem__(std::vector< uint32_t > const *self,std::vector< unsigned int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg____setitem__(std::vector< uint32_t > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__append(std::vector< uint32_t > *self,std::vector< unsigned int >::value_type const &x){
      self->push_back(x);
    }

void _iter_incr( std::vector<Stomp::AngularBin>::const_iterator* iter )
{
    ++(*iter);
}


void _iter_incr( std::vector<Stomp::HistogramBin>::const_iterator* iter )
{
    ++(*iter);
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_PySwigIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PySwigIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PySwigIterator" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_value" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)((swig::PySwigIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (swig::PySwigIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PySwigIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    incr(swig::PySwigIterator *,size_t)\n"
    "    incr(swig::PySwigIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (swig::PySwigIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_PySwigIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    decr(swig::PySwigIterator *,size_t)\n"
    "    decr(swig::PySwigIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_distance" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  try {
    result = ((swig::PySwigIterator const *)arg1)->distance((swig::PySwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_equal" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  try {
    result = (bool)((swig::PySwigIterator const *)arg1)->equal((swig::PySwigIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_copy" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_next" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PySwigIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_previous" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_advance" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___eq__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = (bool)((swig::PySwigIterator const *)arg1)->operator ==((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___ne__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = (bool)((swig::PySwigIterator const *)arg1)->operator !=((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___iadd__" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      swig::PySwigIterator &_result_ref = (arg1)->operator +=(arg2);
      result = (swig::PySwigIterator *) &_result_ref;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___isub__" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    {
      swig::PySwigIterator &_result_ref = (arg1)->operator -=(arg2);
      result = (swig::PySwigIterator *) &_result_ref;
    }
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___add__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PySwigIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  result = ((swig::PySwigIterator const *)arg1)->operator -((swig::PySwigIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__PySwigIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PySwigIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PySwigIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *PySwigIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__PySwigIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Pi_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Pi is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Pi_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::Pi));
  return pyobj;
}


SWIGINTERN int Swig_var_DegToRad_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DegToRad is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DegToRad_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::DegToRad));
  return pyobj;
}


SWIGINTERN int Swig_var_RadToDeg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RadToDeg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RadToDeg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::RadToDeg));
  return pyobj;
}


SWIGINTERN int Swig_var_StradToDeg_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StradToDeg is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_StradToDeg_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::StradToDeg));
  return pyobj;
}


SWIGINTERN int Swig_var_EtaOffSet_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EtaOffSet is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EtaOffSet_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::EtaOffSet));
  return pyobj;
}


SWIGINTERN int Swig_var_SurveyCenterRA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SurveyCenterRA is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SurveyCenterRA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::SurveyCenterRA));
  return pyobj;
}


SWIGINTERN int Swig_var_SurveyCenterDEC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SurveyCenterDEC is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SurveyCenterDEC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::SurveyCenterDEC));
  return pyobj;
}


SWIGINTERN int Swig_var_Node_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Node is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Node_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::Node));
  return pyobj;
}


SWIGINTERN int Swig_var_EtaPole_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable EtaPole is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_EtaPole_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::EtaPole));
  return pyobj;
}


SWIGINTERN int Swig_var_Nx0_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Nx0 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Nx0_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Stomp::Nx0));
  return pyobj;
}


SWIGINTERN int Swig_var_Ny0_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Ny0 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Ny0_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Stomp::Ny0));
  return pyobj;
}


SWIGINTERN int Swig_var_HPixLevel_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HPixLevel is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HPixLevel_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(Stomp::HPixLevel));
  return pyobj;
}


SWIGINTERN int Swig_var_MaxPixelLevel_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MaxPixelLevel is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MaxPixelLevel_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(Stomp::MaxPixelLevel));
  return pyobj;
}


SWIGINTERN int Swig_var_HPixResolution_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HPixResolution is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HPixResolution_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Stomp::HPixResolution));
  return pyobj;
}


SWIGINTERN int Swig_var_MaxPixelResolution_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MaxPixelResolution is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MaxPixelResolution_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Stomp::MaxPixelResolution));
  return pyobj;
}


SWIGINTERN int Swig_var_ResolutionLevels_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ResolutionLevels is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ResolutionLevels_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(Stomp::ResolutionLevels));
  return pyobj;
}


SWIGINTERN int Swig_var_HPixArea_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HPixArea is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HPixArea_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::HPixArea));
  return pyobj;
}


SWIGINTERN int Swig_var_MaxPixnum_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MaxPixnum is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MaxPixnum_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Stomp::MaxPixnum));
  return pyobj;
}


SWIGINTERN int Swig_var_MaxSuperpixnum_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MaxSuperpixnum is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MaxSuperpixnum_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Stomp::MaxSuperpixnum));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_DoubleLT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleLT",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DoubleLT" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleLT" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)Stomp::DoubleLT(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleLE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleLE",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DoubleLE" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleLE" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)Stomp::DoubleLE(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleGT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleGT",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DoubleGT" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleGT" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)Stomp::DoubleGT(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleGE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleGE",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DoubleGE" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleGE" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)Stomp::DoubleGE(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleEQ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleEQ",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DoubleEQ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleEQ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)Stomp::DoubleEQ(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MostSignificantBit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MostSignificantBit",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MostSignificantBit" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  result = (uint8_t)Stomp::MostSignificantBit(arg1);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularBin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AngularBin")) SWIG_fail;
  result = (Stomp::AngularBin *)new Stomp::AngularBin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularBin, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AngularBin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AngularBin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularBin" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularBin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::AngularBin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AngularBin",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularBin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularBin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (Stomp::AngularBin *)new Stomp::AngularBin(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularBin, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularBin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  int16_t arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::AngularBin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_AngularBin",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularBin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularBin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularBin" "', argument " "3"" of type '" "int16_t""'");
  } 
  arg3 = static_cast< int16_t >(val3);
  result = (Stomp::AngularBin *)new Stomp::AngularBin(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularBin, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularBin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AngularBin__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AngularBin__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AngularBin__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_AngularBin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::AngularBin()\n"
    "    Stomp::AngularBin(double,double)\n"
    "    Stomp::AngularBin(double,double,int16_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ClearRegions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_ClearRegions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ClearRegions" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->ClearRegions();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_InitializeRegions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_InitializeRegions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_InitializeRegions" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_InitializeRegions" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  (arg1)->InitializeRegions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_SetResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_SetResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_SetResolution" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_SetResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->SetResolution(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_CalculateResolution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  double arg3 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularBin_CalculateResolution",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_CalculateResolution" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_CalculateResolution" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularBin_CalculateResolution" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularBin_CalculateResolution" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  (arg1)->CalculateResolution(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_CalculateResolution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularBin_CalculateResolution",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_CalculateResolution" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_CalculateResolution" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularBin_CalculateResolution" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->CalculateResolution(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_CalculateResolution__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_CalculateResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_CalculateResolution" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_CalculateResolution" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->CalculateResolution(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_CalculateResolution__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_CalculateResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_CalculateResolution" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->CalculateResolution();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_CalculateResolution(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_CalculateResolution__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_CalculateResolution__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularBin_CalculateResolution__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularBin_CalculateResolution__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_CalculateResolution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CalculateResolution(Stomp::AngularBin *,double,double,uint32_t)\n"
    "    CalculateResolution(Stomp::AngularBin *,double,double)\n"
    "    CalculateResolution(Stomp::AngularBin *,double)\n"
    "    CalculateResolution(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_SetThetaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_SetThetaMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_SetThetaMin" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_SetThetaMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetThetaMin(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_SetThetaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_SetThetaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_SetThetaMax" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_SetThetaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetThetaMax(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_SetTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_SetTheta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_SetTheta" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_SetTheta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetTheta(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_WithinBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_WithinBounds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_WithinBounds" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_WithinBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)(arg1)->WithinBounds(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_WithinSin2Bounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_WithinSin2Bounds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_WithinSin2Bounds" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_WithinSin2Bounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)(arg1)->WithinSin2Bounds(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_WithinCosBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_WithinCosBounds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_WithinCosBounds" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_WithinCosBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)(arg1)->WithinCosBounds(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_Area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Area" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->Area();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_PoissonNoise(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularBin_PoissonNoise",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_PoissonNoise" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_PoissonNoise" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularBin_PoissonNoise" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->PoissonNoise(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_AddToPixelWtheta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  double arg3 ;
  int16_t arg4 ;
  int16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularBin_AddToPixelWtheta",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "5"" of type '" "int16_t""'");
  } 
  arg5 = static_cast< int16_t >(val5);
  (arg1)->AddToPixelWtheta(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_AddToPixelWtheta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  double arg3 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularBin_AddToPixelWtheta",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  (arg1)->AddToPixelWtheta(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_AddToPixelWtheta__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularBin_AddToPixelWtheta",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularBin_AddToPixelWtheta" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->AddToPixelWtheta(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_AddToPixelWtheta(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularBin_AddToPixelWtheta__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularBin_AddToPixelWtheta__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularBin_AddToPixelWtheta__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_AddToPixelWtheta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddToPixelWtheta(Stomp::AngularBin *,double,double,int16_t,int16_t)\n"
    "    AddToPixelWtheta(Stomp::AngularBin *,double,double,int16_t)\n"
    "    AddToPixelWtheta(Stomp::AngularBin *,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_AddToWeight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  int16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularBin_AddToWeight",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_AddToWeight" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_AddToWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularBin_AddToWeight" "', argument " "3"" of type '" "int16_t""'");
  } 
  arg3 = static_cast< int16_t >(val3);
  (arg1)->AddToWeight(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_AddToWeight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_AddToWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_AddToWeight" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_AddToWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->AddToWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_AddToWeight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_AddToWeight__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularBin_AddToWeight__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_AddToWeight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddToWeight(Stomp::AngularBin *,double,int16_t)\n"
    "    AddToWeight(Stomp::AngularBin *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_AddToCounter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  uint32_t arg2 ;
  int16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularBin_AddToCounter",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_AddToCounter" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_AddToCounter" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularBin_AddToCounter" "', argument " "3"" of type '" "int16_t""'");
  } 
  arg3 = static_cast< int16_t >(val3);
  (arg1)->AddToCounter(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_AddToCounter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_AddToCounter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_AddToCounter" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_AddToCounter" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->AddToCounter(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_AddToCounter__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_AddToCounter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_AddToCounter" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->AddToCounter();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_AddToCounter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_AddToCounter__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_AddToCounter__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularBin_AddToCounter__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_AddToCounter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddToCounter(Stomp::AngularBin *,uint32_t,int16_t)\n"
    "    AddToCounter(Stomp::AngularBin *,uint32_t)\n"
    "    AddToCounter(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MoveWeightToGalGal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MoveWeightToGalGal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MoveWeightToGalGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->MoveWeightToGalGal();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MoveWeightToGalRand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_MoveWeightToGalRand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MoveWeightToGalRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_MoveWeightToGalRand" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->MoveWeightToGalRand(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MoveWeightToGalRand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MoveWeightToGalRand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MoveWeightToGalRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->MoveWeightToGalRand();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MoveWeightToGalRand(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_MoveWeightToGalRand__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_MoveWeightToGalRand__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_MoveWeightToGalRand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MoveWeightToGalRand(Stomp::AngularBin *,bool)\n"
    "    MoveWeightToGalRand(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MoveWeightToRandGal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_MoveWeightToRandGal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MoveWeightToRandGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_MoveWeightToRandGal" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->MoveWeightToRandGal(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MoveWeightToRandGal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MoveWeightToRandGal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MoveWeightToRandGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->MoveWeightToRandGal();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MoveWeightToRandGal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_MoveWeightToRandGal__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_MoveWeightToRandGal__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_MoveWeightToRandGal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MoveWeightToRandGal(Stomp::AngularBin *,bool)\n"
    "    MoveWeightToRandGal(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MoveWeightToRandRand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MoveWeightToRandRand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MoveWeightToRandRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->MoveWeightToRandRand();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_RescaleGalGal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_RescaleGalGal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_RescaleGalGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_RescaleGalGal" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->RescaleGalGal(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_RescaleGalRand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_RescaleGalRand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_RescaleGalRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_RescaleGalRand" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->RescaleGalRand(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_RescaleRandGal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_RescaleRandGal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_RescaleRandGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_RescaleRandGal" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->RescaleRandGal(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_RescaleRandRand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_RescaleRandRand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_RescaleRandRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_RescaleRandRand" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->RescaleRandRand(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_Reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Reset" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->Reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ResetPixelWtheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_ResetPixelWtheta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ResetPixelWtheta" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->ResetPixelWtheta();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ResetWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_ResetWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ResetWeight" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->ResetWeight();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ResetCounter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_ResetCounter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ResetCounter" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->ResetCounter();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ResetGalGal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_ResetGalGal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ResetGalGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->ResetGalGal();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ResetGalRand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_ResetGalRand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ResetGalRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->ResetGalRand();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ResetRandGal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_ResetRandGal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ResetRandGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->ResetRandGal();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ResetRandRand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_ResetRandRand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ResetRandRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  (arg1)->ResetRandRand();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Resolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_Resolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Resolution" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (uint32_t)(arg1)->Resolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_NRegion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_NRegion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_NRegion" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (int16_t)(arg1)->NRegion();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Theta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_Theta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Theta" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->Theta();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ThetaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_ThetaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ThetaMin" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->ThetaMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ThetaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_ThetaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ThetaMax" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->ThetaMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Sin2ThetaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_Sin2ThetaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Sin2ThetaMin" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->Sin2ThetaMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Sin2ThetaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_Sin2ThetaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Sin2ThetaMax" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->Sin2ThetaMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_CosThetaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_CosThetaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_CosThetaMin" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->CosThetaMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_CosThetaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_CosThetaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_CosThetaMax" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->CosThetaMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Wtheta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_Wtheta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Wtheta" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_Wtheta" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->Wtheta(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Wtheta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_Wtheta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Wtheta" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->Wtheta();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Wtheta(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_Wtheta__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_Wtheta__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_Wtheta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Wtheta(Stomp::AngularBin *,int16_t)\n"
    "    Wtheta(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_WthetaError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_WthetaError",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_WthetaError" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_WthetaError" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->WthetaError(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_WthetaError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_WthetaError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_WthetaError" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->WthetaError();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_WthetaError(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_WthetaError__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_WthetaError__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_WthetaError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    WthetaError(Stomp::AngularBin *,int16_t)\n"
    "    WthetaError(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_WeightedCrossCorrelation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_WeightedCrossCorrelation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_WeightedCrossCorrelation" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_WeightedCrossCorrelation" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->WeightedCrossCorrelation(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_WeightedCrossCorrelation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_WeightedCrossCorrelation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_WeightedCrossCorrelation" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->WeightedCrossCorrelation();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_WeightedCrossCorrelation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_WeightedCrossCorrelation__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_WeightedCrossCorrelation__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_WeightedCrossCorrelation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    WeightedCrossCorrelation(Stomp::AngularBin *,int16_t)\n"
    "    WeightedCrossCorrelation(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_PixelWtheta__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_PixelWtheta",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_PixelWtheta" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_PixelWtheta" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->PixelWtheta(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_PixelWtheta__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_PixelWtheta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_PixelWtheta" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->PixelWtheta();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_PixelWtheta(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_PixelWtheta__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_PixelWtheta__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_PixelWtheta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PixelWtheta(Stomp::AngularBin *,int16_t)\n"
    "    PixelWtheta(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_PixelWeight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_PixelWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_PixelWeight" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_PixelWeight" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->PixelWeight(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_PixelWeight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_PixelWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_PixelWeight" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->PixelWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_PixelWeight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_PixelWeight__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_PixelWeight__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_PixelWeight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PixelWeight(Stomp::AngularBin *,int16_t)\n"
    "    PixelWeight(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Weight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_Weight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Weight" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_Weight" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->Weight(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Weight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_Weight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Weight" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->Weight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Weight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_Weight__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_Weight__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_Weight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Weight(Stomp::AngularBin *,int16_t)\n"
    "    Weight(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Counter__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_Counter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Counter" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_Counter" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (uint32_t)(arg1)->Counter(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Counter__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_Counter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_Counter" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (uint32_t)(arg1)->Counter();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_Counter(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_Counter__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_Counter__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_Counter'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Counter(Stomp::AngularBin *,int16_t)\n"
    "    Counter(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_GalGal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_GalGal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_GalGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_GalGal" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->GalGal(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_GalGal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_GalGal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_GalGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->GalGal();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_GalGal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_GalGal__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_GalGal__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_GalGal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GalGal(Stomp::AngularBin *,int16_t)\n"
    "    GalGal(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_GalRand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_GalRand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_GalRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_GalRand" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->GalRand(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_GalRand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_GalRand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_GalRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->GalRand();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_GalRand(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_GalRand__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_GalRand__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_GalRand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GalRand(Stomp::AngularBin *,int16_t)\n"
    "    GalRand(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_RandGal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_RandGal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_RandGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_RandGal" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->RandGal(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_RandGal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_RandGal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_RandGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->RandGal();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_RandGal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_RandGal__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_RandGal__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_RandGal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RandGal(Stomp::AngularBin *,int16_t)\n"
    "    RandGal(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_RandRand__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_RandRand",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_RandRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularBin_RandRand" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->RandRand(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_RandRand__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_RandRand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_RandRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->RandRand();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_RandRand(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularBin_RandRand__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularBin_RandRand__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularBin_RandRand'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RandRand(Stomp::AngularBin *,int16_t)\n"
    "    RandRand(Stomp::AngularBin *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MeanWtheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MeanWtheta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MeanWtheta" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->MeanWtheta();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MeanWthetaError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MeanWthetaError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MeanWthetaError" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->MeanWthetaError();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MeanWeightedCrossCorrelation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MeanWeightedCrossCorrelation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MeanWeightedCrossCorrelation" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->MeanWeightedCrossCorrelation();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MeanWeightedCrossCorrelationError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MeanWeightedCrossCorrelationError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MeanWeightedCrossCorrelationError" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->MeanWeightedCrossCorrelationError();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MeanWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MeanWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MeanWeight" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->MeanWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MeanCounter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MeanCounter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MeanCounter" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->MeanCounter();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MeanGalGal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MeanGalGal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MeanGalGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->MeanGalGal();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MeanGalRand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MeanGalRand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MeanGalRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->MeanGalRand();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MeanRandGal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MeanRandGal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MeanRandGal" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->MeanRandGal();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_MeanRandRand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin *arg1 = (Stomp::AngularBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularBin_MeanRandRand",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_MeanRandRand" "', argument " "1"" of type '" "Stomp::AngularBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularBin * >(argp1);
  result = (double)(arg1)->MeanRandRand();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ThetaOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin arg1 ;
  Stomp::AngularBin arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_ThetaOrder",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularBin,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ThetaOrder" "', argument " "1"" of type '" "Stomp::AngularBin""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularBin_ThetaOrder" "', argument " "1"" of type '" "Stomp::AngularBin""'");
    } else {
      Stomp::AngularBin * temp = reinterpret_cast< Stomp::AngularBin * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularBin,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularBin_ThetaOrder" "', argument " "2"" of type '" "Stomp::AngularBin""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularBin_ThetaOrder" "', argument " "2"" of type '" "Stomp::AngularBin""'");
    } else {
      Stomp::AngularBin * temp = reinterpret_cast< Stomp::AngularBin * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)Stomp::AngularBin::ThetaOrder(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_SinThetaOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin arg1 ;
  Stomp::AngularBin arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_SinThetaOrder",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularBin,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_SinThetaOrder" "', argument " "1"" of type '" "Stomp::AngularBin""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularBin_SinThetaOrder" "', argument " "1"" of type '" "Stomp::AngularBin""'");
    } else {
      Stomp::AngularBin * temp = reinterpret_cast< Stomp::AngularBin * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularBin,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularBin_SinThetaOrder" "', argument " "2"" of type '" "Stomp::AngularBin""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularBin_SinThetaOrder" "', argument " "2"" of type '" "Stomp::AngularBin""'");
    } else {
      Stomp::AngularBin * temp = reinterpret_cast< Stomp::AngularBin * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)Stomp::AngularBin::SinThetaOrder(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularBin_ReverseResolutionOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularBin arg1 ;
  Stomp::AngularBin arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularBin_ReverseResolutionOrder",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularBin,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularBin_ReverseResolutionOrder" "', argument " "1"" of type '" "Stomp::AngularBin""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularBin_ReverseResolutionOrder" "', argument " "1"" of type '" "Stomp::AngularBin""'");
    } else {
      Stomp::AngularBin * temp = reinterpret_cast< Stomp::AngularBin * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularBin,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularBin_ReverseResolutionOrder" "', argument " "2"" of type '" "Stomp::AngularBin""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularBin_ReverseResolutionOrder" "', argument " "2"" of type '" "Stomp::AngularBin""'");
    } else {
      Stomp::AngularBin * temp = reinterpret_cast< Stomp::AngularBin * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)Stomp::AngularBin::ReverseResolutionOrder(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AngularBin_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__AngularBin, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RadialBin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RadialBin")) SWIG_fail;
  result = (Stomp::RadialBin *)new Stomp::RadialBin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__RadialBin, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RadialBin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin *arg1 = (Stomp::RadialBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RadialBin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RadialBin, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RadialBin" "', argument " "1"" of type '" "Stomp::RadialBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RadialBin * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialBin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::RadialBin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RadialBin",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RadialBin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RadialBin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RadialBin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::RadialBin *)new Stomp::RadialBin(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__RadialBin, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialBin__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  int16_t arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::RadialBin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RadialBin",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RadialBin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RadialBin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RadialBin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_RadialBin" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  result = (Stomp::RadialBin *)new Stomp::RadialBin(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__RadialBin, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialBin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RadialBin__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RadialBin__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_RadialBin__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_RadialBin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::RadialBin()\n"
    "    Stomp::RadialBin(double,double,double)\n"
    "    Stomp::RadialBin(double,double,double,int16_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBin_SetRadiusMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin *arg1 = (Stomp::RadialBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialBin_SetRadiusMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RadialBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBin_SetRadiusMin" "', argument " "1"" of type '" "Stomp::RadialBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RadialBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialBin_SetRadiusMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetRadiusMin(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBin_SetRadiusMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin *arg1 = (Stomp::RadialBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialBin_SetRadiusMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RadialBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBin_SetRadiusMax" "', argument " "1"" of type '" "Stomp::RadialBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RadialBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialBin_SetRadiusMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetRadiusMax(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBin_SetRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin *arg1 = (Stomp::RadialBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialBin_SetRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RadialBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBin_SetRadius" "', argument " "1"" of type '" "Stomp::RadialBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RadialBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialBin_SetRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetRadius(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBin_SetRedshift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin *arg1 = (Stomp::RadialBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialBin_SetRedshift",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RadialBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBin_SetRedshift" "', argument " "1"" of type '" "Stomp::RadialBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RadialBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialBin_SetRedshift" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetRedshift(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBin_WithinRadialBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin *arg1 = (Stomp::RadialBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialBin_WithinRadialBounds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RadialBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBin_WithinRadialBounds" "', argument " "1"" of type '" "Stomp::RadialBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RadialBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialBin_WithinRadialBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)(arg1)->WithinRadialBounds(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBin_Radius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin *arg1 = (Stomp::RadialBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialBin_Radius",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RadialBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBin_Radius" "', argument " "1"" of type '" "Stomp::RadialBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RadialBin * >(argp1);
  result = (double)(arg1)->Radius();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBin_RadiusMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin *arg1 = (Stomp::RadialBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialBin_RadiusMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RadialBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBin_RadiusMin" "', argument " "1"" of type '" "Stomp::RadialBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RadialBin * >(argp1);
  result = (double)(arg1)->RadiusMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBin_RadiusMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin *arg1 = (Stomp::RadialBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialBin_RadiusMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RadialBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBin_RadiusMax" "', argument " "1"" of type '" "Stomp::RadialBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RadialBin * >(argp1);
  result = (double)(arg1)->RadiusMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBin_Redshift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin *arg1 = (Stomp::RadialBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialBin_Redshift",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RadialBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBin_Redshift" "', argument " "1"" of type '" "Stomp::RadialBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RadialBin * >(argp1);
  result = (double)(arg1)->Redshift();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBin_RadialOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin arg1 ;
  Stomp::RadialBin arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialBin_RadialOrder",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__RadialBin,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBin_RadialOrder" "', argument " "1"" of type '" "Stomp::RadialBin""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialBin_RadialOrder" "', argument " "1"" of type '" "Stomp::RadialBin""'");
    } else {
      Stomp::RadialBin * temp = reinterpret_cast< Stomp::RadialBin * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__RadialBin,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadialBin_RadialOrder" "', argument " "2"" of type '" "Stomp::RadialBin""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialBin_RadialOrder" "', argument " "2"" of type '" "Stomp::RadialBin""'");
    } else {
      Stomp::RadialBin * temp = reinterpret_cast< Stomp::RadialBin * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)Stomp::RadialBin::RadialOrder(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialBin_ReverseResolutionOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RadialBin arg1 ;
  Stomp::RadialBin arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialBin_ReverseResolutionOrder",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__RadialBin,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialBin_ReverseResolutionOrder" "', argument " "1"" of type '" "Stomp::RadialBin""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialBin_ReverseResolutionOrder" "', argument " "1"" of type '" "Stomp::RadialBin""'");
    } else {
      Stomp::RadialBin * temp = reinterpret_cast< Stomp::RadialBin * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__RadialBin,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadialBin_ReverseResolutionOrder" "', argument " "2"" of type '" "Stomp::RadialBin""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialBin_ReverseResolutionOrder" "', argument " "2"" of type '" "Stomp::RadialBin""'");
    } else {
      Stomp::RadialBin * temp = reinterpret_cast< Stomp::RadialBin * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)Stomp::RadialBin::ReverseResolutionOrder(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RadialBin_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__RadialBin, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AngularCorrelation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::AngularCorrelation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_AngularCorrelation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularCorrelation" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularCorrelation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularCorrelation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AngularCorrelation" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (Stomp::AngularCorrelation *)new Stomp::AngularCorrelation(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularCorrelation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularCorrelation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::AngularCorrelation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_AngularCorrelation",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularCorrelation" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularCorrelation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularCorrelation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::AngularCorrelation *)new Stomp::AngularCorrelation(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularCorrelation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularCorrelation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::AngularCorrelation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_AngularCorrelation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularCorrelation" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularCorrelation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularCorrelation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AngularCorrelation" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (Stomp::AngularCorrelation *)new Stomp::AngularCorrelation(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularCorrelation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularCorrelation__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  double arg2 ;
  double arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::AngularCorrelation *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_AngularCorrelation",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularCorrelation" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularCorrelation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularCorrelation" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::AngularCorrelation *)new Stomp::AngularCorrelation(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularCorrelation, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularCorrelation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AngularCorrelation__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AngularCorrelation__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_AngularCorrelation__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_AngularCorrelation__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_AngularCorrelation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::AngularCorrelation(double,double,double,bool)\n"
    "    Stomp::AngularCorrelation(double,double,double)\n"
    "    Stomp::AngularCorrelation(uint32_t,double,double,bool)\n"
    "    Stomp::AngularCorrelation(uint32_t,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AngularCorrelation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AngularCorrelation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_AssignBinResolutions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  double arg2 ;
  double arg3 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCorrelation_AssignBinResolutions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_AssignBinResolutions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_AssignBinResolutions" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCorrelation_AssignBinResolutions" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCorrelation_AssignBinResolutions" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  (arg1)->AssignBinResolutions(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_AssignBinResolutions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCorrelation_AssignBinResolutions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_AssignBinResolutions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_AssignBinResolutions" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCorrelation_AssignBinResolutions" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->AssignBinResolutions(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_AssignBinResolutions__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_AssignBinResolutions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_AssignBinResolutions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_AssignBinResolutions" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->AssignBinResolutions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_AssignBinResolutions__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_AssignBinResolutions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_AssignBinResolutions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  (arg1)->AssignBinResolutions();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_AssignBinResolutions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularCorrelation_AssignBinResolutions__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCorrelation_AssignBinResolutions__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCorrelation_AssignBinResolutions__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCorrelation_AssignBinResolutions__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_AssignBinResolutions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AssignBinResolutions(Stomp::AngularCorrelation *,double,double,uint32_t)\n"
    "    AssignBinResolutions(Stomp::AngularCorrelation *,double,double)\n"
    "    AssignBinResolutions(Stomp::AngularCorrelation *,double)\n"
    "    AssignBinResolutions(Stomp::AngularCorrelation *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_SetMaxResolution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCorrelation_SetMaxResolution",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_SetMaxResolution" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_SetMaxResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCorrelation_SetMaxResolution" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->SetMaxResolution(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_SetMaxResolution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_SetMaxResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_SetMaxResolution" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_SetMaxResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->SetMaxResolution(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_SetMaxResolution(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCorrelation_SetMaxResolution__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCorrelation_SetMaxResolution__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_SetMaxResolution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetMaxResolution(Stomp::AngularCorrelation *,uint32_t,bool)\n"
    "    SetMaxResolution(Stomp::AngularCorrelation *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_SetMinResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_SetMinResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_SetMinResolution" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_SetMinResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->SetMinResolution(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_AutoMaxResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint32_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCorrelation_AutoMaxResolution",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_AutoMaxResolution" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_AutoMaxResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCorrelation_AutoMaxResolution" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->AutoMaxResolution(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_InitializeRegions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_InitializeRegions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_InitializeRegions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_InitializeRegions" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  (arg1)->InitializeRegions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_ClearRegions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_ClearRegions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_ClearRegions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  (arg1)->ClearRegions();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_NRegion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_NRegion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_NRegion" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (int16_t)(arg1)->NRegion();
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindAutoCorrelation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCorrelation_FindAutoCorrelation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindAutoCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindAutoCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindAutoCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindAutoCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindAutoCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCorrelation_FindAutoCorrelation" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  (arg1)->FindAutoCorrelation(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindAutoCorrelation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCorrelation_FindAutoCorrelation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindAutoCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindAutoCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindAutoCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindAutoCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindAutoCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  (arg1)->FindAutoCorrelation(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindAutoCorrelation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AngularCorrelation_FindAutoCorrelation__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCorrelation_FindAutoCorrelation__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_FindAutoCorrelation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindAutoCorrelation(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,uint8_t)\n"
    "    FindAutoCorrelation(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindCrossCorrelation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  Stomp::WAngularVector *arg4 = 0 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCorrelation_FindCrossCorrelation",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  (arg1)->FindCrossCorrelation(*arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindCrossCorrelation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  Stomp::WAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCorrelation_FindCrossCorrelation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelation" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  (arg1)->FindCrossCorrelation(*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindCrossCorrelation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_AngularCorrelation_FindCrossCorrelation__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCorrelation_FindCrossCorrelation__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_FindCrossCorrelation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindCrossCorrelation(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,Stomp::WAngularVector &,uint8_t)\n"
    "    FindCrossCorrelation(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,Stomp::WAngularVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindAutoCorrelationWithRegions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  uint8_t arg4 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCorrelation_FindAutoCorrelationWithRegions",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  (arg1)->FindAutoCorrelationWithRegions(*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindAutoCorrelationWithRegions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCorrelation_FindAutoCorrelationWithRegions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  (arg1)->FindAutoCorrelationWithRegions(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindAutoCorrelationWithRegions__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCorrelation_FindAutoCorrelationWithRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindAutoCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  (arg1)->FindAutoCorrelationWithRegions(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindAutoCorrelationWithRegions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AngularCorrelation_FindAutoCorrelationWithRegions__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCorrelation_FindAutoCorrelationWithRegions__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCorrelation_FindAutoCorrelationWithRegions__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_FindAutoCorrelationWithRegions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindAutoCorrelationWithRegions(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,uint8_t,uint16_t)\n"
    "    FindAutoCorrelationWithRegions(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,uint8_t)\n"
    "    FindAutoCorrelationWithRegions(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindCrossCorrelationWithRegions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  Stomp::WAngularVector *arg4 = 0 ;
  uint8_t arg5 ;
  uint16_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AngularCorrelation_FindCrossCorrelationWithRegions",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "6"" of type '" "uint16_t""'");
  } 
  arg6 = static_cast< uint16_t >(val6);
  (arg1)->FindCrossCorrelationWithRegions(*arg2,*arg3,*arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindCrossCorrelationWithRegions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  Stomp::WAngularVector *arg4 = 0 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCorrelation_FindCrossCorrelationWithRegions",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  (arg1)->FindCrossCorrelationWithRegions(*arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindCrossCorrelationWithRegions__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  Stomp::WAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCorrelation_FindCrossCorrelationWithRegions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindCrossCorrelationWithRegions" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  (arg1)->FindCrossCorrelationWithRegions(*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindCrossCorrelationWithRegions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_AngularCorrelation_FindCrossCorrelationWithRegions__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCorrelation_FindCrossCorrelationWithRegions__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_short(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_AngularCorrelation_FindCrossCorrelationWithRegions__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_FindCrossCorrelationWithRegions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindCrossCorrelationWithRegions(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,Stomp::WAngularVector &,uint8_t,uint16_t)\n"
    "    FindCrossCorrelationWithRegions(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,Stomp::WAngularVector &,uint8_t)\n"
    "    FindCrossCorrelationWithRegions(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,Stomp::WAngularVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPixelAutoCorrelation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCorrelation_FindPixelAutoCorrelation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindPixelAutoCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindPixelAutoCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPixelAutoCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindPixelAutoCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPixelAutoCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  (arg1)->FindPixelAutoCorrelation(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPixelAutoCorrelation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::ScalarMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_FindPixelAutoCorrelation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindPixelAutoCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindPixelAutoCorrelation" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPixelAutoCorrelation" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarMap * >(argp2);
  (arg1)->FindPixelAutoCorrelation(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPixelAutoCorrelation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AngularCorrelation_FindPixelAutoCorrelation__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AngularCorrelation_FindPixelAutoCorrelation__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_FindPixelAutoCorrelation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindPixelAutoCorrelation(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &)\n"
    "    FindPixelAutoCorrelation(Stomp::AngularCorrelation *,Stomp::ScalarMap &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPixelCrossCorrelation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  Stomp::WAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCorrelation_FindPixelCrossCorrelation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  (arg1)->FindPixelCrossCorrelation(*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPixelCrossCorrelation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::ScalarMap *arg2 = 0 ;
  Stomp::ScalarMap *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCorrelation_FindPixelCrossCorrelation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarMap * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "3"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPixelCrossCorrelation" "', argument " "3"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::ScalarMap * >(argp3);
  (arg1)->FindPixelCrossCorrelation(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPixelCrossCorrelation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AngularCorrelation_FindPixelCrossCorrelation__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_AngularCorrelation_FindPixelCrossCorrelation__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_FindPixelCrossCorrelation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindPixelCrossCorrelation(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,Stomp::WAngularVector &)\n"
    "    FindPixelCrossCorrelation(Stomp::AngularCorrelation *,Stomp::ScalarMap &,Stomp::ScalarMap &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPairAutoCorrelation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  uint8_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCorrelation_FindPairAutoCorrelation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindPairAutoCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindPairAutoCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPairAutoCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindPairAutoCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPairAutoCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCorrelation_FindPairAutoCorrelation" "', argument " "4"" of type '" "uint8_t""'");
  } 
  arg4 = static_cast< uint8_t >(val4);
  (arg1)->FindPairAutoCorrelation(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPairAutoCorrelation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCorrelation_FindPairAutoCorrelation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindPairAutoCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindPairAutoCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPairAutoCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindPairAutoCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPairAutoCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  (arg1)->FindPairAutoCorrelation(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPairAutoCorrelation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AngularCorrelation_FindPairAutoCorrelation__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCorrelation_FindPairAutoCorrelation__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_FindPairAutoCorrelation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindPairAutoCorrelation(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,uint8_t)\n"
    "    FindPairAutoCorrelation(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPairCrossCorrelation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  Stomp::WAngularVector *arg4 = 0 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCorrelation_FindPairCrossCorrelation",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  (arg1)->FindPairCrossCorrelation(*arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPairCrossCorrelation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::Map *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  Stomp::WAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCorrelation_FindPairCrossCorrelation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_FindPairCrossCorrelation" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  (arg1)->FindPairCrossCorrelation(*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_FindPairCrossCorrelation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_AngularCorrelation_FindPairCrossCorrelation__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCorrelation_FindPairCrossCorrelation__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_FindPairCrossCorrelation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindPairCrossCorrelation(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,Stomp::WAngularVector &,uint8_t)\n"
    "    FindPairCrossCorrelation(Stomp::AngularCorrelation *,Stomp::Map &,Stomp::WAngularVector &,Stomp::WAngularVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_Write",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_Write" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->Write((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_UseOnlyPixels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_UseOnlyPixels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_UseOnlyPixels" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  (arg1)->UseOnlyPixels();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_UseOnlyPairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_UseOnlyPairs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_UseOnlyPairs" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  (arg1)->UseOnlyPairs();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_ThetaMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_ThetaMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_ThetaMin" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_ThetaMin" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (double)(arg1)->ThetaMin(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_ThetaMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_ThetaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_ThetaMin" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (double)(arg1)->ThetaMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_ThetaMin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularCorrelation_ThetaMin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCorrelation_ThetaMin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_ThetaMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ThetaMin(Stomp::AngularCorrelation *,uint32_t)\n"
    "    ThetaMin(Stomp::AngularCorrelation *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_ThetaMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_ThetaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_ThetaMax" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_ThetaMax" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (double)(arg1)->ThetaMax(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_ThetaMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_ThetaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_ThetaMax" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (double)(arg1)->ThetaMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_ThetaMax(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularCorrelation_ThetaMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCorrelation_ThetaMax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_ThetaMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ThetaMax(Stomp::AngularCorrelation *,uint32_t)\n"
    "    ThetaMax(Stomp::AngularCorrelation *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Sin2ThetaMin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_Sin2ThetaMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_Sin2ThetaMin" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_Sin2ThetaMin" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (double)(arg1)->Sin2ThetaMin(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Sin2ThetaMin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_Sin2ThetaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_Sin2ThetaMin" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (double)(arg1)->Sin2ThetaMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Sin2ThetaMin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularCorrelation_Sin2ThetaMin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCorrelation_Sin2ThetaMin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_Sin2ThetaMin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Sin2ThetaMin(Stomp::AngularCorrelation *,uint32_t)\n"
    "    Sin2ThetaMin(Stomp::AngularCorrelation *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Sin2ThetaMax__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_Sin2ThetaMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_Sin2ThetaMax" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_Sin2ThetaMax" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (double)(arg1)->Sin2ThetaMax(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Sin2ThetaMax__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_Sin2ThetaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_Sin2ThetaMax" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (double)(arg1)->Sin2ThetaMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Sin2ThetaMax(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularCorrelation_Sin2ThetaMax__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCorrelation_Sin2ThetaMax__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_Sin2ThetaMax'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Sin2ThetaMax(Stomp::AngularCorrelation *,uint32_t)\n"
    "    Sin2ThetaMax(Stomp::AngularCorrelation *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::ThetaIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_Begin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_Begin" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_Begin" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (arg1)->Begin(arg2);
  resultobj = SWIG_NewPointerObj((new Stomp::ThetaIterator(static_cast< const Stomp::ThetaIterator& >(result))), SWIGTYPE_p_Stomp__ThetaVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::ThetaIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_Begin" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (arg1)->Begin();
  resultobj = SWIG_NewPointerObj((new Stomp::ThetaIterator(static_cast< const Stomp::ThetaIterator& >(result))), SWIGTYPE_p_Stomp__ThetaVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularCorrelation_Begin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCorrelation_Begin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_Begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Begin(Stomp::AngularCorrelation *,uint32_t)\n"
    "    Begin(Stomp::AngularCorrelation *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_End__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::ThetaIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_End",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_End" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_End" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (arg1)->End(arg2);
  resultobj = SWIG_NewPointerObj((new Stomp::ThetaIterator(static_cast< const Stomp::ThetaIterator& >(result))), SWIGTYPE_p_Stomp__ThetaVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_End__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::ThetaIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_End" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (arg1)->End();
  resultobj = SWIG_NewPointerObj((new Stomp::ThetaIterator(static_cast< const Stomp::ThetaIterator& >(result))), SWIGTYPE_p_Stomp__ThetaVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_End(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularCorrelation_End__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCorrelation_End__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_End'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    End(Stomp::AngularCorrelation *,uint32_t)\n"
    "    End(Stomp::AngularCorrelation *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  Stomp::ThetaIterator arg2 ;
  Stomp::ThetaIterator arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::ThetaIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCorrelation_Find",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_Find" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ThetaVector__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_Find" "', argument " "2"" of type '" "Stomp::ThetaIterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_Find" "', argument " "2"" of type '" "Stomp::ThetaIterator""'");
    } else {
      Stomp::ThetaIterator * temp = reinterpret_cast< Stomp::ThetaIterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__ThetaVector__iterator,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCorrelation_Find" "', argument " "3"" of type '" "Stomp::ThetaIterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_Find" "', argument " "3"" of type '" "Stomp::ThetaIterator""'");
    } else {
      Stomp::ThetaIterator * temp = reinterpret_cast< Stomp::ThetaIterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCorrelation_Find" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (arg1)->Find(arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj((new Stomp::ThetaIterator(static_cast< const Stomp::ThetaIterator& >(result))), SWIGTYPE_p_Stomp__ThetaVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_BinIterator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::ThetaIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_BinIterator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_BinIterator" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_BinIterator" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (arg1)->BinIterator(arg2);
  resultobj = SWIG_NewPointerObj((new Stomp::ThetaIterator(static_cast< const Stomp::ThetaIterator& >(result))), SWIGTYPE_p_Stomp__ThetaVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_BinIterator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::ThetaIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_BinIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_BinIterator" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (arg1)->BinIterator();
  resultobj = SWIG_NewPointerObj((new Stomp::ThetaIterator(static_cast< const Stomp::ThetaIterator& >(result))), SWIGTYPE_p_Stomp__ThetaVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_BinIterator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularCorrelation_BinIterator__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCorrelation_BinIterator__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCorrelation_BinIterator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BinIterator(Stomp::AngularCorrelation *,uint8_t)\n"
    "    BinIterator(Stomp::AngularCorrelation *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_NBins(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_NBins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_NBins" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (uint32_t)(arg1)->NBins();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_MinResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_MinResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_MinResolution" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (uint32_t)(arg1)->MinResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_MaxResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation_MaxResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_MaxResolution" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (uint32_t)(arg1)->MaxResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_Covariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCorrelation_Covariance",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_Covariance" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCorrelation_Covariance" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCorrelation_Covariance" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  result = (double)(arg1)->Covariance(arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation_WriteCovariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation_WriteCovariance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation_WriteCovariance" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation_WriteCovariance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCorrelation_WriteCovariance" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->WriteCovariance((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation__begin_Bins(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCorrelation__begin_Bins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation__begin_Bins" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  result = (std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator *)Stomp_AngularCorrelation__begin_Bins(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__const_iterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCorrelation__deref_Bins(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCorrelation *arg1 = (Stomp::AngularCorrelation *) 0 ;
  std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator *arg2 = (std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::AngularBin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCorrelation__deref_Bins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCorrelation__deref_Bins" "', argument " "1"" of type '" "Stomp::AngularCorrelation *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__const_iterator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCorrelation__deref_Bins" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator const *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator * >(argp2);
  result = (Stomp::AngularBin *)Stomp_AngularCorrelation__deref_Bins(arg1,(std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularBin, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AngularCorrelation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__AngularCorrelation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Pixel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Pixel")) SWIG_fail;
  result = (Stomp::Pixel *)new Stomp::Pixel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Pixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pixel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  double arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::Pixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Pixel",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Pixel" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::Pixel *)new Stomp::Pixel(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Pixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pixel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::Pixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Pixel",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::Pixel *)new Stomp::Pixel(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Pixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pixel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::Pixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Pixel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Pixel" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::Pixel *)new Stomp::Pixel(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Pixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pixel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::Pixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Pixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::Pixel *)new Stomp::Pixel(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Pixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pixel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::Pixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Pixel",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Pixel" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Pixel" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (Stomp::Pixel *)new Stomp::Pixel(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Pixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pixel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::Pixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Pixel",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Pixel" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (Stomp::Pixel *)new Stomp::Pixel(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Pixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Pixel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Pixel__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Pixel__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Pixel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Pixel__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Pixel__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Pixel__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Pixel__SWIG_5(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Pixel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::Pixel()\n"
    "    Stomp::Pixel(uint32_t const,uint32_t const,double const)\n"
    "    Stomp::Pixel(uint32_t const,uint32_t const)\n"
    "    Stomp::Pixel(Stomp::AngularCoordinate &,uint32_t const,double const)\n"
    "    Stomp::Pixel(Stomp::AngularCoordinate &,uint32_t const)\n"
    "    Stomp::Pixel(uint32_t const,uint32_t const,uint32_t const,double const)\n"
    "    Stomp::Pixel(uint32_t const,uint32_t const,uint32_t const)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Pixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Pixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Pixel" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel___lt__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel___lt__" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel___lt__" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel___lt__" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)(arg1)->operator <(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel___eq__" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel___eq__" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel___eq__" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)(arg1)->operator ==(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel___ne__" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel___ne__" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel___ne__" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)(arg1)->operator !=(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SetPixnumFromAng(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_SetPixnumFromAng",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SetPixnumFromAng" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_SetPixnumFromAng" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_SetPixnumFromAng" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  (arg1)->SetPixnumFromAng(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SetResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_SetResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SetResolution" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SetResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->SetResolution(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SetLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_SetLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SetLevel" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SetLevel" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  (arg1)->SetLevel(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SetPixnumFromXY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_SetPixnumFromXY",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SetPixnumFromXY" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SetPixnumFromXY" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_SetPixnumFromXY" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->SetPixnumFromXY(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SetWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_SetWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SetWeight" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SetWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Level",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Level" "', argument " "1"" of type '" "Stomp::Pixel const *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint8_t)((Stomp::Pixel const *)arg1)->Level();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Resolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Resolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Resolution" "', argument " "1"" of type '" "Stomp::Pixel const *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint32_t)((Stomp::Pixel const *)arg1)->Resolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_PixelX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_PixelX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_PixelX" "', argument " "1"" of type '" "Stomp::Pixel const *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint32_t)((Stomp::Pixel const *)arg1)->PixelX();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_PixelY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_PixelY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_PixelY" "', argument " "1"" of type '" "Stomp::Pixel const *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint32_t)((Stomp::Pixel const *)arg1)->PixelY();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Weight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Weight" "', argument " "1"" of type '" "Stomp::Pixel const *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)((Stomp::Pixel const *)arg1)->Weight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_ReverseWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_ReverseWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_ReverseWeight" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  (arg1)->ReverseWeight();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_InvertWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_InvertWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_InvertWeight" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  (arg1)->InvertWeight();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SetToSuperPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_SetToSuperPix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SetToSuperPix" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SetToSuperPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (bool)(arg1)->SetToSuperPix(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SetToLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_SetToLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SetToLevel" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SetToLevel" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (bool)(arg1)->SetToLevel(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SubPix__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  uint32_t arg2 ;
  Stomp::PixelVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_SubPix",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SubPix" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SubPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_SubPix" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_SubPix" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  (arg1)->SubPix(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SubPix__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  uint32_t arg2 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Pixel_SubPix",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SubPix" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SubPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubPix" "', argument " "3"" of type '" "uint32_t""'");
    }
    temp3 = static_cast< uint32_t >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubPix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubPix" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubPix" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->SubPix(arg2,*arg3,*arg4,*arg5,*arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SubPix(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Pixel_SubPix__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_unsigned_SS_int(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_unsigned_SS_int(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_unsigned_SS_int(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
            }
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                return _wrap_Pixel_SubPix__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_SubPix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SubPix(Stomp::Pixel *,uint32_t,Stomp::PixelVector &)\n"
    "    SubPix(Stomp::Pixel *,uint32_t,uint32_t &,uint32_t &,uint32_t &,uint32_t &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_CohortPix__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::Pixel *arg3 = 0 ;
  Stomp::Pixel *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_CohortPix",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_CohortPix" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_CohortPix" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_CohortPix" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_CohortPix" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_CohortPix" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::Pixel * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_CohortPix" "', argument " "4"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_CohortPix" "', argument " "4"" of type '" "Stomp::Pixel &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::Pixel * >(argp4);
  (arg1)->CohortPix(*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_FirstCohort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_FirstCohort",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_FirstCohort" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (bool)(arg1)->FirstCohort();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Area__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Area" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->Area();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Area__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Area",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_Area" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  result = (double)Stomp::Pixel::Area(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Area(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Pixel_Area__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Pixel_Area__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_Area'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Area(Stomp::Pixel *)\n"
    "    Stomp::Pixel::Area(uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SuperPix__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_SuperPix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SuperPix" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SuperPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (uint32_t)(arg1)->SuperPix(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Superpixnum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Superpixnum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Superpixnum" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint32_t)(arg1)->Superpixnum();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_HPixnum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_HPixnum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_HPixnum" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint32_t)(arg1)->HPixnum();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Pixnum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Pixnum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Pixnum" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint32_t)(arg1)->Pixnum();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_Contains",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Contains" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_Contains" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_Contains" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_Contains" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  result = (bool)(arg1)->Contains(arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Contains" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_Contains" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_Contains" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)(arg1)->Contains(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Contains__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Contains" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_Contains" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_Contains" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->Contains(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Contains(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Pixel_Contains__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Pixel_Contains__SWIG_2(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Pixel_Contains__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_Contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Contains(Stomp::Pixel *,uint32_t,uint32_t,uint32_t)\n"
    "    Contains(Stomp::Pixel *,Stomp::Pixel &)\n"
    "    Contains(Stomp::Pixel *,Stomp::AngularCoordinate &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WithinBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  Stomp::AngularCoordinate::Sphere arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Pixel_WithinBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WithinBounds" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_WithinBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_WithinBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_WithinBounds" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Pixel_WithinBounds" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Pixel_WithinBounds" "', argument " "6"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg6 = static_cast< Stomp::AngularCoordinate::Sphere >(val6);
  result = (bool)(arg1)->WithinBounds(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IntersectsBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  Stomp::AngularCoordinate::Sphere arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Pixel_IntersectsBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IntersectsBounds" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_IntersectsBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_IntersectsBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_IntersectsBounds" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Pixel_IntersectsBounds" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Pixel_IntersectsBounds" "', argument " "6"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg6 = static_cast< Stomp::AngularCoordinate::Sphere >(val6);
  result = (bool)(arg1)->IntersectsBounds(arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WithinRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  Stomp::PixelVector *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_WithinRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WithinRadius" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_WithinRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_WithinRadius" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinRadius" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_WithinRadius" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->WithinRadius(arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WithinRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  Stomp::PixelVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_WithinRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WithinRadius" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_WithinRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_WithinRadius" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinRadius" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  (arg1)->WithinRadius(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WithinRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Pixel_WithinRadius__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Pixel_WithinRadius__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_WithinRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    WithinRadius(Stomp::Pixel *,double,Stomp::PixelVector &,bool)\n"
    "    WithinRadius(Stomp::Pixel *,double,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WithinAnnulus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  double arg3 ;
  Stomp::PixelVector *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Pixel_WithinAnnulus",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_WithinAnnulus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_WithinAnnulus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_WithinAnnulus" "', argument " "4"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "4"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::PixelVector * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Pixel_WithinAnnulus" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->WithinAnnulus(arg2,arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WithinAnnulus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  double arg3 ;
  Stomp::PixelVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_WithinAnnulus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_WithinAnnulus" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_WithinAnnulus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_WithinAnnulus" "', argument " "4"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "4"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::PixelVector * >(argp4);
  (arg1)->WithinAnnulus(arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WithinAnnulus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularBin *arg2 = 0 ;
  Stomp::PixelVector *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_WithinAnnulus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_WithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularBin * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_WithinAnnulus" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->WithinAnnulus(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WithinAnnulus__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularBin *arg2 = 0 ;
  Stomp::PixelVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_WithinAnnulus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_WithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularBin * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  (arg1)->WithinAnnulus(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WithinAnnulus__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  Stomp::AngularBin *arg3 = 0 ;
  Stomp::PixelVector *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Pixel_WithinAnnulus",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WithinAnnulus" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_WithinAnnulus" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_WithinAnnulus" "', argument " "4"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "4"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::PixelVector * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Pixel_WithinAnnulus" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  Stomp::Pixel::WithinAnnulus(*arg1,arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WithinAnnulus__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  Stomp::AngularBin *arg3 = 0 ;
  Stomp::PixelVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_WithinAnnulus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WithinAnnulus" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_WithinAnnulus" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_WithinAnnulus" "', argument " "4"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WithinAnnulus" "', argument " "4"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::PixelVector * >(argp4);
  Stomp::Pixel::WithinAnnulus(*arg1,arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WithinAnnulus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Pixel_WithinAnnulus__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Pixel_WithinAnnulus__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Pixel_WithinAnnulus__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Pixel_WithinAnnulus__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Pixel_WithinAnnulus__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Pixel_WithinAnnulus__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_WithinAnnulus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    WithinAnnulus(Stomp::Pixel *,double,double,Stomp::PixelVector &,bool)\n"
    "    WithinAnnulus(Stomp::Pixel *,double,double,Stomp::PixelVector &)\n"
    "    WithinAnnulus(Stomp::Pixel *,Stomp::AngularBin &,Stomp::PixelVector &,bool)\n"
    "    WithinAnnulus(Stomp::Pixel *,Stomp::AngularBin &,Stomp::PixelVector &)\n"
    "    WithinAnnulus(Stomp::AngularCoordinate &,uint32_t,Stomp::AngularBin &,Stomp::PixelVector &,bool)\n"
    "    Stomp::Pixel::WithinAnnulus(Stomp::AngularCoordinate &,uint32_t,Stomp::AngularBin &,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_BoundingRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  Stomp::PixelVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_BoundingRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_BoundingRadius" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_BoundingRadius" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_BoundingRadius" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_BoundingRadius" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  (arg1)->BoundingRadius(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_BoundingRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::PixelVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_BoundingRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_BoundingRadius" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_BoundingRadius" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_BoundingRadius" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_BoundingRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_BoundingRadius" "', argument " "4"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_BoundingRadius" "', argument " "4"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::PixelVector * >(argp4);
  (arg1)->BoundingRadius(*arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_BoundingRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Pixel_BoundingRadius__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Pixel_BoundingRadius__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_BoundingRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    BoundingRadius(Stomp::Pixel *,double,Stomp::PixelVector &)\n"
    "    BoundingRadius(Stomp::Pixel *,Stomp::AngularCoordinate &,double,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "uint32_t""'");
    }
    temp3 = static_cast< uint32_t >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Pixel_XYBounds" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->XYBounds(arg2,*arg3,*arg4,*arg5,*arg6,arg7);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "uint32_t""'");
    }
    temp3 = static_cast< uint32_t >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->XYBounds(arg2,*arg3,*arg4,*arg5,*arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg3 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp4);
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Pixel_XYBounds" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  (arg1)->XYBounds(arg2,*arg3,*arg4,*arg5,*arg6,arg7);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg3 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp4);
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->XYBounds(arg2,*arg3,*arg4,*arg5,*arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Pixel_XYBounds" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  (arg1)->XYBounds(*arg2,arg3,*arg4,*arg5,*arg6,*arg7,arg8);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->XYBounds(*arg2,arg3,*arg4,*arg5,*arg6,*arg7);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg4 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp5);
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Pixel_XYBounds" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  (arg1)->XYBounds(*arg2,arg3,*arg4,*arg5,*arg6,*arg7,arg8);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg4 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp5);
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->XYBounds(*arg2,arg3,*arg4,*arg5,*arg6,*arg7);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  double arg3 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Pixel_XYBounds" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  Stomp::Pixel::XYBounds(*arg1,arg2,arg3,*arg4,*arg5,*arg6,*arg7,arg8);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  double arg3 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::XYBounds(*arg1,arg2,arg3,*arg4,*arg5,*arg6,*arg7);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  double arg3 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg4 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp5);
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Pixel_XYBounds" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  Stomp::Pixel::XYBounds(*arg1,arg2,arg3,*arg4,*arg5,*arg6,*arg7,arg8);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  double arg3 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg4 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Pixel_XYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_XYBounds" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_XYBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_XYBounds" "', argument " "5"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp5);
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XYBounds" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::XYBounds(*arg1,arg2,arg3,*arg4,*arg5,*arg6,*arg7);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XYBounds(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_unsigned_SS_int(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
            }
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                return _wrap_Pixel_XYBounds__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_unsigned_SS_int(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_unsigned_SS_int(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_unsigned_SS_int(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
            }
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                return _wrap_Pixel_XYBounds__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                void *ptr = 0;
                int res = SWIG_AsVal_unsigned_SS_int(argv[6], 0);
                _v = SWIG_CheckState(res);
                if (!_v) {
                  _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[6],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
                }
                if (_v) {
                  return _wrap_Pixel_XYBounds__SWIG_7(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_unsigned_SS_int(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_unsigned_SS_int(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
            }
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                void *ptr = 0;
                int res = SWIG_AsVal_unsigned_SS_int(argv[6], 0);
                _v = SWIG_CheckState(res);
                if (!_v) {
                  _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[6],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
                }
                if (_v) {
                  return _wrap_Pixel_XYBounds__SWIG_5(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_unsigned_SS_int(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
            }
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Pixel_XYBounds__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_unsigned_SS_int(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_unsigned_SS_int(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_unsigned_SS_int(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
            }
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Pixel_XYBounds__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                void *ptr = 0;
                int res = SWIG_AsVal_unsigned_SS_int(argv[6], 0);
                _v = SWIG_CheckState(res);
                if (!_v) {
                  _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[6],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
                }
                if (_v) {
                  return _wrap_Pixel_XYBounds__SWIG_11(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_unsigned_SS_int(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_unsigned_SS_int(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
            }
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                void *ptr = 0;
                int res = SWIG_AsVal_unsigned_SS_int(argv[6], 0);
                _v = SWIG_CheckState(res);
                if (!_v) {
                  _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[6],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
                }
                if (_v) {
                  return _wrap_Pixel_XYBounds__SWIG_9(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                void *ptr = 0;
                int res = SWIG_AsVal_unsigned_SS_int(argv[6], 0);
                _v = SWIG_CheckState(res);
                if (!_v) {
                  _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[6],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_Pixel_XYBounds__SWIG_10(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                void *ptr = 0;
                int res = SWIG_AsVal_unsigned_SS_int(argv[6], 0);
                _v = SWIG_CheckState(res);
                if (!_v) {
                  _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[6],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_Pixel_XYBounds__SWIG_6(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_unsigned_SS_int(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_unsigned_SS_int(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
            }
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                void *ptr = 0;
                int res = SWIG_AsVal_unsigned_SS_int(argv[6], 0);
                _v = SWIG_CheckState(res);
                if (!_v) {
                  _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[6],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_Pixel_XYBounds__SWIG_8(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_unsigned_SS_int(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_unsigned_SS_int(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
            }
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_unsigned_SS_int(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
              }
              if (_v) {
                void *ptr = 0;
                int res = SWIG_AsVal_unsigned_SS_int(argv[6], 0);
                _v = SWIG_CheckState(res);
                if (!_v) {
                  _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[6],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_Pixel_XYBounds__SWIG_4(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_XYBounds'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    XYBounds(Stomp::Pixel *,double,uint32_t &,uint32_t &,uint32_t &,uint32_t &,bool)\n"
    "    XYBounds(Stomp::Pixel *,double,uint32_t &,uint32_t &,uint32_t &,uint32_t &)\n"
    "    XYBounds(Stomp::Pixel *,double,std::vector< uint32_t,std::allocator< uint32_t > > &,std::vector< uint32_t,std::allocator< uint32_t > > &,uint32_t &,uint32_t &,bool)\n"
    "    XYBounds(Stomp::Pixel *,double,std::vector< uint32_t,std::allocator< uint32_t > > &,std::vector< uint32_t,std::allocator< uint32_t > > &,uint32_t &,uint32_t &)\n"
    "    XYBounds(Stomp::Pixel *,Stomp::AngularCoordinate &,double,uint32_t &,uint32_t &,uint32_t &,uint32_t &,bool)\n"
    "    XYBounds(Stomp::Pixel *,Stomp::AngularCoordinate &,double,uint32_t &,uint32_t &,uint32_t &,uint32_t &)\n"
    "    XYBounds(Stomp::Pixel *,Stomp::AngularCoordinate &,double,std::vector< uint32_t,std::allocator< uint32_t > > &,std::vector< uint32_t,std::allocator< uint32_t > > &,uint32_t &,uint32_t &,bool)\n"
    "    XYBounds(Stomp::Pixel *,Stomp::AngularCoordinate &,double,std::vector< uint32_t,std::allocator< uint32_t > > &,std::vector< uint32_t,std::allocator< uint32_t > > &,uint32_t &,uint32_t &)\n"
    "    XYBounds(Stomp::AngularCoordinate &,uint32_t,double,uint32_t &,uint32_t &,uint32_t &,uint32_t &,bool)\n"
    "    XYBounds(Stomp::AngularCoordinate &,uint32_t,double,uint32_t &,uint32_t &,uint32_t &,uint32_t &)\n"
    "    XYBounds(Stomp::AngularCoordinate &,uint32_t,double,std::vector< uint32_t,std::allocator< uint32_t > > &,std::vector< uint32_t,std::allocator< uint32_t > > &,uint32_t &,uint32_t &,bool)\n"
    "    Stomp::Pixel::XYBounds(Stomp::AngularCoordinate &,uint32_t,double,std::vector< uint32_t,std::allocator< uint32_t > > &,std::vector< uint32_t,std::allocator< uint32_t > > &,uint32_t &,uint32_t &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_EtaStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_EtaStep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_EtaStep" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_EtaStep" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (uint8_t)(arg1)->EtaStep(arg2);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_NearEdgeDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_NearEdgeDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_NearEdgeDistance" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_NearEdgeDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_NearEdgeDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (double)(arg1)->NearEdgeDistance(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_FarEdgeDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_FarEdgeDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_FarEdgeDistance" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_FarEdgeDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_FarEdgeDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (double)(arg1)->FarEdgeDistance(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_NearCornerDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_NearCornerDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_NearCornerDistance" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_NearCornerDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_NearCornerDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (double)(arg1)->NearCornerDistance(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_FarCornerDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_FarCornerDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_FarCornerDistance" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_FarCornerDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_FarCornerDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (double)(arg1)->FarCornerDistance(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_EdgeDistances(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_EdgeDistances",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_EdgeDistances" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_EdgeDistances" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_EdgeDistances" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_EdgeDistances" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_EdgeDistances" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  result = (bool)(arg1)->EdgeDistances(*arg2,*arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinRadius__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_IsWithinRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinRadius" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinRadius" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinRadius" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_IsWithinRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_IsWithinRadius" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->IsWithinRadius(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinRadius__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_IsWithinRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinRadius" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinRadius" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinRadius" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_IsWithinRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->IsWithinRadius(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinRadius__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_IsWithinRadius",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinRadius" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinRadius" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinRadius" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_IsWithinRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_IsWithinRadius" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->IsWithinRadius(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinRadius__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_IsWithinRadius",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinRadius" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinRadius" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinRadius" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_IsWithinRadius" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->IsWithinRadius(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinRadius(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Pixel_IsWithinRadius__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Pixel_IsWithinRadius__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Pixel_IsWithinRadius__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Pixel_IsWithinRadius__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_IsWithinRadius'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IsWithinRadius(Stomp::Pixel *,Stomp::AngularCoordinate &,double,bool)\n"
    "    IsWithinRadius(Stomp::Pixel *,Stomp::AngularCoordinate &,double)\n"
    "    IsWithinRadius(Stomp::Pixel *,Stomp::Pixel &,double,bool)\n"
    "    IsWithinRadius(Stomp::Pixel *,Stomp::Pixel &,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinAnnulus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Pixel_IsWithinAnnulus",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_IsWithinAnnulus" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Pixel_IsWithinAnnulus" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (bool)(arg1)->IsWithinAnnulus(*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinAnnulus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_IsWithinAnnulus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_IsWithinAnnulus" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->IsWithinAnnulus(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinAnnulus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Pixel_IsWithinAnnulus",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_IsWithinAnnulus" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Pixel_IsWithinAnnulus" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (bool)(arg1)->IsWithinAnnulus(*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinAnnulus__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_IsWithinAnnulus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_IsWithinAnnulus" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->IsWithinAnnulus(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinAnnulus__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_IsWithinAnnulus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_IsWithinAnnulus" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->IsWithinAnnulus(*arg2,*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinAnnulus__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_IsWithinAnnulus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (bool)(arg1)->IsWithinAnnulus(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinAnnulus__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_IsWithinAnnulus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_IsWithinAnnulus" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->IsWithinAnnulus(*arg2,*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinAnnulus__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_IsWithinAnnulus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IsWithinAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IsWithinAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (bool)(arg1)->IsWithinAnnulus(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IsWithinAnnulus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Pixel_IsWithinAnnulus__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Pixel_IsWithinAnnulus__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Pixel_IsWithinAnnulus__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Pixel_IsWithinAnnulus__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Pixel_IsWithinAnnulus__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Pixel_IsWithinAnnulus__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Pixel_IsWithinAnnulus__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Pixel_IsWithinAnnulus__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_IsWithinAnnulus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IsWithinAnnulus(Stomp::Pixel *,Stomp::AngularCoordinate &,double,double,bool)\n"
    "    IsWithinAnnulus(Stomp::Pixel *,Stomp::AngularCoordinate &,double,double)\n"
    "    IsWithinAnnulus(Stomp::Pixel *,Stomp::Pixel &,double,double,bool)\n"
    "    IsWithinAnnulus(Stomp::Pixel *,Stomp::Pixel &,double,double)\n"
    "    IsWithinAnnulus(Stomp::Pixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &,bool)\n"
    "    IsWithinAnnulus(Stomp::Pixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &)\n"
    "    IsWithinAnnulus(Stomp::Pixel *,Stomp::Pixel &,Stomp::AngularBin &,bool)\n"
    "    IsWithinAnnulus(Stomp::Pixel *,Stomp::Pixel &,Stomp::AngularBin &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IntersectsAnnulus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_IntersectsAnnulus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IntersectsAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IntersectsAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IntersectsAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_IntersectsAnnulus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_IntersectsAnnulus" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (int8_t)(arg1)->IntersectsAnnulus(*arg2,arg3,arg4);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IntersectsAnnulus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_IntersectsAnnulus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IntersectsAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IntersectsAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IntersectsAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_IntersectsAnnulus" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_IntersectsAnnulus" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (int8_t)(arg1)->IntersectsAnnulus(*arg2,arg3,arg4);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IntersectsAnnulus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_IntersectsAnnulus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IntersectsAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IntersectsAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IntersectsAnnulus" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_IntersectsAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IntersectsAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (int8_t)(arg1)->IntersectsAnnulus(*arg2,*arg3);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IntersectsAnnulus__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_IntersectsAnnulus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_IntersectsAnnulus" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_IntersectsAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IntersectsAnnulus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_IntersectsAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_IntersectsAnnulus" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (int8_t)(arg1)->IntersectsAnnulus(*arg2,*arg3);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_IntersectsAnnulus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Pixel_IntersectsAnnulus__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Pixel_IntersectsAnnulus__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Pixel_IntersectsAnnulus__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Pixel_IntersectsAnnulus__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_IntersectsAnnulus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IntersectsAnnulus(Stomp::Pixel *,Stomp::AngularCoordinate &,double,double)\n"
    "    IntersectsAnnulus(Stomp::Pixel *,Stomp::Pixel &,double,double)\n"
    "    IntersectsAnnulus(Stomp::Pixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &)\n"
    "    IntersectsAnnulus(Stomp::Pixel *,Stomp::Pixel &,Stomp::AngularBin &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Stripe__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_Stripe",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Stripe" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_Stripe" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (uint32_t)(arg1)->Stripe(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Stripe__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Stripe",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Stripe" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint32_t)(arg1)->Stripe();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Stripe(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Pixel_Stripe__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Pixel_Stripe__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_Stripe'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stripe(Stomp::Pixel *,uint32_t)\n"
    "    Stripe(Stomp::Pixel *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_RA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_RA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_RA" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->RA();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_DEC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_DEC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_DEC" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->DEC();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_GalLon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_GalLon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_GalLon" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->GalLon();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_GalLat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_GalLat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_GalLat" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->GalLat();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Ang__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_Ang",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Ang" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_Ang" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_Ang" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  (arg1)->Ang(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Ang__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::AngularCoordinate result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Ang",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Ang" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (arg1)->Ang();
  resultobj = SWIG_NewPointerObj((new Stomp::AngularCoordinate(static_cast< const Stomp::AngularCoordinate& >(result))), SWIGTYPE_p_Stomp__AngularCoordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Ang(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Pixel_Ang__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Pixel_Ang__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_Ang'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ang(Stomp::Pixel *,Stomp::AngularCoordinate &)\n"
    "    Ang(Stomp::Pixel *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Lambda(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Lambda",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Lambda" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->Lambda();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Eta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Eta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Eta" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->Eta();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereX" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereX();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereY" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereY();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereZ" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_LambdaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_LambdaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_LambdaMin" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->LambdaMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_LambdaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_LambdaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_LambdaMax" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->LambdaMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_EtaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_EtaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_EtaMin" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->EtaMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_EtaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_EtaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_EtaMax" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->EtaMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_EtaMaxContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_EtaMaxContinuous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_EtaMaxContinuous" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->EtaMaxContinuous();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SurveyContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_SurveyContinuous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SurveyContinuous" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (bool)(arg1)->SurveyContinuous();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_DECMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_DECMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_DECMin" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->DECMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_DECMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_DECMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_DECMax" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->DECMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_RAMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_RAMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_RAMin" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->RAMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_RAMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_RAMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_RAMax" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->RAMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_RAMaxContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_RAMaxContinuous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_RAMaxContinuous" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->RAMaxContinuous();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_EquatorialContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_EquatorialContinuous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_EquatorialContinuous" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (bool)(arg1)->EquatorialContinuous();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_GalLatMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_GalLatMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_GalLatMin" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->GalLatMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_GalLatMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_GalLatMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_GalLatMax" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->GalLatMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_GalLonMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_GalLonMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_GalLonMin" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->GalLonMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_GalLonMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_GalLonMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_GalLonMax" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->GalLonMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_GalLonMaxContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_GalLonMaxContinuous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_GalLonMaxContinuous" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->GalLonMaxContinuous();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_GalacticContinuous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_GalacticContinuous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_GalacticContinuous" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (bool)(arg1)->GalacticContinuous();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_ContinuousBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularCoordinate::Sphere arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_ContinuousBounds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_ContinuousBounds" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_ContinuousBounds" "', argument " "2"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg2 = static_cast< Stomp::AngularCoordinate::Sphere >(val2);
  result = (bool)(arg1)->ContinuousBounds(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereX_UL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereX_UL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereX_UL" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_UL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereY_UL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereY_UL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereY_UL" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_UL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereZ_UL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereZ_UL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereZ_UL" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_UL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereX_UR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereX_UR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereX_UR" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_UR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereY_UR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereY_UR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereY_UR" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_UR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereZ_UR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereZ_UR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereZ_UR" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_UR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereX_LL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereX_LL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereX_LL" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_LL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereY_LL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereY_LL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereY_LL" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_LL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereZ_LL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereZ_LL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereZ_LL" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_LL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereX_LR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereX_LR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereX_LR" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_LR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereY_LR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereY_LR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereY_LR" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_LR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_UnitSphereZ_LR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_UnitSphereZ_LR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_UnitSphereZ_LR" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_LR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Iterate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_Iterate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Iterate" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_Iterate" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->Iterate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Iterate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_Iterate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_Iterate" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  (arg1)->Iterate();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Iterate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Pixel_Iterate__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Pixel_Iterate__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_Iterate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Iterate(Stomp::Pixel *,bool)\n"
    "    Iterate(Stomp::Pixel *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_PixelX0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_PixelX0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_PixelX0" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint32_t)(arg1)->PixelX0();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_PixelY0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_PixelY0",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_PixelY0" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint32_t)(arg1)->PixelY0();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_PixelX1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_PixelX1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_PixelX1" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint32_t)(arg1)->PixelX1();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_PixelY1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_PixelY1",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_PixelY1" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  result = (uint32_t)(arg1)->PixelY1();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_GenerateRandomPoints__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_GenerateRandomPoints",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_GenerateRandomPoints" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->GenerateRandomPoints(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_GenerateRandomPoints__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = (Stomp::Pixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_GenerateRandomPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Pixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Pixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  (arg1)->GenerateRandomPoints(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_GenerateRandomPoints(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Pixel_GenerateRandomPoints__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Pixel_GenerateRandomPoints__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_GenerateRandomPoints'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GenerateRandomPoints(Stomp::Pixel *,Stomp::AngularVector &,uint32_t)\n"
    "    GenerateRandomPoints(Stomp::Pixel *,Stomp::AngularVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_ResolutionToLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_ResolutionToLevel",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_ResolutionToLevel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  result = (uint8_t)Stomp::Pixel::ResolutionToLevel(arg1);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_LevelToResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint8_t arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_LevelToResolution",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_char(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_LevelToResolution" "', argument " "1"" of type '" "uint8_t""'");
  } 
  arg1 = static_cast< uint8_t >(val1);
  result = (uint32_t)Stomp::Pixel::LevelToResolution(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Ang2Pix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_Ang2Pix",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_Ang2Pix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_Ang2Pix" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_Ang2Pix" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_Ang2Pix" "', argument " "3"" of type '" "uint32_t""'");
    }
    temp3 = static_cast< uint32_t >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::Ang2Pix(arg1,*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Pix2Ang(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  Stomp::AngularCoordinate *arg3 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_Pix2Ang",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_Pix2Ang" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_Pix2Ang" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Pixel_Pix2Ang" "', argument " "3"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_Pix2Ang" "', argument " "3"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCoordinate * >(argp3);
  Stomp::Pixel::Pix2Ang(arg1,arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Pix2HPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_Pix2HPix",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_Pix2HPix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_Pix2HPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_Pix2HPix" "', argument " "3"" of type '" "uint32_t""'");
    }
    temp3 = static_cast< uint32_t >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_Pix2HPix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::Pix2HPix(arg1,arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_HPix2Pix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *arg4 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_HPix2Pix",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_HPix2Pix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_HPix2Pix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_HPix2Pix" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_HPix2Pix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::HPix2Pix(arg1,arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SuperPix__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *arg4 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_SuperPix",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_SuperPix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SuperPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_SuperPix" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SuperPix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::SuperPix(arg1,arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SuperPix(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Pixel_SuperPix__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_unsigned_SS_int(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
          }
          if (_v) {
            return _wrap_Pixel_SuperPix__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_SuperPix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SuperPix(Stomp::Pixel *,uint32_t)\n"
    "    Stomp::Pixel::SuperPix(uint32_t,uint32_t,uint32_t,uint32_t &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SubPixels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Pixel_SubPixels",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_SubPixels" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SubPixels" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_SubPixels" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubPixels" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubPixels" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubPixels" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubPixels" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::SubPixels(arg1,arg2,arg3,*arg4,*arg5,*arg6,*arg7);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_NextSubPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Pixel_NextSubPix",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_NextSubPix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_NextSubPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_NextSubPix" "', argument " "3"" of type '" "uint32_t""'");
    }
    temp3 = static_cast< uint32_t >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_NextSubPix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_NextSubPix" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_NextSubPix" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::NextSubPix(arg1,arg2,*arg3,*arg4,*arg5,*arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_AreaIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  uint32_t *arg8 = 0 ;
  uint32_t *arg9 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  uint32_t temp8 ;
  int res8 = 0 ;
  uint32_t temp9 ;
  int res9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Pixel_AreaIndex",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_AreaIndex" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_AreaIndex" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_AreaIndex" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_AreaIndex" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Pixel_AreaIndex" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_AreaIndex" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_AreaIndex" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res8 = SWIG_ConvertPtr(obj7,SWIG_as_voidptrptr(&arg8),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj7, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_AreaIndex" "', argument " "8"" of type '" "uint32_t""'");
    }
    temp8 = static_cast< uint32_t >(val);
    arg8 = &temp8;
    res8 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res9 = SWIG_ConvertPtr(obj8,SWIG_as_voidptrptr(&arg9),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj8, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_AreaIndex" "', argument " "9"" of type '" "uint32_t""'");
    }
    temp9 = static_cast< uint32_t >(val);
    arg9 = &temp9;
    res9 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::AreaIndex(arg1,arg2,arg3,arg4,arg5,*arg6,*arg7,*arg8,*arg9);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  if (SWIG_IsNewObj(res9)) delete arg9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_PixelBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  double temp5 ;
  int res5 = 0 ;
  double temp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Pixel_PixelBound",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_PixelBound" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_PixelBound" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_PixelBound" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_PixelBound" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_PixelBound" "', argument " "5"" of type '" "double""'");
    }
    temp5 = static_cast< double >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_PixelBound" "', argument " "6"" of type '" "double""'");
    }
    temp6 = static_cast< double >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::PixelBound(arg1,arg2,*arg3,*arg4,*arg5,*arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_CohortPix__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Pixel_CohortPix",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_CohortPix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_CohortPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_CohortPix" "', argument " "3"" of type '" "uint32_t""'");
    }
    temp3 = static_cast< uint32_t >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_CohortPix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_CohortPix" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::CohortPix(arg1,arg2,*arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_CohortPix(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Pixel_CohortPix__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_unsigned_SS_int(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_unsigned_SS_int(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_unsigned_SS_int(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_unsigned_int,0))));
            }
            if (_v) {
              return _wrap_Pixel_CohortPix__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_CohortPix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CohortPix(Stomp::Pixel *,Stomp::Pixel &,Stomp::Pixel &,Stomp::Pixel &)\n"
    "    Stomp::Pixel::CohortPix(uint32_t,uint32_t,uint32_t &,uint32_t &,uint32_t &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_PixelArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_PixelArea",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_PixelArea" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  result = (double)Stomp::Pixel::PixelArea(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Pix2EtaStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  double arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pixel_Pix2EtaStep",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_Pix2EtaStep" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_Pix2EtaStep" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_Pix2EtaStep" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (uint8_t)Stomp::Pixel::Pix2EtaStep(arg1,arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Ang2HPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_Ang2HPix",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_Ang2HPix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_Ang2HPix" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_Ang2HPix" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_Ang2HPix" "', argument " "3"" of type '" "uint32_t""'");
    }
    temp3 = static_cast< uint32_t >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_Ang2HPix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::Ang2HPix(arg1,*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_HPix2Ang(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  Stomp::AngularCoordinate *arg4 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_HPix2Ang",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_HPix2Ang" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_HPix2Ang" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_HPix2Ang" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Pixel_HPix2Ang" "', argument " "4"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_HPix2Ang" "', argument " "4"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularCoordinate * >(argp4);
  Stomp::Pixel::HPix2Ang(arg1,arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XY2HPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Pixel_XY2HPix",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_XY2HPix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_XY2HPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_XY2HPix" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XY2HPix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XY2HPix" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::XY2HPix(arg1,arg2,arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_HPix2XY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Pixel_HPix2XY",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_HPix2XY" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_HPix2XY" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_HPix2XY" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_HPix2XY" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_HPix2XY" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::HPix2XY(arg1,arg2,arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SuperHPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *arg4 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_SuperHPix",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_SuperHPix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SuperHPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_SuperHPix" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SuperHPix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::SuperHPix(arg1,arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_NextSubHPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Pixel_NextSubHPix",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_NextSubHPix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_NextSubHPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_NextSubHPix" "', argument " "3"" of type '" "uint32_t""'");
    }
    temp3 = static_cast< uint32_t >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_NextSubHPix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_NextSubHPix" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_NextSubHPix" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::NextSubHPix(arg1,arg2,*arg3,*arg4,*arg5,*arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SubHPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  uint32_t *arg8 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  uint32_t temp8 ;
  int res8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Pixel_SubHPix",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_SubHPix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_SubHPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_SubHPix" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_SubHPix" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubHPix" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubHPix" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubHPix" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res8 = SWIG_ConvertPtr(obj7,SWIG_as_voidptrptr(&arg8),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj7, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_SubHPix" "', argument " "8"" of type '" "uint32_t""'");
    }
    temp8 = static_cast< uint32_t >(val);
    arg8 = &temp8;
    res8 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::SubHPix(arg1,arg2,arg3,arg4,*arg5,*arg6,*arg7,*arg8);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  if (SWIG_IsNewObj(res8)) delete arg8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_HPixelBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  double temp5 ;
  int res5 = 0 ;
  double temp6 ;
  int res6 = 0 ;
  double temp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Pixel_HPixelBound",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_HPixelBound" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_HPixelBound" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_HPixelBound" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_HPixelBound" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_HPixelBound" "', argument " "5"" of type '" "double""'");
    }
    temp5 = static_cast< double >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_HPixelBound" "', argument " "6"" of type '" "double""'");
    }
    temp6 = static_cast< double >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_HPixelBound" "', argument " "7"" of type '" "double""'");
    }
    temp7 = static_cast< double >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::HPixelBound(arg1,arg2,arg3,*arg4,*arg5,*arg6,*arg7);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_CohortHPix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Pixel_CohortHPix",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_CohortHPix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_CohortHPix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_CohortHPix" "', argument " "3"" of type '" "uint32_t""'");
    }
    temp3 = static_cast< uint32_t >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_CohortHPix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_CohortHPix" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::CohortHPix(arg1,arg2,*arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_HPixelArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_HPixelArea",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_HPixelArea" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  result = (double)Stomp::Pixel::HPixelArea(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_HPix2EtaStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_HPix2EtaStep",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_HPix2EtaStep" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_HPix2EtaStep" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_HPix2EtaStep" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Pixel_HPix2EtaStep" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (uint8_t)Stomp::Pixel::HPix2EtaStep(arg1,arg2,arg3,arg4);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_XY2Pix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t *arg4 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_XY2Pix",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_XY2Pix" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_XY2Pix" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pixel_XY2Pix" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_XY2Pix" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::XY2Pix(arg1,arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_Pix2XY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Pixel_Pix2XY",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pixel_Pix2XY" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_Pix2XY" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_Pix2XY" "', argument " "3"" of type '" "uint32_t""'");
    }
    temp3 = static_cast< uint32_t >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Pixel_Pix2XY" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::Pixel::Pix2XY(arg1,arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_LocalOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel arg1 ;
  Stomp::Pixel arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_LocalOrder",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Pixel,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_LocalOrder" "', argument " "1"" of type '" "Stomp::Pixel const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_LocalOrder" "', argument " "1"" of type '" "Stomp::Pixel const""'");
    } else {
      Stomp::Pixel * temp = reinterpret_cast< Stomp::Pixel * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_LocalOrder" "', argument " "2"" of type '" "Stomp::Pixel const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_LocalOrder" "', argument " "2"" of type '" "Stomp::Pixel const""'");
    } else {
      Stomp::Pixel * temp = reinterpret_cast< Stomp::Pixel * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)Stomp::Pixel::LocalOrder(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SuperPixelBasedOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel arg1 ;
  Stomp::Pixel arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_SuperPixelBasedOrder",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Pixel,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SuperPixelBasedOrder" "', argument " "1"" of type '" "Stomp::Pixel const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_SuperPixelBasedOrder" "', argument " "1"" of type '" "Stomp::Pixel const""'");
    } else {
      Stomp::Pixel * temp = reinterpret_cast< Stomp::Pixel * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_SuperPixelBasedOrder" "', argument " "2"" of type '" "Stomp::Pixel const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_SuperPixelBasedOrder" "', argument " "2"" of type '" "Stomp::Pixel const""'");
    } else {
      Stomp::Pixel * temp = reinterpret_cast< Stomp::Pixel * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)Stomp::Pixel::SuperPixelBasedOrder(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_SuperPixelOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel arg1 ;
  Stomp::Pixel arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_SuperPixelOrder",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Pixel,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_SuperPixelOrder" "', argument " "1"" of type '" "Stomp::Pixel const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_SuperPixelOrder" "', argument " "1"" of type '" "Stomp::Pixel const""'");
    } else {
      Stomp::Pixel * temp = reinterpret_cast< Stomp::Pixel * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_SuperPixelOrder" "', argument " "2"" of type '" "Stomp::Pixel const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_SuperPixelOrder" "', argument " "2"" of type '" "Stomp::Pixel const""'");
    } else {
      Stomp::Pixel * temp = reinterpret_cast< Stomp::Pixel * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)Stomp::Pixel::SuperPixelOrder(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WeightedOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel arg1 ;
  Stomp::Pixel arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_WeightedOrder",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Pixel,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WeightedOrder" "', argument " "1"" of type '" "Stomp::Pixel""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WeightedOrder" "', argument " "1"" of type '" "Stomp::Pixel""'");
    } else {
      Stomp::Pixel * temp = reinterpret_cast< Stomp::Pixel * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_WeightedOrder" "', argument " "2"" of type '" "Stomp::Pixel""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WeightedOrder" "', argument " "2"" of type '" "Stomp::Pixel""'");
    } else {
      Stomp::Pixel * temp = reinterpret_cast< Stomp::Pixel * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (bool)Stomp::Pixel::WeightedOrder(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WeightMatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_WeightMatch",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WeightMatch" "', argument " "1"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WeightMatch" "', argument " "1"" of type '" "Stomp::Pixel &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_WeightMatch" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WeightMatch" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)Stomp::Pixel::WeightMatch(*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_WeightedPixelMatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_WeightedPixelMatch",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_WeightedPixelMatch" "', argument " "1"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WeightedPixelMatch" "', argument " "1"" of type '" "Stomp::Pixel &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_WeightedPixelMatch" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_WeightedPixelMatch" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)Stomp::Pixel::WeightedPixelMatch(*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_PixelMatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Pixel *arg1 = 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_PixelMatch",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_PixelMatch" "', argument " "1"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_PixelMatch" "', argument " "1"" of type '" "Stomp::Pixel &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Pixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_PixelMatch" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_PixelMatch" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)Stomp::Pixel::PixelMatch(*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_ResolveSuperPixel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PixelVector *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_ResolveSuperPixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_ResolveSuperPixel" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_ResolveSuperPixel" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PixelVector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_ResolveSuperPixel" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Stomp::Pixel::ResolveSuperPixel(*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_ResolveSuperPixel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PixelVector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_ResolveSuperPixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_ResolveSuperPixel" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_ResolveSuperPixel" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PixelVector * >(argp1);
  Stomp::Pixel::ResolveSuperPixel(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_ResolveSuperPixel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Pixel_ResolveSuperPixel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Pixel_ResolveSuperPixel__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_ResolveSuperPixel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ResolveSuperPixel(Stomp::PixelVector &,bool)\n"
    "    Stomp::Pixel::ResolveSuperPixel(Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_ResolvePixel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PixelVector *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_ResolvePixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_ResolvePixel" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_ResolvePixel" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PixelVector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pixel_ResolvePixel" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  Stomp::Pixel::ResolvePixel(*arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_ResolvePixel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PixelVector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pixel_ResolvePixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_ResolvePixel" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_ResolvePixel" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PixelVector * >(argp1);
  Stomp::Pixel::ResolvePixel(*arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_ResolvePixel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Pixel_ResolvePixel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Pixel_ResolvePixel__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Pixel_ResolvePixel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ResolvePixel(Stomp::PixelVector &,bool)\n"
    "    Stomp::Pixel::ResolvePixel(Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pixel_FindUniquePixels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PixelVector *arg1 = 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pixel_FindUniquePixels",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pixel_FindUniquePixels" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_FindUniquePixels" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PixelVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pixel_FindUniquePixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pixel_FindUniquePixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  Stomp::Pixel::FindUniquePixels(*arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Pixel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__Pixel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PixelOrdering___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PixelOrdering *arg1 = (Stomp::PixelOrdering *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::Pixel *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PixelOrdering___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__PixelOrdering, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelOrdering___call__" "', argument " "1"" of type '" "Stomp::PixelOrdering *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PixelOrdering * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelOrdering___call__" "', argument " "2"" of type '" "Stomp::Pixel const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelOrdering___call__" "', argument " "2"" of type '" "Stomp::Pixel const &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__Pixel,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PixelOrdering___call__" "', argument " "3"" of type '" "Stomp::Pixel const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelOrdering___call__" "', argument " "3"" of type '" "Stomp::Pixel const &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::Pixel * >(argp3);
  result = (int)(arg1)->operator ()((Stomp::Pixel const &)*arg2,(Stomp::Pixel const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelOrdering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PixelOrdering *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PixelOrdering")) SWIG_fail;
  result = (Stomp::PixelOrdering *)new Stomp::PixelOrdering();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__PixelOrdering, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PixelOrdering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PixelOrdering *arg1 = (Stomp::PixelOrdering *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PixelOrdering",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__PixelOrdering, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PixelOrdering" "', argument " "1"" of type '" "Stomp::PixelOrdering *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PixelOrdering * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PixelOrdering_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__PixelOrdering, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScalarPixel")) SWIG_fail;
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  double arg3 ;
  double arg4 ;
  uint32_t arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ScalarPixel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarPixel" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarPixel" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScalarPixel" "', argument " "5"" of type '" "uint32_t""'");
  } 
  arg5 = static_cast< uint32_t >(val5);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  double arg3 ;
  double arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ScalarPixel",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarPixel" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarPixel" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  double arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ScalarPixel",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarPixel" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ScalarPixel",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  double arg3 ;
  double arg4 ;
  uint32_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ScalarPixel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarPixel" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarPixel" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScalarPixel" "', argument " "5"" of type '" "uint32_t""'");
  } 
  arg5 = static_cast< uint32_t >(val5);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ScalarPixel",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarPixel" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarPixel" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ScalarPixel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarPixel" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ScalarPixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  double arg5 ;
  uint32_t arg6 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ScalarPixel",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarPixel" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarPixel" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScalarPixel" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ScalarPixel" "', argument " "6"" of type '" "uint32_t""'");
  } 
  arg6 = static_cast< uint32_t >(val6);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  double arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ScalarPixel",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarPixel" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarPixel" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScalarPixel" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  double arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ScalarPixel",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarPixel" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarPixel" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::ScalarPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ScalarPixel",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ScalarPixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarPixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarPixel" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (Stomp::ScalarPixel *)new Stomp::ScalarPixel(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarPixel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScalarPixel__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ScalarPixel__SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ScalarPixel__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ScalarPixel__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ScalarPixel__SWIG_12(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ScalarPixel__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ScalarPixel__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ScalarPixel__SWIG_11(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ScalarPixel__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ScalarPixel__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ScalarPixel__SWIG_10(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ScalarPixel__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_ScalarPixel__SWIG_9(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScalarPixel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::ScalarPixel()\n"
    "    Stomp::ScalarPixel(uint32_t const,uint32_t const,double const,double const,uint32_t const)\n"
    "    Stomp::ScalarPixel(uint32_t const,uint32_t const,double const,double const)\n"
    "    Stomp::ScalarPixel(uint32_t const,uint32_t const,double const)\n"
    "    Stomp::ScalarPixel(uint32_t const,uint32_t const)\n"
    "    Stomp::ScalarPixel(Stomp::AngularCoordinate &,uint32_t const,double const,double const,uint32_t const)\n"
    "    Stomp::ScalarPixel(Stomp::AngularCoordinate &,uint32_t const,double const,double const)\n"
    "    Stomp::ScalarPixel(Stomp::AngularCoordinate &,uint32_t const,double const)\n"
    "    Stomp::ScalarPixel(Stomp::AngularCoordinate &,uint32_t const)\n"
    "    Stomp::ScalarPixel(uint32_t const,uint32_t const,uint32_t const,double const,double const,uint32_t const)\n"
    "    Stomp::ScalarPixel(uint32_t const,uint32_t const,uint32_t const,double const,double const)\n"
    "    Stomp::ScalarPixel(uint32_t const,uint32_t const,uint32_t const,double const)\n"
    "    Stomp::ScalarPixel(uint32_t const,uint32_t const,uint32_t const)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScalarPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScalarPixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScalarPixel" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_SetIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarPixel_SetIntensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_SetIntensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarPixel_SetIntensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetIntensity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_SetNPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarPixel_SetNPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_SetNPoints" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarPixel_SetNPoints" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->SetNPoints(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_Intensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarPixel_Intensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_Intensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  result = (double)(arg1)->Intensity();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_NPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarPixel_NPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_NPoints" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  result = (uint32_t)(arg1)->NPoints();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_MeanIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarPixel_MeanIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_MeanIntensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  result = (double)(arg1)->MeanIntensity();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_AddToIntensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  double arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarPixel_AddToIntensity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_AddToIntensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarPixel_AddToIntensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarPixel_AddToIntensity" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->AddToIntensity(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_AddToIntensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarPixel_AddToIntensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_AddToIntensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarPixel_AddToIntensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->AddToIntensity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_AddToIntensity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarPixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ScalarPixel_AddToIntensity__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarPixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ScalarPixel_AddToIntensity__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarPixel_AddToIntensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddToIntensity(Stomp::ScalarPixel *,double const,uint32_t const)\n"
    "    AddToIntensity(Stomp::ScalarPixel *,double const)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_ScaleIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarPixel_ScaleIntensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_ScaleIntensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarPixel_ScaleIntensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->ScaleIntensity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_NormalizeIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarPixel_NormalizeIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_NormalizeIntensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  (arg1)->NormalizeIntensity();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_ConvertToOverDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarPixel_ConvertToOverDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_ConvertToOverDensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarPixel_ConvertToOverDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->ConvertToOverDensity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_ConvertToFractionalOverDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarPixel_ConvertToFractionalOverDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_ConvertToFractionalOverDensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarPixel_ConvertToFractionalOverDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->ConvertToFractionalOverDensity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_ConvertFromOverDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarPixel_ConvertFromOverDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_ConvertFromOverDensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarPixel_ConvertFromOverDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->ConvertFromOverDensity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_ConvertFromFractionalOverDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarPixel_ConvertFromFractionalOverDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_ConvertFromFractionalOverDensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarPixel_ConvertFromFractionalOverDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->ConvertFromFractionalOverDensity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_UnitSphereX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarPixel_UnitSphereX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_UnitSphereX" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  result = (double)(arg1)->UnitSphereX();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_UnitSphereY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarPixel_UnitSphereY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_UnitSphereY" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  result = (double)(arg1)->UnitSphereY();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_UnitSphereZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarPixel_UnitSphereZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_UnitSphereZ" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel__WithinAnnulus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  Stomp::AngularBin *arg2 = 0 ;
  Stomp::ScalarVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarPixel__WithinAnnulus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel__WithinAnnulus" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarPixel__WithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarPixel__WithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularBin * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScalarPixel__WithinAnnulus" "', argument " "3"" of type '" "Stomp::ScalarVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarPixel__WithinAnnulus" "', argument " "3"" of type '" "Stomp::ScalarVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::ScalarVector * >(argp3);
  (arg1)->_WithinAnnulus(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarPixel_IsOverDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarPixel *arg1 = (Stomp::ScalarPixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarPixel_IsOverDensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarPixel_IsOverDensity" "', argument " "1"" of type '" "Stomp::ScalarPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarPixel * >(argp1);
  result = (bool)(arg1)->IsOverDensity();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScalarPixel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__ScalarPixel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_section_min_stripe_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::section *arg1 = (Stomp::section *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:section_min_stripe_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__section, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "section_min_stripe_set" "', argument " "1"" of type '" "Stomp::section *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::section * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "section_min_stripe_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->min_stripe = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_section_min_stripe_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::section *arg1 = (Stomp::section *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:section_min_stripe_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__section, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "section_min_stripe_get" "', argument " "1"" of type '" "Stomp::section *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::section * >(argp1);
  result = (uint32_t) ((arg1)->min_stripe);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_section_max_stripe_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::section *arg1 = (Stomp::section *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:section_max_stripe_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__section, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "section_max_stripe_set" "', argument " "1"" of type '" "Stomp::section *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::section * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "section_max_stripe_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  if (arg1) (arg1)->max_stripe = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_section_max_stripe_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::section *arg1 = (Stomp::section *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:section_max_stripe_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__section, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "section_max_stripe_get" "', argument " "1"" of type '" "Stomp::section *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::section * >(argp1);
  result = (uint32_t) ((arg1)->max_stripe);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_section(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::section *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_section")) SWIG_fail;
  result = (Stomp::section *)new Stomp::section();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__section, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_section(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::section *arg1 = (Stomp::section *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_section",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__section, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_section" "', argument " "1"" of type '" "Stomp::section *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::section * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *section_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__section, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RegionBound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RegionBound")) SWIG_fail;
  result = (Stomp::RegionBound *)new Stomp::RegionBound();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__RegionBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RegionBound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::RegionBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RegionBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RegionBound" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  result = (Stomp::RegionBound *)new Stomp::RegionBound(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__RegionBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RegionBound(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RegionBound__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RegionBound__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_RegionBound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::RegionBound()\n"
    "    Stomp::RegionBound(Stomp::GeometricBound *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RegionBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RegionBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RegionBound" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_SetGeometricBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  Stomp::GeometricBound *arg2 = (Stomp::GeometricBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionBound_SetGeometricBound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_SetGeometricBound" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionBound_SetGeometricBound" "', argument " "2"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg2 = reinterpret_cast< Stomp::GeometricBound * >(argp2);
  (arg1)->SetGeometricBound(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_SetNRegion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionBound_SetNRegion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_SetNRegion" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionBound_SetNRegion" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  (arg1)->SetNRegion(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_NRegion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionBound_NRegion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_NRegion" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  result = (uint16_t)(arg1)->NRegion();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_CheckPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionBound_CheckPixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_CheckPixel" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionBound_CheckPixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionBound_CheckPixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)(arg1)->CheckPixel(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_ScorePixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionBound_ScorePixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_ScorePixel" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionBound_ScorePixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionBound_ScorePixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->ScorePixel(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_AddPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionBound_AddPixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_AddPixel" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionBound_AddPixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionBound_AddPixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)(arg1)->AddPixel(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_RemovePixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionBound_RemovePixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_RemovePixel" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionBound_RemovePixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionBound_RemovePixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)(arg1)->RemovePixel(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_ClearPixels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionBound_ClearPixels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_ClearPixels" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  (arg1)->ClearPixels();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_Coverage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionBound_Coverage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_Coverage" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionBound_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionBound_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  (arg1)->Coverage(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_CoveragePixels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionBound_CoveragePixels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_CoveragePixels" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  result = (uint32_t)(arg1)->CoveragePixels();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_CoverageArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionBound_CoverageArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_CoverageArea" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  result = (double)(arg1)->CoverageArea();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionBound_BoundArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionBound *arg1 = (Stomp::RegionBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionBound_BoundArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionBound_BoundArea" "', argument " "1"" of type '" "Stomp::RegionBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionBound * >(argp1);
  result = (double)(arg1)->BoundArea();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RegionBound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__RegionBound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RegionMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RegionMap")) SWIG_fail;
  result = (Stomp::RegionMap *)new Stomp::RegionMap();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__RegionMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RegionMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RegionMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RegionMap" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_InitializeRegions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  Stomp::BaseMap *arg2 = (Stomp::BaseMap *) 0 ;
  uint16_t arg3 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RegionMap_InitializeRegions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_InitializeRegions" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap_InitializeRegions" "', argument " "2"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg2 = reinterpret_cast< Stomp::BaseMap * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegionMap_InitializeRegions" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegionMap_InitializeRegions" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  result = (uint16_t)(arg1)->InitializeRegions(arg2,arg3,arg4);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_InitializeRegions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  Stomp::BaseMap *arg2 = (Stomp::BaseMap *) 0 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RegionMap_InitializeRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_InitializeRegions" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap_InitializeRegions" "', argument " "2"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg2 = reinterpret_cast< Stomp::BaseMap * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegionMap_InitializeRegions" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (uint16_t)(arg1)->InitializeRegions(arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_InitializeRegions__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  Stomp::BaseMap *arg2 = (Stomp::BaseMap *) 0 ;
  Stomp::RegionBoundVector *arg3 = 0 ;
  uint16_t arg4 ;
  uint32_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RegionMap_InitializeRegions",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_InitializeRegions" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap_InitializeRegions" "', argument " "2"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg2 = reinterpret_cast< Stomp::BaseMap * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegionMap_InitializeRegions" "', argument " "3"" of type '" "Stomp::RegionBoundVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap_InitializeRegions" "', argument " "3"" of type '" "Stomp::RegionBoundVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::RegionBoundVector * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegionMap_InitializeRegions" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RegionMap_InitializeRegions" "', argument " "5"" of type '" "uint32_t""'");
  } 
  arg5 = static_cast< uint32_t >(val5);
  result = (uint16_t)(arg1)->InitializeRegions(arg2,*arg3,arg4,arg5);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_InitializeRegions__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  Stomp::BaseMap *arg2 = (Stomp::BaseMap *) 0 ;
  Stomp::RegionBoundVector *arg3 = 0 ;
  uint16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RegionMap_InitializeRegions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_InitializeRegions" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap_InitializeRegions" "', argument " "2"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg2 = reinterpret_cast< Stomp::BaseMap * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegionMap_InitializeRegions" "', argument " "3"" of type '" "Stomp::RegionBoundVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap_InitializeRegions" "', argument " "3"" of type '" "Stomp::RegionBoundVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::RegionBoundVector * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegionMap_InitializeRegions" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  result = (uint16_t)(arg1)->InitializeRegions(arg2,*arg3,arg4);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_InitializeRegions__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  Stomp::BaseMap *arg2 = (Stomp::BaseMap *) 0 ;
  Stomp::BaseMap *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RegionMap_InitializeRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_InitializeRegions" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap_InitializeRegions" "', argument " "2"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg2 = reinterpret_cast< Stomp::BaseMap * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__BaseMap,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegionMap_InitializeRegions" "', argument " "3"" of type '" "Stomp::BaseMap &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap_InitializeRegions" "', argument " "3"" of type '" "Stomp::BaseMap &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::BaseMap * >(argp3);
  result = (bool)(arg1)->InitializeRegions(arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_InitializeRegions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__RegionMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RegionMap_InitializeRegions__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__RegionMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RegionMap_InitializeRegions__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__RegionMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RegionMap_InitializeRegions__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__RegionMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RegionMap_InitializeRegions__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__RegionMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_RegionMap_InitializeRegions__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RegionMap_InitializeRegions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    InitializeRegions(Stomp::RegionMap *,Stomp::BaseMap *,uint16_t,uint32_t)\n"
    "    InitializeRegions(Stomp::RegionMap *,Stomp::BaseMap *,uint16_t)\n"
    "    InitializeRegions(Stomp::RegionMap *,Stomp::BaseMap *,Stomp::RegionBoundVector &,uint16_t,uint32_t)\n"
    "    InitializeRegions(Stomp::RegionMap *,Stomp::BaseMap *,Stomp::RegionBoundVector &,uint16_t)\n"
    "    InitializeRegions(Stomp::RegionMap *,Stomp::BaseMap *,Stomp::BaseMap &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap__FindRegionResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  Stomp::BaseMap *arg2 = (Stomp::BaseMap *) 0 ;
  uint16_t arg3 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RegionMap__FindRegionResolution",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap__FindRegionResolution" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap__FindRegionResolution" "', argument " "2"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg2 = reinterpret_cast< Stomp::BaseMap * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegionMap__FindRegionResolution" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegionMap__FindRegionResolution" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  (arg1)->_FindRegionResolution(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap__FindUniqueStripes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RegionMap__FindUniqueStripes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap__FindUniqueStripes" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap__FindUniqueStripes" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap__FindUniqueStripes" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegionMap__FindUniqueStripes" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap__FindUniqueStripes" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp3);
  (arg1)->_FindUniqueStripes(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap__FindSections(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg2 = 0 ;
  double arg3 ;
  uint16_t arg4 ;
  Stomp::SectionVector *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RegionMap__FindSections",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap__FindSections" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap__FindSections" "', argument " "2"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap__FindSections" "', argument " "2"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RegionMap__FindSections" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegionMap__FindSections" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RegionMap__FindSections" "', argument " "5"" of type '" "Stomp::SectionVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap__FindSections" "', argument " "5"" of type '" "Stomp::SectionVector &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::SectionVector * >(argp5);
  (arg1)->_FindSections(*arg2,arg3,arg4,*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap__Regionate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  Stomp::SectionVector *arg3 = 0 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RegionMap__Regionate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap__Regionate" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap__Regionate" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap__Regionate" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegionMap__Regionate" "', argument " "3"" of type '" "Stomp::SectionVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap__Regionate" "', argument " "3"" of type '" "Stomp::SectionVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::SectionVector * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegionMap__Regionate" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RegionMap__Regionate" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  (arg1)->_Regionate(*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap__Regionate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  Stomp::SectionVector *arg3 = 0 ;
  uint16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RegionMap__Regionate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap__Regionate" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap__Regionate" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap__Regionate" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegionMap__Regionate" "', argument " "3"" of type '" "Stomp::SectionVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap__Regionate" "', argument " "3"" of type '" "Stomp::SectionVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::SectionVector * >(argp3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RegionMap__Regionate" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  (arg1)->_Regionate(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap__Regionate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__RegionMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RegionMap__Regionate__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__RegionMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_RegionMap__Regionate__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RegionMap__Regionate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _Regionate(Stomp::RegionMap *,Stomp::PixelVector &,Stomp::SectionVector &,uint16_t,uint16_t)\n"
    "    _Regionate(Stomp::RegionMap *,Stomp::PixelVector &,Stomp::SectionVector &,uint16_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap__VerifyRegionation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionMap__VerifyRegionation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap__VerifyRegionation" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionMap__VerifyRegionation" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  (arg1)->_VerifyRegionation(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_FindRegion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionMap_FindRegion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_FindRegion" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap_FindRegion" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap_FindRegion" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (int16_t)(arg1)->FindRegion(*arg2);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_FindRegion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionMap_FindRegion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_FindRegion" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RegionMap_FindRegion" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap_FindRegion" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (int16_t)(arg1)->FindRegion(*arg2);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_FindRegion(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__RegionMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RegionMap_FindRegion__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__RegionMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RegionMap_FindRegion__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RegionMap_FindRegion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindRegion(Stomp::RegionMap *,Stomp::AngularCoordinate &)\n"
    "    FindRegion(Stomp::RegionMap *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_ClearRegions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionMap_ClearRegions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_ClearRegions" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  (arg1)->ClearRegions();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_Region(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionMap_Region",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_Region" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionMap_Region" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (int16_t)(arg1)->Region(arg2);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_RegionArea__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  int16_t arg2 ;
  Stomp::PixelVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RegionMap_RegionArea",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_RegionArea" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionMap_RegionArea" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RegionMap_RegionArea" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RegionMap_RegionArea" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  (arg1)->RegionArea(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_RegionArea__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RegionMap_RegionArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_RegionArea" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RegionMap_RegionArea" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->RegionArea(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_RegionArea(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__RegionMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RegionMap_RegionArea__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__RegionMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RegionMap_RegionArea__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RegionMap_RegionArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RegionArea(Stomp::RegionMap *,int16_t,Stomp::PixelVector &)\n"
    "    RegionArea(Stomp::RegionMap *,int16_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_NRegion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionMap_NRegion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_NRegion" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  result = (uint16_t)(arg1)->NRegion();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_Resolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionMap_Resolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_Resolution" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  result = (uint32_t)(arg1)->Resolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_Initialized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionMap_Initialized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_Initialized" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  result = (bool)(arg1)->Initialized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::RegionIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionMap_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_Begin" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  result = (arg1)->Begin();
  resultobj = SWIG_NewPointerObj((new Stomp::RegionIterator(static_cast< const Stomp::RegionIterator& >(result))), SWIGTYPE_p_Stomp__RegionDict__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RegionMap_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::RegionMap *arg1 = (Stomp::RegionMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::RegionIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RegionMap_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__RegionMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RegionMap_End" "', argument " "1"" of type '" "Stomp::RegionMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::RegionMap * >(argp1);
  result = (arg1)->End();
  resultobj = SWIG_NewPointerObj((new Stomp::RegionIterator(static_cast< const Stomp::RegionIterator& >(result))), SWIGTYPE_p_Stomp__RegionDict__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RegionMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__RegionMap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BaseMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BaseMap")) SWIG_fail;
  result = (Stomp::BaseMap *)new Stomp::BaseMap();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__BaseMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BaseMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseMap" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_Coverage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  uint32_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BaseMap_Coverage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_Coverage" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseMap_Coverage" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BaseMap_Coverage" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->Coverage(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_Coverage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BaseMap_Coverage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_Coverage" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseMap_Coverage" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->Coverage(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_Coverage__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseMap_Coverage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_Coverage" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  (arg1)->Coverage(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_Coverage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BaseMap_Coverage__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BaseMap_Coverage__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BaseMap_Coverage__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BaseMap_Coverage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Coverage(Stomp::BaseMap *,Stomp::PixelVector &,uint32_t,bool)\n"
    "    Coverage(Stomp::BaseMap *,Stomp::PixelVector &,uint32_t)\n"
    "    Coverage(Stomp::BaseMap *,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_FindUnmaskedFraction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseMap_FindUnmaskedFraction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseMap_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseMap_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->FindUnmaskedFraction(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_FindUnmaskedStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseMap_FindUnmaskedStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_FindUnmaskedStatus" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseMap_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseMap_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (int8_t)(arg1)->FindUnmaskedStatus(*arg2);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_Empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_Empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_Empty" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (bool)(arg1)->Empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_Clear" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_Size" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (uint32_t)(arg1)->Size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_Area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_Area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_Area" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (double)(arg1)->Area();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_MinResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_MinResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_MinResolution" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (uint32_t)(arg1)->MinResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_MaxResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_MaxResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_MaxResolution" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (uint32_t)(arg1)->MaxResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_MinLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_MinLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_MinLevel" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (uint8_t)(arg1)->MinLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_MaxLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_MaxLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_MaxLevel" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (uint8_t)(arg1)->MaxLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_InitializeRegions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  uint16_t arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BaseMap_InitializeRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_InitializeRegions" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseMap_InitializeRegions" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseMap_InitializeRegions" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (uint16_t)(arg1)->InitializeRegions(arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_InitializeRegions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseMap_InitializeRegions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_InitializeRegions" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseMap_InitializeRegions" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = (uint16_t)(arg1)->InitializeRegions(arg2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_InitializeRegions__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  Stomp::RegionBoundVector *arg2 = 0 ;
  uint16_t arg3 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BaseMap_InitializeRegions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_InitializeRegions" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseMap_InitializeRegions" "', argument " "2"" of type '" "Stomp::RegionBoundVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseMap_InitializeRegions" "', argument " "2"" of type '" "Stomp::RegionBoundVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::RegionBoundVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseMap_InitializeRegions" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BaseMap_InitializeRegions" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  result = (uint16_t)(arg1)->InitializeRegions(*arg2,arg3,arg4);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_InitializeRegions__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  Stomp::RegionBoundVector *arg2 = 0 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BaseMap_InitializeRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_InitializeRegions" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseMap_InitializeRegions" "', argument " "2"" of type '" "Stomp::RegionBoundVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseMap_InitializeRegions" "', argument " "2"" of type '" "Stomp::RegionBoundVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::RegionBoundVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BaseMap_InitializeRegions" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (uint16_t)(arg1)->InitializeRegions(*arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_InitializeRegions__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  Stomp::BaseMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseMap_InitializeRegions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_InitializeRegions" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__BaseMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseMap_InitializeRegions" "', argument " "2"" of type '" "Stomp::BaseMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseMap_InitializeRegions" "', argument " "2"" of type '" "Stomp::BaseMap &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::BaseMap * >(argp2);
  result = (bool)(arg1)->InitializeRegions(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_InitializeRegions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BaseMap_InitializeRegions__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BaseMap_InitializeRegions__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BaseMap_InitializeRegions__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BaseMap_InitializeRegions__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BaseMap_InitializeRegions__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BaseMap_InitializeRegions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    InitializeRegions(Stomp::BaseMap *,uint16_t,uint32_t)\n"
    "    InitializeRegions(Stomp::BaseMap *,uint16_t)\n"
    "    InitializeRegions(Stomp::BaseMap *,Stomp::RegionBoundVector &,uint16_t,uint32_t)\n"
    "    InitializeRegions(Stomp::BaseMap *,Stomp::RegionBoundVector &,uint16_t)\n"
    "    InitializeRegions(Stomp::BaseMap *,Stomp::BaseMap &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_FindRegion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseMap_FindRegion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_FindRegion" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseMap_FindRegion" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseMap_FindRegion" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (int16_t)(arg1)->FindRegion(*arg2);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_FindRegion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseMap_FindRegion",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_FindRegion" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseMap_FindRegion" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseMap_FindRegion" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (int16_t)(arg1)->FindRegion(*arg2);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_FindRegion(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BaseMap_FindRegion__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_BaseMap_FindRegion__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BaseMap_FindRegion'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindRegion(Stomp::BaseMap *,Stomp::AngularCoordinate &)\n"
    "    FindRegion(Stomp::BaseMap *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_ClearRegions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_ClearRegions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_ClearRegions" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  (arg1)->ClearRegions();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_RegionArea__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  int16_t arg2 ;
  Stomp::PixelVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BaseMap_RegionArea",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_RegionArea" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseMap_RegionArea" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BaseMap_RegionArea" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseMap_RegionArea" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  (arg1)->RegionArea(arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_Region(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseMap_Region",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_Region" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseMap_Region" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (int16_t)(arg1)->Region(arg2);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_RegionArea__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseMap_RegionArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_RegionArea" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseMap_RegionArea" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  result = (double)(arg1)->RegionArea(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_RegionArea(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BaseMap_RegionArea__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__BaseMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BaseMap_RegionArea__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'BaseMap_RegionArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RegionArea(Stomp::BaseMap *,int16_t,Stomp::PixelVector &)\n"
    "    RegionArea(Stomp::BaseMap *,int16_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_NRegion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_NRegion",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_NRegion" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (uint16_t)(arg1)->NRegion();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_RegionResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_RegionResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_RegionResolution" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (uint32_t)(arg1)->RegionResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_RegionsInitialized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_RegionsInitialized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_RegionsInitialized" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (bool)(arg1)->RegionsInitialized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_RegionBegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::RegionIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_RegionBegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_RegionBegin" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (arg1)->RegionBegin();
  resultobj = SWIG_NewPointerObj((new Stomp::RegionIterator(static_cast< const Stomp::RegionIterator& >(result))), SWIGTYPE_p_Stomp__RegionDict__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseMap_RegionEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::BaseMap *arg1 = (Stomp::BaseMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::RegionIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseMap_RegionEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__BaseMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseMap_RegionEnd" "', argument " "1"" of type '" "Stomp::BaseMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::BaseMap * >(argp1);
  result = (arg1)->RegionEnd();
  resultobj = SWIG_NewPointerObj((new Stomp::RegionIterator(static_cast< const Stomp::RegionIterator& >(result))), SWIGTYPE_p_Stomp__RegionDict__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BaseMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__BaseMap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SubMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::SubMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SubMap",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SubMap" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  result = (Stomp::SubMap *)new Stomp::SubMap(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__SubMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SubMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SubMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SubMap" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_AddPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_AddPixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_AddPixel" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_AddPixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_AddPixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  (arg1)->AddPixel(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Resolve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_Resolve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Resolve" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SubMap_Resolve" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->Resolve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Resolve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_Resolve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Resolve" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  (arg1)->Resolve();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Resolve(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__SubMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SubMap_Resolve__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__SubMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SubMap_Resolve__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SubMap_Resolve'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Resolve(Stomp::SubMap *,bool)\n"
    "    Resolve(Stomp::SubMap *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_SetMinimumWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_SetMinimumWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_SetMinimumWeight" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SubMap_SetMinimumWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetMinimumWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_SetMaximumWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_SetMaximumWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_SetMaximumWeight" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SubMap_SetMaximumWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetMaximumWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_SetMaximumResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SubMap_SetMaximumResolution",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_SetMaximumResolution" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SubMap_SetMaximumResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SubMap_SetMaximumResolution" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->SetMaximumResolution(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_FindLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SubMap_FindLocation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_FindLocation" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_FindLocation" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_FindLocation" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "SubMap_FindLocation" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = (bool)(arg1)->FindLocation(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_FindUnmaskedFraction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_FindUnmaskedFraction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->FindUnmaskedFraction(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_FindUnmaskedStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_FindUnmaskedStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_FindUnmaskedStatus" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (int8_t)(arg1)->FindUnmaskedStatus(*arg2);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_FindAverageWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_FindAverageWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_FindAverageWeight" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_FindAverageWeight" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_FindAverageWeight" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->FindAverageWeight(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_FindMatchingPixels__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::PixelVector *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SubMap_FindMatchingPixels",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_FindMatchingPixels" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SubMap_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SubMap_FindMatchingPixels" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->FindMatchingPixels(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_FindMatchingPixels__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::PixelVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SubMap_FindMatchingPixels",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_FindMatchingPixels" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SubMap_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  (arg1)->FindMatchingPixels(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_FindMatchingPixels(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__SubMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SubMap_FindMatchingPixels__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__SubMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SubMap_FindMatchingPixels__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SubMap_FindMatchingPixels'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindMatchingPixels(Stomp::SubMap *,Stomp::Pixel &,Stomp::PixelVector &,bool)\n"
    "    FindMatchingPixels(Stomp::SubMap *,Stomp::Pixel &,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_AverageWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_AverageWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_AverageWeight" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (double)(arg1)->AverageWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Soften(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  uint32_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SubMap_Soften",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Soften" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_Soften" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_Soften" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SubMap_Soften" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SubMap_Soften" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->Soften(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SubMap_Add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Add" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_Add" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_Add" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SubMap_Add" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->Add(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Multiply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SubMap_Multiply",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Multiply" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_Multiply" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_Multiply" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SubMap_Multiply" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->Multiply(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Exclude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_Exclude",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Exclude" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_Exclude" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_Exclude" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  result = (bool)(arg1)->Exclude(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_ScaleWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_ScaleWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_ScaleWeight" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SubMap_ScaleWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->ScaleWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_AddConstantWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_AddConstantWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_AddConstantWeight" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SubMap_AddConstantWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->AddConstantWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_InvertWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_InvertWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_InvertWeight" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  (arg1)->InvertWeight();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Pixels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_Pixels",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Pixels" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SubMap_Pixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SubMap_Pixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  (arg1)->Pixels(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Clear" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Superpixnum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_Superpixnum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Superpixnum" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (uint32_t)(arg1)->Superpixnum();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::PixelIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Begin" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (arg1)->Begin();
  resultobj = SWIG_NewPointerObj((new Stomp::PixelIterator(static_cast< const Stomp::PixelIterator& >(result))), SWIGTYPE_p_Stomp__PixelVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::PixelIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_End" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (arg1)->End();
  resultobj = SWIG_NewPointerObj((new Stomp::PixelIterator(static_cast< const Stomp::PixelIterator& >(result))), SWIGTYPE_p_Stomp__PixelVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_Area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Area" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (double)(arg1)->Area();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Initialized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_Initialized",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Initialized" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (bool)(arg1)->Initialized();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Unsorted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_Unsorted",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Unsorted" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (bool)(arg1)->Unsorted();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_SetUnsorted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_SetUnsorted",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_SetUnsorted" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  (arg1)->SetUnsorted();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_MinResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_MinResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_MinResolution" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (uint32_t)(arg1)->MinResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_MaxResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_MaxResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_MaxResolution" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (uint32_t)(arg1)->MaxResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_MinLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_MinLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_MinLevel" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (uint8_t)(arg1)->MinLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_MaxLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_MaxLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_MaxLevel" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (uint8_t)(arg1)->MaxLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_MinWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_MinWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_MinWeight" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (double)(arg1)->MinWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_MaxWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_MaxWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_MaxWeight" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (double)(arg1)->MaxWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_LambdaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_LambdaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_LambdaMin" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (double)(arg1)->LambdaMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_LambdaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_LambdaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_LambdaMax" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (double)(arg1)->LambdaMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_EtaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_EtaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_EtaMin" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (double)(arg1)->EtaMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_EtaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_EtaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_EtaMax" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (double)(arg1)->EtaMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_ZMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_ZMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_ZMin" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (double)(arg1)->ZMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_ZMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_ZMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_ZMax" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (double)(arg1)->ZMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SubMap_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_Size" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  result = (uint32_t)(arg1)->Size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SubMap_PixelCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::SubMap *arg1 = (Stomp::SubMap *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SubMap_PixelCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__SubMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SubMap_PixelCount" "', argument " "1"" of type '" "Stomp::SubMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::SubMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SubMap_PixelCount" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (uint32_t)(arg1)->PixelCount(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SubMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__SubMap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Map__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Map")) SWIG_fail;
  result = (Stomp::Map *)new Stomp::Map();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Map, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Map__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PixelVector *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::Map *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Map",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PixelVector * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Map" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (Stomp::Map *)new Stomp::Map(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Map, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Map__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PixelVector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::Map *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Map",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PixelVector * >(argp1);
  result = (Stomp::Map *)new Stomp::Map(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Map, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Map__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::Map *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Map",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Map" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Map" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Map" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Map" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (Stomp::Map *)new Stomp::Map((std::string const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Map, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Map__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  bool arg2 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::Map *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Map",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Map" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Map" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Map" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (Stomp::Map *)new Stomp::Map((std::string const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Map, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Map__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Stomp::Map *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Map",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Map" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Map" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Stomp::Map *)new Stomp::Map((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Map, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Map__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = 0 ;
  double arg2 ;
  uint32_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::Map *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Map",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Map" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Map" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Map" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (Stomp::Map *)new Stomp::Map(*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Map, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Map__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = 0 ;
  double arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::Map *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Map",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Map" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Map" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (Stomp::Map *)new Stomp::Map(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Map, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Map__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::Map *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Map",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Map" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (Stomp::Map *)new Stomp::Map(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Map, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Map__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::Map *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Map",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Map" "', argument " "1"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  result = (Stomp::Map *)new Stomp::Map(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Map, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Map(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Map__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Map__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Map__SWIG_9(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Map__SWIG_5(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Map__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Map__SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Map__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Map__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Map__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Map__SWIG_6(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Map'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::Map()\n"
    "    Stomp::Map(Stomp::PixelVector &,bool)\n"
    "    Stomp::Map(Stomp::PixelVector &)\n"
    "    Stomp::Map(std::string const &,bool const,bool const)\n"
    "    Stomp::Map(std::string const &,bool const)\n"
    "    Stomp::Map(std::string const &)\n"
    "    Stomp::Map(Stomp::GeometricBound &,double,uint32_t,bool)\n"
    "    Stomp::Map(Stomp::GeometricBound &,double,uint32_t)\n"
    "    Stomp::Map(Stomp::GeometricBound &,double)\n"
    "    Stomp::Map(Stomp::GeometricBound &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Map(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Map",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Map" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Initialize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_Initialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Initialize" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (bool)(arg1)->Initialize();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Initialize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_Initialize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Initialize" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Initialize" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Initialize" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Initialize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->Initialize(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Initialize__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Initialize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Initialize" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Initialize" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Initialize" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  result = (bool)(arg1)->Initialize(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Initialize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Map_Initialize__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_Initialize__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_Initialize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_Initialize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Initialize(Stomp::Map *)\n"
    "    Initialize(Stomp::Map *,Stomp::PixelVector &,bool)\n"
    "    Initialize(Stomp::Map *,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_AddPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_AddPixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_AddPixel" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_AddPixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_AddPixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  (arg1)->AddPixel(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_FindLocation",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindLocation" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindLocation" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindLocation" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Map_FindLocation" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  result = (bool)(arg1)->FindLocation(*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindLocationWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_FindLocationWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindLocationWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindLocationWeight" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindLocationWeight" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (double)(arg1)->FindLocationWeight(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Contains__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Contains" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->Contains(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Contains__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Contains" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)(arg1)->Contains(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Contains__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Contains" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  result = (bool)(arg1)->Contains(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedFraction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_FindUnmaskedFraction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->FindUnmaskedFraction(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedFraction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_FindUnmaskedFraction",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_FindUnmaskedFraction" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedFraction" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  (arg1)->FindUnmaskedFraction(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedFraction__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_FindUnmaskedFraction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  (arg1)->FindUnmaskedFraction(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedFraction__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_FindUnmaskedFraction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  result = (double)(arg1)->FindUnmaskedFraction(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedStatus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_FindUnmaskedStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindUnmaskedStatus" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (int8_t)(arg1)->FindUnmaskedStatus(*arg2);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedStatus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  std::vector< int8_t,std::allocator< int8_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_FindUnmaskedStatus",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindUnmaskedStatus" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_FindUnmaskedStatus" "', argument " "3"" of type '" "std::vector< int8_t,std::allocator< int8_t > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedStatus" "', argument " "3"" of type '" "std::vector< int8_t,std::allocator< int8_t > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< int8_t,std::allocator< int8_t > > * >(argp3);
  (arg1)->FindUnmaskedStatus(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedStatus__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_FindUnmaskedStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindUnmaskedStatus" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  result = (int8_t)(arg1)->FindUnmaskedStatus(*arg2);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedStatus(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_FindUnmaskedStatus__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_FindUnmaskedStatus__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Map_FindUnmaskedStatus__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_FindUnmaskedStatus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindUnmaskedStatus(Stomp::Map *,Stomp::Pixel &)\n"
    "    FindUnmaskedStatus(Stomp::Map *,Stomp::PixelVector &,std::vector< int8_t,std::allocator< int8_t > > &)\n"
    "    FindUnmaskedStatus(Stomp::Map *,Stomp::Map &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindAverageWeight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_FindAverageWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindAverageWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindAverageWeight" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindAverageWeight" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->FindAverageWeight(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindAverageWeight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_FindAverageWeight",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindAverageWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindAverageWeight" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindAverageWeight" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_FindAverageWeight" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindAverageWeight" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  (arg1)->FindAverageWeight(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindAverageWeight__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_FindAverageWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindAverageWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindAverageWeight" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindAverageWeight" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  (arg1)->FindAverageWeight(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindAverageWeight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_FindAverageWeight__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_FindAverageWeight__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Map_FindAverageWeight__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_FindAverageWeight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindAverageWeight(Stomp::Map *,Stomp::Pixel &)\n"
    "    FindAverageWeight(Stomp::Map *,Stomp::PixelVector &,std::vector< double,std::allocator< double > > &)\n"
    "    FindAverageWeight(Stomp::Map *,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_AverageWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_AverageWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_AverageWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (double)(arg1)->AverageWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindMatchingPixels__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::PixelVector *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_FindMatchingPixels",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindMatchingPixels" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_FindMatchingPixels" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->FindMatchingPixels(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindMatchingPixels__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::PixelVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_FindMatchingPixels",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindMatchingPixels" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  (arg1)->FindMatchingPixels(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindMatchingPixels__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  Stomp::PixelVector *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_FindMatchingPixels",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindMatchingPixels" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_FindMatchingPixels" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->FindMatchingPixels(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindMatchingPixels__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  Stomp::PixelVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_FindMatchingPixels",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindMatchingPixels" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindMatchingPixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindMatchingPixels" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  (arg1)->FindMatchingPixels(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindMatchingPixels(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Map_FindMatchingPixels__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Map_FindMatchingPixels__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_FindMatchingPixels__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_FindMatchingPixels__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_FindMatchingPixels'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindMatchingPixels(Stomp::Map *,Stomp::Pixel &,Stomp::PixelVector &,bool)\n"
    "    FindMatchingPixels(Stomp::Map *,Stomp::Pixel &,Stomp::PixelVector &)\n"
    "    FindMatchingPixels(Stomp::Map *,Stomp::PixelVector &,Stomp::PixelVector &,bool)\n"
    "    FindMatchingPixels(Stomp::Map *,Stomp::PixelVector &,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Coverage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  uint32_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_Coverage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Coverage" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Coverage" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_Coverage" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->Coverage(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Coverage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_Coverage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Coverage" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Coverage" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->Coverage(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Coverage__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Coverage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Coverage" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  (arg1)->Coverage(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Coverage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_Coverage__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_Coverage__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_Coverage__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_Coverage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Coverage(Stomp::Map *,Stomp::PixelVector &,uint32_t,bool)\n"
    "    Coverage(Stomp::Map *,Stomp::PixelVector &,uint32_t)\n"
    "    Coverage(Stomp::Map *,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Covering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_Covering",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Covering" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Covering" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Covering" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Covering" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (bool)(arg1)->Covering(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Soften__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  uint32_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_Soften",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Soften" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Soften" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Soften" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Soften" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_Soften" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->Soften(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Soften__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_Soften",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Soften" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Soften" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Soften" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Soften" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->Soften(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Soften__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_Soften",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Soften" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_Soften" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Soften" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->Soften(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Soften__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Soften",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Soften" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_Soften" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->Soften(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Soften(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_Soften__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_Soften__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_Soften__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_Soften__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_Soften'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Soften(Stomp::Map *,Stomp::Map &,uint32_t,bool)\n"
    "    Soften(Stomp::Map *,Stomp::Map &,uint32_t)\n"
    "    Soften(Stomp::Map *,uint32_t,bool)\n"
    "    Soften(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_SetMinimumWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_SetMinimumWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_SetMinimumWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_SetMinimumWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetMinimumWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_SetMaximumWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_SetMaximumWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_SetMaximumWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_SetMaximumWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetMaximumWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_RegionOnlyMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  int16_t arg2 ;
  Stomp::Map *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_RegionOnlyMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_RegionOnlyMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_RegionOnlyMap" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_RegionOnlyMap" "', argument " "3"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_RegionOnlyMap" "', argument " "3"" of type '" "Stomp::Map &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::Map * >(argp3);
  result = (bool)(arg1)->RegionOnlyMap(arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_RegionExcludedMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  int16_t arg2 ;
  Stomp::Map *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_RegionExcludedMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_RegionExcludedMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_RegionExcludedMap" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_RegionExcludedMap" "', argument " "3"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_RegionExcludedMap" "', argument " "3"" of type '" "Stomp::Map &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::Map * >(argp3);
  result = (bool)(arg1)->RegionExcludedMap(arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  uint32_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_GenerateRandomPoints",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_GenerateRandomPoints" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->GenerateRandomPoints(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_GenerateRandomPoints",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->GenerateRandomPoints(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_GenerateRandomPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  (arg1)->GenerateRandomPoints(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_GenerateRandomPoints",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_GenerateRandomPoints" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->GenerateRandomPoints(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::WAngularVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_GenerateRandomPoints",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WAngularVector * >(argp3);
  (arg1)->GenerateRandomPoints(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_GenerateRandomPoints",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_GenerateRandomPoints" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->GenerateRandomPoints(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_GenerateRandomPoints",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  (arg1)->GenerateRandomPoints(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_GenerateRandomPoints",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_GenerateRandomPoints" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  try {
    result = (PyObject *)(arg1)->GenerateRandomPoints(arg2,arg3,arg4);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_GenerateRandomPoints",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  try {
    result = (PyObject *)(arg1)->GenerateRandomPoints(arg2,arg3);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_GenerateRandomPoints",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_GenerateRandomPoints" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  try {
    result = (PyObject *)(arg1)->GenerateRandomPoints(arg2,(std::string const &)*arg3,arg4);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_GenerateRandomPoints",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_GenerateRandomPoints" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_GenerateRandomPoints" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    result = (PyObject *)(arg1)->GenerateRandomPoints(arg2,(std::string const &)*arg3);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomPoints(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_GenerateRandomPoints__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_GenerateRandomPoints__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Map_GenerateRandomPoints__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Map_GenerateRandomPoints__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_GenerateRandomPoints__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Map_GenerateRandomPoints__SWIG_10(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_GenerateRandomPoints__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_GenerateRandomPoints__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_GenerateRandomPoints__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_GenerateRandomPoints__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_GenerateRandomPoints__SWIG_9(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_GenerateRandomPoints'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GenerateRandomPoints(Stomp::Map *,Stomp::AngularVector &,uint32_t,bool)\n"
    "    GenerateRandomPoints(Stomp::Map *,Stomp::AngularVector &,uint32_t)\n"
    "    GenerateRandomPoints(Stomp::Map *,Stomp::AngularVector &)\n"
    "    GenerateRandomPoints(Stomp::Map *,Stomp::WAngularVector &,Stomp::WAngularVector &,bool)\n"
    "    GenerateRandomPoints(Stomp::Map *,Stomp::WAngularVector &,Stomp::WAngularVector &)\n"
    "    GenerateRandomPoints(Stomp::Map *,Stomp::WAngularVector &,std::vector< double,std::allocator< double > > &,bool)\n"
    "    GenerateRandomPoints(Stomp::Map *,Stomp::WAngularVector &,std::vector< double,std::allocator< double > > &)\n"
    "    GenerateRandomPoints(Stomp::Map *,uint32_t,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    GenerateRandomPoints(Stomp::Map *,uint32_t,Stomp::AngularCoordinate::Sphere)\n"
    "    GenerateRandomPoints(Stomp::Map *,uint32_t,std::string const &,bool)\n"
    "    GenerateRandomPoints(Stomp::Map *,uint32_t,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomEq__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_GenerateRandomEq",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomEq" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_GenerateRandomEq" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_GenerateRandomEq" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    result = (PyObject *)(arg1)->GenerateRandomEq(arg2,arg3);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomEq__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_GenerateRandomEq",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomEq" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_GenerateRandomEq" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  try {
    result = (PyObject *)(arg1)->GenerateRandomEq(arg2);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomEq(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_GenerateRandomEq__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_GenerateRandomEq__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_GenerateRandomEq'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GenerateRandomEq(Stomp::Map *,uint32_t,bool)\n"
    "    GenerateRandomEq(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomSurvey__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_GenerateRandomSurvey",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomSurvey" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_GenerateRandomSurvey" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_GenerateRandomSurvey" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    result = (PyObject *)(arg1)->GenerateRandomSurvey(arg2,arg3);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomSurvey__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_GenerateRandomSurvey",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomSurvey" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_GenerateRandomSurvey" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  try {
    result = (PyObject *)(arg1)->GenerateRandomSurvey(arg2);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomSurvey(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_GenerateRandomSurvey__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_GenerateRandomSurvey__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_GenerateRandomSurvey'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GenerateRandomSurvey(Stomp::Map *,uint32_t,bool)\n"
    "    GenerateRandomSurvey(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomGal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_GenerateRandomGal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomGal" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_GenerateRandomGal" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_GenerateRandomGal" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    result = (PyObject *)(arg1)->GenerateRandomGal(arg2,arg3);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomGal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_GenerateRandomGal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_GenerateRandomGal" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_GenerateRandomGal" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  try {
    result = (PyObject *)(arg1)->GenerateRandomGal(arg2);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_GenerateRandomGal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_GenerateRandomGal__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_GenerateRandomGal__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_GenerateRandomGal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GenerateRandomGal(Stomp::Map *,uint32_t,bool)\n"
    "    GenerateRandomGal(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Contains__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  std::string *arg4 = 0 ;
  PyObject *arg5 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Map_Contains",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Contains" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Map_Contains" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Contains" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  arg5 = obj4;
  try {
    result = (PyObject *)(arg1)->Contains(arg2,arg3,(std::string const &)*arg4,arg5);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Contains__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_Contains",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Contains" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  arg2 = obj1;
  arg3 = obj2;
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Map_Contains" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Contains" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    result = (PyObject *)(arg1)->Contains(arg2,arg3,(std::string const &)*arg4);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = result;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN int Swig_var_Map_INSIDE_MAP_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Stomp::Map::INSIDE_MAP""' of type '""int""'");
    }
    Stomp::Map::INSIDE_MAP = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Map_INSIDE_MAP_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(Stomp::Map::INSIDE_MAP));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Map_INSIDE_MAP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Map_INSIDE_MAP_get();
}


SWIGINTERN PyObject *_wrap_Map_INSIDE_MAP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Map_INSIDE_MAP_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Map_FIRST_QUADRANT_OK_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Stomp::Map::FIRST_QUADRANT_OK""' of type '""int""'");
    }
    Stomp::Map::FIRST_QUADRANT_OK = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Map_FIRST_QUADRANT_OK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(Stomp::Map::FIRST_QUADRANT_OK));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Map_FIRST_QUADRANT_OK_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Map_FIRST_QUADRANT_OK_get();
}


SWIGINTERN PyObject *_wrap_Map_FIRST_QUADRANT_OK_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Map_FIRST_QUADRANT_OK_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Map_SECOND_QUADRANT_OK_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Stomp::Map::SECOND_QUADRANT_OK""' of type '""int""'");
    }
    Stomp::Map::SECOND_QUADRANT_OK = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Map_SECOND_QUADRANT_OK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(Stomp::Map::SECOND_QUADRANT_OK));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Map_SECOND_QUADRANT_OK_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Map_SECOND_QUADRANT_OK_get();
}


SWIGINTERN PyObject *_wrap_Map_SECOND_QUADRANT_OK_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Map_SECOND_QUADRANT_OK_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Map_THIRD_QUADRANT_OK_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Stomp::Map::THIRD_QUADRANT_OK""' of type '""int""'");
    }
    Stomp::Map::THIRD_QUADRANT_OK = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Map_THIRD_QUADRANT_OK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(Stomp::Map::THIRD_QUADRANT_OK));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Map_THIRD_QUADRANT_OK_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Map_THIRD_QUADRANT_OK_get();
}


SWIGINTERN PyObject *_wrap_Map_THIRD_QUADRANT_OK_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Map_THIRD_QUADRANT_OK_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Map_FOURTH_QUADRANT_OK_set(PyObject *_val) {
  {
    int val;
    int res = SWIG_AsVal_int(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Stomp::Map::FOURTH_QUADRANT_OK""' of type '""int""'");
    }
    Stomp::Map::FOURTH_QUADRANT_OK = static_cast< int >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Map_FOURTH_QUADRANT_OK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(Stomp::Map::FOURTH_QUADRANT_OK));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Map_FOURTH_QUADRANT_OK_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Map_FOURTH_QUADRANT_OK_get();
}


SWIGINTERN PyObject *_wrap_Map_FOURTH_QUADRANT_OK_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Map_FOURTH_QUADRANT_OK_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN PyObject *_wrap_Map_QuadrantsContainedMC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_QuadrantsContainedMC",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_QuadrantsContainedMC" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_QuadrantsContainedMC" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_QuadrantsContainedMC" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_QuadrantsContainedMC" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_QuadrantsContainedMC" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  try {
    result = (int)(arg1)->QuadrantsContainedMC(*arg2,arg3,arg4);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_QuadrantContainedMC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_QuadrantContainedMC",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_QuadrantContainedMC" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_QuadrantContainedMC" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_QuadrantContainedMC" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_QuadrantContainedMC" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_QuadrantContainedMC" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  try {
    result = (bool)(arg1)->QuadrantContainedMC(*arg2,arg3,arg4);
  }
  catch(char const *_e) {
    PyErr_SetString(PyExc_RuntimeError, _e);
    SWIG_fail;
    
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Contains__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::GeometricBound *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_Contains",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Contains" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::GeometricBound * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Contains" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_Contains" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (bool)(arg1)->Contains(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Contains__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::GeometricBound *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_Contains",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Contains" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::GeometricBound * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Contains" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->Contains(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Contains__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::GeometricBound *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Contains" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Contains" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::GeometricBound * >(argp2);
  result = (bool)(arg1)->Contains(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Contains(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_Contains__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_Contains__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_Contains__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_Contains__SWIG_7(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_Contains__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_Contains__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Map_Contains__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      _v = (argv[1] != 0);
      if (_v) {
        _v = (argv[2] != 0);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            _v = (argv[4] != 0);
            if (_v) {
              return _wrap_Map_Contains__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_Contains'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Contains(Stomp::Map *,Stomp::AngularCoordinate &)\n"
    "    Contains(Stomp::Map *,Stomp::Pixel &)\n"
    "    Contains(Stomp::Map *,Stomp::Map &)\n"
    "    Contains(Stomp::Map *,PyObject *,PyObject *,std::string const &,PyObject *)\n"
    "    Contains(Stomp::Map *,PyObject *,PyObject *,std::string const &)\n"
    "    Contains(Stomp::Map *,Stomp::GeometricBound &,double,double)\n"
    "    Contains(Stomp::Map *,Stomp::GeometricBound &,double)\n"
    "    Contains(Stomp::Map *,Stomp::GeometricBound &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedFraction__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::GeometricBound *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_FindUnmaskedFraction",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::GeometricBound * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_FindUnmaskedFraction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_FindUnmaskedFraction" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (double)(arg1)->FindUnmaskedFraction(*arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedFraction__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::GeometricBound *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_FindUnmaskedFraction",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::GeometricBound * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_FindUnmaskedFraction" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->FindUnmaskedFraction(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedFraction__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::GeometricBound *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_FindUnmaskedFraction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::GeometricBound * >(argp2);
  result = (double)(arg1)->FindUnmaskedFraction(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_FindUnmaskedFraction(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_FindUnmaskedFraction__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_FindUnmaskedFraction__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_FindUnmaskedFraction__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_FindUnmaskedFraction__SWIG_6(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_FindUnmaskedFraction__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Map_FindUnmaskedFraction__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_FindUnmaskedFraction__SWIG_4(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_FindUnmaskedFraction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindUnmaskedFraction(Stomp::Map *,Stomp::Pixel &)\n"
    "    FindUnmaskedFraction(Stomp::Map *,Stomp::PixelVector &,std::vector< double,std::allocator< double > > &)\n"
    "    FindUnmaskedFraction(Stomp::Map *,Stomp::PixelVector &)\n"
    "    FindUnmaskedFraction(Stomp::Map *,Stomp::Map &)\n"
    "    FindUnmaskedFraction(Stomp::Map *,Stomp::GeometricBound &,double,double)\n"
    "    FindUnmaskedFraction(Stomp::Map *,Stomp::GeometricBound &,double)\n"
    "    FindUnmaskedFraction(Stomp::Map *,Stomp::GeometricBound &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Write__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_Write",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Write" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Write" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_Write" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->Write((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Write__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_Write",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Write" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Write" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->Write((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Write__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Write",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Write" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Write" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->Write((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Write(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_Write__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_Write__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_Write__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_Write'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Write(Stomp::Map *,std::string const &,bool,bool)\n"
    "    Write(Stomp::Map *,std::string const &,bool)\n"
    "    Write(Stomp::Map *,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Read__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_Read",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Read" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Read" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_Read" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Read__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Read" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Read" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Read__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Read" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->Read((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Read(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_Read__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_Read__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_Read__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_Read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Read(Stomp::Map *,std::string const &,bool const,bool const)\n"
    "    Read(Stomp::Map *,std::string const &,bool const)\n"
    "    Read(Stomp::Map *,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_PixelizeBound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::GeometricBound *arg2 = 0 ;
  double arg3 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Map_PixelizeBound",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_PixelizeBound" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_PixelizeBound" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_PixelizeBound" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::GeometricBound * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_PixelizeBound" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Map_PixelizeBound" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  result = (bool)(arg1)->PixelizeBound(*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_PixelizeBound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::GeometricBound *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_PixelizeBound",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_PixelizeBound" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_PixelizeBound" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_PixelizeBound" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::GeometricBound * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_PixelizeBound" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->PixelizeBound(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_PixelizeBound__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::GeometricBound *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_PixelizeBound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_PixelizeBound" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_PixelizeBound" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_PixelizeBound" "', argument " "2"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::GeometricBound * >(argp2);
  result = (bool)(arg1)->PixelizeBound(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_PixelizeBound(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_PixelizeBound__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_PixelizeBound__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__GeometricBound, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Map_PixelizeBound__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_PixelizeBound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PixelizeBound(Stomp::Map *,Stomp::GeometricBound &,double,uint32_t)\n"
    "    PixelizeBound(Stomp::Map *,Stomp::GeometricBound &,double)\n"
    "    PixelizeBound(Stomp::Map *,Stomp::GeometricBound &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map__FindStartingResolutionLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map__FindStartingResolutionLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map__FindStartingResolutionLevel" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map__FindStartingResolutionLevel" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (uint8_t)(arg1)->_FindStartingResolutionLevel(arg2);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map__FindXYBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint8_t arg2 ;
  Stomp::GeometricBound *arg3 = 0 ;
  uint32_t *arg4 = 0 ;
  uint32_t *arg5 = 0 ;
  uint32_t *arg6 = 0 ;
  uint32_t *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  uint32_t temp4 ;
  int res4 = 0 ;
  uint32_t temp5 ;
  int res5 = 0 ;
  uint32_t temp6 ;
  int res6 = 0 ;
  uint32_t temp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Map__FindXYBounds",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map__FindXYBounds" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map__FindXYBounds" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__GeometricBound,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Map__FindXYBounds" "', argument " "3"" of type '" "Stomp::GeometricBound &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map__FindXYBounds" "', argument " "3"" of type '" "Stomp::GeometricBound &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::GeometricBound * >(argp3);
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Map__FindXYBounds" "', argument " "4"" of type '" "uint32_t""'");
    }
    temp4 = static_cast< uint32_t >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Map__FindXYBounds" "', argument " "5"" of type '" "uint32_t""'");
    }
    temp5 = static_cast< uint32_t >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Map__FindXYBounds" "', argument " "6"" of type '" "uint32_t""'");
    }
    temp6 = static_cast< uint32_t >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_unsigned_int,0))))) {
    unsigned int val;
    int ecode = SWIG_AsVal_unsigned_SS_int(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "Map__FindXYBounds" "', argument " "7"" of type '" "uint32_t""'");
    }
    temp7 = static_cast< uint32_t >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  result = (bool)(arg1)->_FindXYBounds(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_ScaleWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_ScaleWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_ScaleWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_ScaleWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->ScaleWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_AddConstantWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_AddConstantWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_AddConstantWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_AddConstantWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->AddConstantWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_InvertWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_InvertWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_InvertWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  (arg1)->InvertWeight();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_IngestMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_IngestMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_IngestMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_IngestMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_IngestMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_IngestMap" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->IngestMap(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_IngestMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_IngestMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_IngestMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_IngestMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_IngestMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  result = (bool)(arg1)->IngestMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_IngestMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_IngestMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_IngestMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_IngestMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_IngestMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_IngestMap" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->IngestMap(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_IngestMap__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_IngestMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_IngestMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_IngestMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_IngestMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  result = (bool)(arg1)->IngestMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_IngestMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_IngestMap__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_IngestMap__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_IngestMap__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_IngestMap__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_IngestMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IngestMap(Stomp::Map *,Stomp::PixelVector &,bool)\n"
    "    IngestMap(Stomp::Map *,Stomp::PixelVector &)\n"
    "    IngestMap(Stomp::Map *,Stomp::Map &,bool)\n"
    "    IngestMap(Stomp::Map *,Stomp::Map &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_IntersectMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_IntersectMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_IntersectMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_IntersectMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_IntersectMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  result = (bool)(arg1)->IntersectMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_IntersectMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_IntersectMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_IntersectMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_IntersectMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_IntersectMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  result = (bool)(arg1)->IntersectMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_IntersectMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_IntersectMap__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_IntersectMap__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_IntersectMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IntersectMap(Stomp::Map *,Stomp::PixelVector &)\n"
    "    IntersectMap(Stomp::Map *,Stomp::Map &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_ExcludeMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_ExcludeMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_ExcludeMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_ExcludeMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_ExcludeMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_ExcludeMap" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->ExcludeMap(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_ExcludeMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_ExcludeMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_ExcludeMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_ExcludeMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_ExcludeMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  result = (bool)(arg1)->ExcludeMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_ExcludeMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_ExcludeMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_ExcludeMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_ExcludeMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_ExcludeMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_ExcludeMap" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->ExcludeMap(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_ExcludeMap__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_ExcludeMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_ExcludeMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_ExcludeMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_ExcludeMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  result = (bool)(arg1)->ExcludeMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_ExcludeMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_ExcludeMap__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_ExcludeMap__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_ExcludeMap__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_ExcludeMap__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_ExcludeMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ExcludeMap(Stomp::Map *,Stomp::PixelVector &,bool)\n"
    "    ExcludeMap(Stomp::Map *,Stomp::PixelVector &)\n"
    "    ExcludeMap(Stomp::Map *,Stomp::Map &,bool)\n"
    "    ExcludeMap(Stomp::Map *,Stomp::Map &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_AddMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_AddMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_AddMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_AddMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_AddMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_AddMap" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->AddMap(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_AddMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_AddMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_AddMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_AddMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_AddMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  result = (bool)(arg1)->AddMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_AddMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_AddMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_AddMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_AddMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_AddMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_AddMap" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->AddMap(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_AddMap__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_AddMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_AddMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_AddMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_AddMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  result = (bool)(arg1)->AddMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_AddMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_AddMap__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_AddMap__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_AddMap__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_AddMap__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_AddMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddMap(Stomp::Map *,Stomp::PixelVector &,bool)\n"
    "    AddMap(Stomp::Map *,Stomp::PixelVector &)\n"
    "    AddMap(Stomp::Map *,Stomp::Map &,bool)\n"
    "    AddMap(Stomp::Map *,Stomp::Map &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MultiplyMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_MultiplyMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MultiplyMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_MultiplyMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_MultiplyMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_MultiplyMap" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->MultiplyMap(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MultiplyMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_MultiplyMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MultiplyMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_MultiplyMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_MultiplyMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  result = (bool)(arg1)->MultiplyMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MultiplyMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_MultiplyMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MultiplyMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_MultiplyMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_MultiplyMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_MultiplyMap" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->MultiplyMap(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MultiplyMap__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_MultiplyMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MultiplyMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_MultiplyMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_MultiplyMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  result = (bool)(arg1)->MultiplyMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MultiplyMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_MultiplyMap__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_MultiplyMap__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_MultiplyMap__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_MultiplyMap__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_MultiplyMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MultiplyMap(Stomp::Map *,Stomp::PixelVector &,bool)\n"
    "    MultiplyMap(Stomp::Map *,Stomp::PixelVector &)\n"
    "    MultiplyMap(Stomp::Map *,Stomp::Map &,bool)\n"
    "    MultiplyMap(Stomp::Map *,Stomp::Map &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_ImprintMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_ImprintMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_ImprintMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_ImprintMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_ImprintMap" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  result = (bool)(arg1)->ImprintMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_ImprintMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_ImprintMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_ImprintMap" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_ImprintMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_ImprintMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  result = (bool)(arg1)->ImprintMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_ImprintMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_ImprintMap__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_ImprintMap__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_ImprintMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImprintMap(Stomp::Map *,Stomp::PixelVector &)\n"
    "    ImprintMap(Stomp::Map *,Stomp::Map &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Pixels__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Map_Pixels",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Pixels" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Pixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Pixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Map_Pixels" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->Pixels(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Pixels__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Pixels",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Pixels" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Pixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Map_Pixels" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  (arg1)->Pixels(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Pixels(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Map_Pixels__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Map_Pixels__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_Pixels'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Pixels(Stomp::Map *,Stomp::PixelVector &,uint32_t)\n"
    "    Pixels(Stomp::Map *,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::pair< unsigned int,Stomp::PixelVector::iterator > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Begin" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (arg1)->Begin();
  resultobj = SWIG_NewPointerObj((new Stomp::MapIterator(static_cast< const Stomp::MapIterator& >(result))), SWIGTYPE_p_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::pair< unsigned int,Stomp::PixelVector::iterator > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_End" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (arg1)->End();
  resultobj = SWIG_NewPointerObj((new Stomp::MapIterator(static_cast< const Stomp::MapIterator& >(result))), SWIGTYPE_p_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Iterate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  Stomp::MapIterator *arg2 = (Stomp::MapIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Iterate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Iterate" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Map_Iterate" "', argument " "2"" of type '" "Stomp::MapIterator *""'"); 
  }
  arg2 = reinterpret_cast< Stomp::MapIterator * >(argp2);
  (arg1)->Iterate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Clear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Clear" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Clear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Clear",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Clear" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_Clear" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->Clear(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Clear(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Map_Clear__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_Clear__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_Clear'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Clear(Stomp::Map *)\n"
    "    Clear(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_ContainsSuperpixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_ContainsSuperpixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_ContainsSuperpixel" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_ContainsSuperpixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (bool)(arg1)->ContainsSuperpixel(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Area__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_Area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Area" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (double)(arg1)->Area();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Area__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Area",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Area" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_Area" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (double)(arg1)->Area(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Area(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Map_Area__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_Area__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_Area'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Area(Stomp::Map *)\n"
    "    Area(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MinResolution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_MinResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MinResolution" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (uint32_t)(arg1)->MinResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MinResolution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_MinResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MinResolution" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_MinResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (uint32_t)(arg1)->MinResolution(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MinResolution(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Map_MinResolution__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_MinResolution__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_MinResolution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MinResolution(Stomp::Map *)\n"
    "    MinResolution(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MaxResolution__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_MaxResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MaxResolution" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (uint32_t)(arg1)->MaxResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MaxResolution__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_MaxResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MaxResolution" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_MaxResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (uint32_t)(arg1)->MaxResolution(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MaxResolution(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Map_MaxResolution__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_MaxResolution__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_MaxResolution'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MaxResolution(Stomp::Map *)\n"
    "    MaxResolution(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MinLevel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_MinLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MinLevel" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (uint8_t)(arg1)->MinLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MinLevel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_MinLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MinLevel" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_MinLevel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (uint8_t)(arg1)->MinLevel(arg2);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MinLevel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Map_MinLevel__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_MinLevel__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_MinLevel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MinLevel(Stomp::Map *)\n"
    "    MinLevel(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MaxLevel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_MaxLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MaxLevel" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (uint8_t)(arg1)->MaxLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MaxLevel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_MaxLevel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MaxLevel" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_MaxLevel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (uint8_t)(arg1)->MaxLevel(arg2);
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MaxLevel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Map_MaxLevel__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_MaxLevel__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_MaxLevel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MaxLevel(Stomp::Map *)\n"
    "    MaxLevel(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MinWeight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_MinWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MinWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (double)(arg1)->MinWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MinWeight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_MinWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MinWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_MinWeight" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (double)(arg1)->MinWeight(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MinWeight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Map_MinWeight__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_MinWeight__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_MinWeight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MinWeight(Stomp::Map *)\n"
    "    MinWeight(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MaxWeight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_MaxWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MaxWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (double)(arg1)->MaxWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MaxWeight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_MaxWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_MaxWeight" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_MaxWeight" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (double)(arg1)->MaxWeight(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_MaxWeight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Map_MaxWeight__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_MaxWeight__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_MaxWeight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MaxWeight(Stomp::Map *)\n"
    "    MaxWeight(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Size__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Size" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (uint32_t)(arg1)->Size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Size__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_Size",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Size" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_Size" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (uint32_t)(arg1)->Size(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Size(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Map_Size__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Map_Size__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Map_Size'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Size(Stomp::Map *)\n"
    "    Size(Stomp::Map *,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_Empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Map_Empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_Empty" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  result = (bool)(arg1)->Empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Map_PixelCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = (Stomp::Map *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Map_PixelCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Map, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Map_PixelCount" "', argument " "1"" of type '" "Stomp::Map *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Map_PixelCount" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (uint32_t)(arg1)->PixelCount(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Map_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__Map, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ScalarMap")) SWIG_fail;
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = 0 ;
  uint32_t arg2 ;
  Stomp::ScalarMap::ScalarMapType arg3 ;
  double arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ScalarMap",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarMap" "', argument " "3"" of type '" "Stomp::ScalarMap::ScalarMapType""'");
  } 
  arg3 = static_cast< Stomp::ScalarMap::ScalarMapType >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarMap" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScalarMap" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = 0 ;
  uint32_t arg2 ;
  Stomp::ScalarMap::ScalarMapType arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ScalarMap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarMap" "', argument " "3"" of type '" "Stomp::ScalarMap::ScalarMapType""'");
  } 
  arg3 = static_cast< Stomp::ScalarMap::ScalarMapType >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarMap" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = 0 ;
  uint32_t arg2 ;
  Stomp::ScalarMap::ScalarMapType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ScalarMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarMap" "', argument " "3"" of type '" "Stomp::ScalarMap::ScalarMapType""'");
  } 
  arg3 = static_cast< Stomp::ScalarMap::ScalarMapType >(val3);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ScalarMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = 0 ;
  uint32_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ScalarMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarMap" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ScalarMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarVector *arg1 = 0 ;
  Stomp::ScalarMap::ScalarMapType arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ScalarMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::ScalarVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::ScalarVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarVector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "Stomp::ScalarMap::ScalarMapType""'");
  } 
  arg2 = static_cast< Stomp::ScalarMap::ScalarMapType >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarMap" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarVector *arg1 = 0 ;
  Stomp::ScalarMap::ScalarMapType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ScalarMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::ScalarVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::ScalarVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarVector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "Stomp::ScalarMap::ScalarMapType""'");
  } 
  arg2 = static_cast< Stomp::ScalarMap::ScalarMapType >(val2);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarVector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ScalarMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::ScalarVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::ScalarVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarVector * >(argp1);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  uint32_t arg4 ;
  Stomp::ScalarMap::ScalarMapType arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_ScalarMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarMap" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarMap" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScalarMap" "', argument " "5"" of type '" "Stomp::ScalarMap::ScalarMapType""'");
  } 
  arg5 = static_cast< Stomp::ScalarMap::ScalarMapType >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ScalarMap" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_ScalarMap" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  uint32_t arg4 ;
  Stomp::ScalarMap::ScalarMapType arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ScalarMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarMap" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarMap" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScalarMap" "', argument " "5"" of type '" "Stomp::ScalarMap::ScalarMapType""'");
  } 
  arg5 = static_cast< Stomp::ScalarMap::ScalarMapType >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_ScalarMap" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  uint32_t arg4 ;
  Stomp::ScalarMap::ScalarMapType arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_ScalarMap",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarMap" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarMap" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_ScalarMap" "', argument " "5"" of type '" "Stomp::ScalarMap::ScalarMapType""'");
  } 
  arg5 = static_cast< Stomp::ScalarMap::ScalarMapType >(val5);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,*arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Map *arg1 = 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  uint32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::ScalarMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_ScalarMap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "1"" of type '" "Stomp::Map &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Map * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ScalarMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ScalarMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ScalarMap" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ScalarMap" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  result = (Stomp::ScalarMap *)new Stomp::ScalarMap(*arg1,*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ScalarMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ScalarMap__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ScalarMap__SWIG_9(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ScalarMap__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ScalarMap__SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ScalarMap__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ScalarMap__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ScalarMap__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ScalarMap__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ScalarMap__SWIG_13(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_ScalarMap__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ScalarMap__SWIG_12(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_ScalarMap__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_ScalarMap__SWIG_11(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Map, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_ScalarMap__SWIG_10(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ScalarMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::ScalarMap()\n"
    "    Stomp::ScalarMap(Stomp::Map &,uint32_t,Stomp::ScalarMap::ScalarMapType,double,bool)\n"
    "    Stomp::ScalarMap(Stomp::Map &,uint32_t,Stomp::ScalarMap::ScalarMapType,double)\n"
    "    Stomp::ScalarMap(Stomp::Map &,uint32_t,Stomp::ScalarMap::ScalarMapType)\n"
    "    Stomp::ScalarMap(Stomp::Map &,uint32_t)\n"
    "    Stomp::ScalarMap(Stomp::ScalarMap &,uint32_t,double)\n"
    "    Stomp::ScalarMap(Stomp::ScalarMap &,uint32_t)\n"
    "    Stomp::ScalarMap(Stomp::ScalarVector &,Stomp::ScalarMap::ScalarMapType,double)\n"
    "    Stomp::ScalarMap(Stomp::ScalarVector &,Stomp::ScalarMap::ScalarMapType)\n"
    "    Stomp::ScalarMap(Stomp::ScalarVector &)\n"
    "    Stomp::ScalarMap(Stomp::Map &,Stomp::AngularCoordinate &,double,uint32_t,Stomp::ScalarMap::ScalarMapType,double,double)\n"
    "    Stomp::ScalarMap(Stomp::Map &,Stomp::AngularCoordinate &,double,uint32_t,Stomp::ScalarMap::ScalarMapType,double)\n"
    "    Stomp::ScalarMap(Stomp::Map &,Stomp::AngularCoordinate &,double,uint32_t,Stomp::ScalarMap::ScalarMapType)\n"
    "    Stomp::ScalarMap(Stomp::Map &,Stomp::AngularCoordinate &,double,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ScalarMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ScalarMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScalarMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_SetResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_SetResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_SetResolution" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarMap_SetResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->SetResolution(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_InitializeFromMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  uint32_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ScalarMap_InitializeFromMap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_InitializeFromMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_InitializeFromMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_InitializeFromMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_InitializeFromMap" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ScalarMap_InitializeFromMap" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->InitializeFromMap(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_InitializeFromMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_InitializeFromMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_InitializeFromMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_InitializeFromMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_InitializeFromMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_InitializeFromMap" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->InitializeFromMap(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_InitializeFromMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_InitializeFromMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_InitializeFromMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_InitializeFromMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_InitializeFromMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  (arg1)->InitializeFromMap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_InitializeFromMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_InitializeFromMap__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ScalarMap_InitializeFromMap__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ScalarMap_InitializeFromMap__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_InitializeFromMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    InitializeFromMap(Stomp::ScalarMap *,Stomp::Map &,uint32_t,bool)\n"
    "    InitializeFromMap(Stomp::ScalarMap *,Stomp::Map &,uint32_t)\n"
    "    InitializeFromMap(Stomp::ScalarMap *,Stomp::Map &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_InitializeFromScalarMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ScalarMap *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_InitializeFromScalarMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_InitializeFromScalarMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_InitializeFromScalarMap" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_InitializeFromScalarMap" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarMap * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_InitializeFromScalarMap" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->InitializeFromScalarMap(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_InitializeFromScalarMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ScalarMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_InitializeFromScalarMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_InitializeFromScalarMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_InitializeFromScalarMap" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_InitializeFromScalarMap" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarMap * >(argp2);
  (arg1)->InitializeFromScalarMap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_InitializeFromScalarMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_InitializeFromScalarMap__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ScalarMap_InitializeFromScalarMap__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_InitializeFromScalarMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    InitializeFromScalarMap(Stomp::ScalarMap *,Stomp::ScalarMap &,uint32_t)\n"
    "    InitializeFromScalarMap(Stomp::ScalarMap *,Stomp::ScalarMap &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_InitializeFromScalarPixels__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ScalarVector *arg2 = 0 ;
  Stomp::ScalarMap::ScalarMapType arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_InitializeFromScalarPixels",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_InitializeFromScalarPixels" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_InitializeFromScalarPixels" "', argument " "2"" of type '" "Stomp::ScalarVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_InitializeFromScalarPixels" "', argument " "2"" of type '" "Stomp::ScalarVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_InitializeFromScalarPixels" "', argument " "3"" of type '" "Stomp::ScalarMap::ScalarMapType""'");
  } 
  arg3 = static_cast< Stomp::ScalarMap::ScalarMapType >(val3);
  (arg1)->InitializeFromScalarPixels(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_InitializeFromScalarPixels__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ScalarVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_InitializeFromScalarPixels",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_InitializeFromScalarPixels" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_InitializeFromScalarPixels" "', argument " "2"" of type '" "Stomp::ScalarVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_InitializeFromScalarPixels" "', argument " "2"" of type '" "Stomp::ScalarVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarVector * >(argp2);
  (arg1)->InitializeFromScalarPixels(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_InitializeFromScalarPixels(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_InitializeFromScalarPixels__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ScalarMap_InitializeFromScalarPixels__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_InitializeFromScalarPixels'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    InitializeFromScalarPixels(Stomp::ScalarMap *,Stomp::ScalarVector &,Stomp::ScalarMap::ScalarMapType)\n"
    "    InitializeFromScalarPixels(Stomp::ScalarMap *,Stomp::ScalarVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_AddToMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_AddToMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_AddToMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_AddToMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_AddToMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_AddToMap" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->AddToMap(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_AddToMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_AddToMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_AddToMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_AddToMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_AddToMap" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->AddToMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_AddToMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_AddToMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_AddToMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_AddToMap" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_AddToMap" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  result = (bool)(arg1)->AddToMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_AddToMap__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_AddToMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_AddToMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_AddToMap" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_AddToMap" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)(arg1)->AddToMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_AddToMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_AddToMap__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_AddToMap__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_AddToMap__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ScalarMap_AddToMap__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_AddToMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddToMap(Stomp::ScalarMap *,Stomp::AngularCoordinate &,double)\n"
    "    AddToMap(Stomp::ScalarMap *,Stomp::AngularCoordinate &)\n"
    "    AddToMap(Stomp::ScalarMap *,Stomp::WeightedAngularCoordinate &)\n"
    "    AddToMap(Stomp::ScalarMap *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Coverage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  uint32_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ScalarMap_Coverage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Coverage" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_Coverage" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ScalarMap_Coverage" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->Coverage(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Coverage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_Coverage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Coverage" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_Coverage" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->Coverage(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Coverage__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_Coverage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Coverage" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  (arg1)->Coverage(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Coverage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_Coverage__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ScalarMap_Coverage__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ScalarMap_Coverage__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_Coverage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Coverage(Stomp::ScalarMap *,Stomp::PixelVector &,uint32_t,bool)\n"
    "    Coverage(Stomp::ScalarMap *,Stomp::PixelVector &,uint32_t)\n"
    "    Coverage(Stomp::ScalarMap *,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Covering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_Covering",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Covering" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_Covering" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_Covering" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_Covering" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (bool)(arg1)->Covering(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindUnmaskedFraction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_FindUnmaskedFraction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->FindUnmaskedFraction(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindUnmaskedStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_FindUnmaskedStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindUnmaskedStatus" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (int8_t)(arg1)->FindUnmaskedStatus(*arg2);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Resample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ScalarPixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_Resample",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Resample" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ScalarPixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_Resample" "', argument " "2"" of type '" "Stomp::ScalarPixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_Resample" "', argument " "2"" of type '" "Stomp::ScalarPixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarPixel * >(argp2);
  (arg1)->Resample(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_FindIntensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindIntensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindIntensity" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindIntensity" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->FindIntensity(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_FindDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindDensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindDensity" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindDensity" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->FindDensity(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindPointDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_FindPointDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindPointDensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindPointDensity" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindPointDensity" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->FindPointDensity(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalArea__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ScalarMap_FindLocalArea",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindLocalArea" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindLocalArea" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindLocalArea" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_FindLocalArea" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ScalarMap_FindLocalArea" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (double)(arg1)->FindLocalArea(*arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalArea__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_FindLocalArea",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindLocalArea" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindLocalArea" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindLocalArea" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_FindLocalArea" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->FindLocalArea(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalArea(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ScalarMap_FindLocalArea__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ScalarMap_FindLocalArea__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_FindLocalArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindLocalArea(Stomp::ScalarMap *,Stomp::AngularCoordinate &,double,double)\n"
    "    FindLocalArea(Stomp::ScalarMap *,Stomp::AngularCoordinate &,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalIntensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ScalarMap_FindLocalIntensity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindLocalIntensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindLocalIntensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindLocalIntensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_FindLocalIntensity" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ScalarMap_FindLocalIntensity" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (double)(arg1)->FindLocalIntensity(*arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalIntensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_FindLocalIntensity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindLocalIntensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindLocalIntensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindLocalIntensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_FindLocalIntensity" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->FindLocalIntensity(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalIntensity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ScalarMap_FindLocalIntensity__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ScalarMap_FindLocalIntensity__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_FindLocalIntensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindLocalIntensity(Stomp::ScalarMap *,Stomp::AngularCoordinate &,double,double)\n"
    "    FindLocalIntensity(Stomp::ScalarMap *,Stomp::AngularCoordinate &,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalDensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ScalarMap_FindLocalDensity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindLocalDensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindLocalDensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindLocalDensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_FindLocalDensity" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ScalarMap_FindLocalDensity" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (double)(arg1)->FindLocalDensity(*arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalDensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_FindLocalDensity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindLocalDensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindLocalDensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindLocalDensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_FindLocalDensity" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->FindLocalDensity(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalDensity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ScalarMap_FindLocalDensity__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ScalarMap_FindLocalDensity__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_FindLocalDensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindLocalDensity(Stomp::ScalarMap *,Stomp::AngularCoordinate &,double,double)\n"
    "    FindLocalDensity(Stomp::ScalarMap *,Stomp::AngularCoordinate &,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalPointDensity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ScalarMap_FindLocalPointDensity",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindLocalPointDensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindLocalPointDensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindLocalPointDensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_FindLocalPointDensity" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ScalarMap_FindLocalPointDensity" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (double)(arg1)->FindLocalPointDensity(*arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalPointDensity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_FindLocalPointDensity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_FindLocalPointDensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_FindLocalPointDensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_FindLocalPointDensity" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_FindLocalPointDensity" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->FindLocalPointDensity(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_FindLocalPointDensity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ScalarMap_FindLocalPointDensity__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_ScalarMap_FindLocalPointDensity__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_FindLocalPointDensity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindLocalPointDensity(Stomp::ScalarMap *,Stomp::AngularCoordinate &,double,double)\n"
    "    FindLocalPointDensity(Stomp::ScalarMap *,Stomp::AngularCoordinate &,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_CalculateMeanIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_CalculateMeanIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_CalculateMeanIntensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  (arg1)->CalculateMeanIntensity();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_ConvertToOverDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_ConvertToOverDensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_ConvertToOverDensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  (arg1)->ConvertToOverDensity();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_ConvertFromOverDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_ConvertFromOverDensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_ConvertFromOverDensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  (arg1)->ConvertFromOverDensity();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_UseLocalMeanIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_UseLocalMeanIntensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_UseLocalMeanIntensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ScalarMap_UseLocalMeanIntensity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->UseLocalMeanIntensity(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_UsingLocalMeanIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_UsingLocalMeanIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_UsingLocalMeanIntensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (bool)(arg1)->UsingLocalMeanIntensity();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_ImprintMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_ImprintMap",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_ImprintMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_ImprintMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_ImprintMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ScalarMap_ImprintMap" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (bool)(arg1)->ImprintMap(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_ImprintMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_ImprintMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_ImprintMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_ImprintMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_ImprintMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  result = (bool)(arg1)->ImprintMap(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_ImprintMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_ImprintMap__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Map, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ScalarMap_ImprintMap__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_ImprintMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ImprintMap(Stomp::ScalarMap *,Stomp::Map &,bool)\n"
    "    ImprintMap(Stomp::ScalarMap *,Stomp::Map &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_AutoCorrelate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ThetaIterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_AutoCorrelate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_AutoCorrelate" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ThetaVector__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_AutoCorrelate" "', argument " "2"" of type '" "Stomp::ThetaIterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_AutoCorrelate" "', argument " "2"" of type '" "Stomp::ThetaIterator""'");
    } else {
      Stomp::ThetaIterator * temp = reinterpret_cast< Stomp::ThetaIterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->AutoCorrelate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_AutoCorrelate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCorrelation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_AutoCorrelate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_AutoCorrelate" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_AutoCorrelate" "', argument " "2"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_AutoCorrelate" "', argument " "2"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCorrelation * >(argp2);
  (arg1)->AutoCorrelate(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_AutoCorrelate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Stomp__ThetaVector__iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_AutoCorrelate__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_AutoCorrelate__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_AutoCorrelate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AutoCorrelate(Stomp::ScalarMap *,Stomp::ThetaIterator)\n"
    "    AutoCorrelate(Stomp::ScalarMap *,Stomp::AngularCorrelation &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_AutoCorrelateWithRegions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::AngularCorrelation *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_AutoCorrelateWithRegions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_AutoCorrelateWithRegions" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_AutoCorrelateWithRegions" "', argument " "2"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_AutoCorrelateWithRegions" "', argument " "2"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCorrelation * >(argp2);
  (arg1)->AutoCorrelateWithRegions(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_AutoCorrelateWithRegions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ThetaIterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_AutoCorrelateWithRegions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_AutoCorrelateWithRegions" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ThetaVector__iterator,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_AutoCorrelateWithRegions" "', argument " "2"" of type '" "Stomp::ThetaIterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_AutoCorrelateWithRegions" "', argument " "2"" of type '" "Stomp::ThetaIterator""'");
    } else {
      Stomp::ThetaIterator * temp = reinterpret_cast< Stomp::ThetaIterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->AutoCorrelateWithRegions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_AutoCorrelateWithRegions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_AutoCorrelateWithRegions__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Stomp__ThetaVector__iterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ScalarMap_AutoCorrelateWithRegions__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_AutoCorrelateWithRegions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AutoCorrelateWithRegions(Stomp::ScalarMap *,Stomp::AngularCorrelation &)\n"
    "    AutoCorrelateWithRegions(Stomp::ScalarMap *,Stomp::ThetaIterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_CrossCorrelate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ScalarMap *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_CrossCorrelate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_CrossCorrelate" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_CrossCorrelate" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_CrossCorrelate" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarMap * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScalarMap_CrossCorrelate" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_CrossCorrelate" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  (arg1)->CrossCorrelate(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_CrossCorrelate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ScalarMap *arg2 = 0 ;
  Stomp::ThetaIterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_CrossCorrelate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_CrossCorrelate" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_CrossCorrelate" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_CrossCorrelate" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarMap * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__ThetaVector__iterator,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScalarMap_CrossCorrelate" "', argument " "3"" of type '" "Stomp::ThetaIterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_CrossCorrelate" "', argument " "3"" of type '" "Stomp::ThetaIterator""'");
    } else {
      Stomp::ThetaIterator * temp = reinterpret_cast< Stomp::ThetaIterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->CrossCorrelate(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_CrossCorrelate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ScalarMap_CrossCorrelate__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Stomp__ThetaVector__iterator, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ScalarMap_CrossCorrelate__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_CrossCorrelate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CrossCorrelate(Stomp::ScalarMap *,Stomp::ScalarMap &,Stomp::AngularCorrelation &)\n"
    "    CrossCorrelate(Stomp::ScalarMap *,Stomp::ScalarMap &,Stomp::ThetaIterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_CrossCorrelateWithRegions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ScalarMap *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_CrossCorrelateWithRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_CrossCorrelateWithRegions" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_CrossCorrelateWithRegions" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_CrossCorrelateWithRegions" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarMap * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScalarMap_CrossCorrelateWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_CrossCorrelateWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  (arg1)->CrossCorrelateWithRegions(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_CrossCorrelateWithRegions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ScalarMap *arg2 = 0 ;
  Stomp::ThetaIterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_CrossCorrelateWithRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_CrossCorrelateWithRegions" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_CrossCorrelateWithRegions" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_CrossCorrelateWithRegions" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarMap * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__ThetaVector__iterator,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ScalarMap_CrossCorrelateWithRegions" "', argument " "3"" of type '" "Stomp::ThetaIterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_CrossCorrelateWithRegions" "', argument " "3"" of type '" "Stomp::ThetaIterator""'");
    } else {
      Stomp::ThetaIterator * temp = reinterpret_cast< Stomp::ThetaIterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->CrossCorrelateWithRegions(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_CrossCorrelateWithRegions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ScalarMap_CrossCorrelateWithRegions__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__ScalarMap, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Stomp__ThetaVector__iterator, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ScalarMap_CrossCorrelateWithRegions__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ScalarMap_CrossCorrelateWithRegions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CrossCorrelateWithRegions(Stomp::ScalarMap *,Stomp::ScalarMap &,Stomp::AngularCorrelation &)\n"
    "    CrossCorrelateWithRegions(Stomp::ScalarMap *,Stomp::ScalarMap &,Stomp::ThetaIterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Variance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_Variance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Variance" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (double)(arg1)->Variance();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Covariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ScalarMap *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ScalarMap_Covariance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Covariance" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_Covariance" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_Covariance" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarMap * >(argp2);
  result = (double)(arg1)->Covariance(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_VarianceWithErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  int res2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ScalarMap_VarianceWithErrors",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_VarianceWithErrors" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  if (!(SWIG_IsOK((res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj1, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "ScalarMap_VarianceWithErrors" "', argument " "2"" of type '" "double""'");
    }
    temp2 = static_cast< double >(val);
    arg2 = &temp2;
    res2 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "ScalarMap_VarianceWithErrors" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->VarianceWithErrors(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_CovarianceWithErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  Stomp::ScalarMap *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ScalarMap_CovarianceWithErrors",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_CovarianceWithErrors" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__ScalarMap,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ScalarMap_CovarianceWithErrors" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ScalarMap_CovarianceWithErrors" "', argument " "2"" of type '" "Stomp::ScalarMap &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::ScalarMap * >(argp2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "ScalarMap_CovarianceWithErrors" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "ScalarMap_CovarianceWithErrors" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->CovarianceWithErrors(*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Resolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_Resolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Resolution" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (uint32_t)(arg1)->Resolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Intensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_Intensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Intensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (double)(arg1)->Intensity();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_NPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_NPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_NPoints" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (int)(arg1)->NPoints();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Density(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_Density",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Density" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (double)(arg1)->Density();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_PointDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_PointDensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_PointDensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (double)(arg1)->PointDensity();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::ScalarIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Begin" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (arg1)->Begin();
  resultobj = SWIG_NewPointerObj((new Stomp::ScalarIterator(static_cast< const Stomp::ScalarIterator& >(result))), SWIGTYPE_p_Stomp__ScalarVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::ScalarIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_End" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (arg1)->End();
  resultobj = SWIG_NewPointerObj((new Stomp::ScalarIterator(static_cast< const Stomp::ScalarIterator& >(result))), SWIGTYPE_p_Stomp__ScalarVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_MeanIntensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_MeanIntensity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_MeanIntensity" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (double)(arg1)->MeanIntensity();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_IsOverDensityMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_IsOverDensityMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_IsOverDensityMap" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (bool)(arg1)->IsOverDensityMap();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_MapType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::ScalarMap::ScalarMapType result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_MapType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_MapType" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (Stomp::ScalarMap::ScalarMapType)(arg1)->MapType();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_Area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Area" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (double)(arg1)->Area();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Size" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (uint32_t)(arg1)->Size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_MinResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_MinResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_MinResolution" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (uint32_t)(arg1)->MinResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_MaxResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_MaxResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_MaxResolution" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (uint32_t)(arg1)->MaxResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_MinLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_MinLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_MinLevel" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (uint8_t)(arg1)->MinLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_MaxLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_MaxLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_MaxLevel" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (uint8_t)(arg1)->MaxLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_Empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Empty" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  result = (bool)(arg1)->Empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScalarMap_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::ScalarMap *arg1 = (Stomp::ScalarMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScalarMap_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__ScalarMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScalarMap_Clear" "', argument " "1"" of type '" "Stomp::ScalarMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::ScalarMap * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ScalarMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__ScalarMap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GeometricBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_GeometricBound")) SWIG_fail;
  result = (Stomp::GeometricBound *)new Stomp::GeometricBound();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__GeometricBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GeometricBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GeometricBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GeometricBound" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_CheckPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeometricBound_CheckPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_CheckPoint" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeometricBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeometricBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->CheckPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_FindAngularBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeometricBound_FindAngularBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_FindAngularBounds" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  result = (bool)(arg1)->FindAngularBounds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_FindArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeometricBound_FindArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_FindArea" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  result = (bool)(arg1)->FindArea();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_CheckPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeometricBound_CheckPixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_CheckPixel" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeometricBound_CheckPixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeometricBound_CheckPixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (bool)(arg1)->CheckPixel(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_ScorePixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeometricBound_ScorePixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_ScorePixel" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeometricBound_ScorePixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeometricBound_ScorePixel" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->ScorePixel(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_SetArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeometricBound_SetArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_SetArea" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeometricBound_SetArea" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetArea(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_SetAngularBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:GeometricBound_SetAngularBounds",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_SetAngularBounds" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeometricBound_SetAngularBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GeometricBound_SetAngularBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GeometricBound_SetAngularBounds" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GeometricBound_SetAngularBounds" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  (arg1)->SetAngularBounds(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_SetContinuousBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeometricBound_SetContinuousBounds",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_SetContinuousBounds" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeometricBound_SetContinuousBounds" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetContinuousBounds(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_Area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeometricBound_Area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_Area" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  result = (double)(arg1)->Area();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_LambdaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeometricBound_LambdaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_LambdaMin" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  result = (double)(arg1)->LambdaMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_LambdaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeometricBound_LambdaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_LambdaMax" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  result = (double)(arg1)->LambdaMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_EtaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeometricBound_EtaMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_EtaMin" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  result = (double)(arg1)->EtaMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_EtaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeometricBound_EtaMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_EtaMax" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  result = (double)(arg1)->EtaMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_ContinuousBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GeometricBound_ContinuousBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_ContinuousBounds" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  result = (bool)(arg1)->ContinuousBounds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_GenerateRandomPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:GeometricBound_GenerateRandomPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_GenerateRandomPoint" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeometricBound_GenerateRandomPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeometricBound_GenerateRandomPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  (arg1)->GenerateRandomPoint(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GeometricBound_GenerateRandomPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::GeometricBound *arg1 = (Stomp::GeometricBound *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:GeometricBound_GenerateRandomPoints",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__GeometricBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GeometricBound_GenerateRandomPoints" "', argument " "1"" of type '" "Stomp::GeometricBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::GeometricBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GeometricBound_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeometricBound_GenerateRandomPoints" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GeometricBound_GenerateRandomPoints" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->GenerateRandomPoints(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GeometricBound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__GeometricBound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CircleBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::CircleBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CircleBound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CircleBound" "', argument " "1"" of type '" "Stomp::AngularCoordinate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CircleBound" "', argument " "1"" of type '" "Stomp::AngularCoordinate const &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CircleBound" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (Stomp::CircleBound *)new Stomp::CircleBound((Stomp::AngularCoordinate const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__CircleBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CircleBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CircleBound *arg1 = (Stomp::CircleBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CircleBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CircleBound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CircleBound" "', argument " "1"" of type '" "Stomp::CircleBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CircleBound * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircleBound_CheckPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CircleBound *arg1 = (Stomp::CircleBound *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CircleBound_CheckPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CircleBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircleBound_CheckPoint" "', argument " "1"" of type '" "Stomp::CircleBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CircleBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CircleBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CircleBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->CheckPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircleBound_FindAngularBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CircleBound *arg1 = (Stomp::CircleBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircleBound_FindAngularBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CircleBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircleBound_FindAngularBounds" "', argument " "1"" of type '" "Stomp::CircleBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CircleBound * >(argp1);
  result = (bool)(arg1)->FindAngularBounds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CircleBound_FindArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CircleBound *arg1 = (Stomp::CircleBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CircleBound_FindArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CircleBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CircleBound_FindArea" "', argument " "1"" of type '" "Stomp::CircleBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CircleBound * >(argp1);
  result = (bool)(arg1)->FindArea();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CircleBound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__CircleBound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_AnnulusBound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::AnnulusBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_AnnulusBound",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AnnulusBound" "', argument " "1"" of type '" "Stomp::AngularCoordinate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AnnulusBound" "', argument " "1"" of type '" "Stomp::AngularCoordinate const &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AnnulusBound" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AnnulusBound" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::AnnulusBound *)new Stomp::AnnulusBound((Stomp::AngularCoordinate const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AnnulusBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AnnulusBound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  Stomp::AngularBin *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::AnnulusBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AnnulusBound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AnnulusBound" "', argument " "1"" of type '" "Stomp::AngularCoordinate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AnnulusBound" "', argument " "1"" of type '" "Stomp::AngularCoordinate const &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AnnulusBound" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AnnulusBound" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularBin * >(argp2);
  result = (Stomp::AnnulusBound *)new Stomp::AnnulusBound((Stomp::AngularCoordinate const &)*arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AnnulusBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AnnulusBound(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_AnnulusBound__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AnnulusBound__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_AnnulusBound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::AnnulusBound(Stomp::AngularCoordinate const &,double,double)\n"
    "    Stomp::AnnulusBound(Stomp::AngularCoordinate const &,Stomp::AngularBin &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AnnulusBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AnnulusBound *arg1 = (Stomp::AnnulusBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AnnulusBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AnnulusBound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AnnulusBound" "', argument " "1"" of type '" "Stomp::AnnulusBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AnnulusBound * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnulusBound_CheckPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AnnulusBound *arg1 = (Stomp::AnnulusBound *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AnnulusBound_CheckPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AnnulusBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnulusBound_CheckPoint" "', argument " "1"" of type '" "Stomp::AnnulusBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AnnulusBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnnulusBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnnulusBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->CheckPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnulusBound_FindAngularBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AnnulusBound *arg1 = (Stomp::AnnulusBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AnnulusBound_FindAngularBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AnnulusBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnulusBound_FindAngularBounds" "', argument " "1"" of type '" "Stomp::AnnulusBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AnnulusBound * >(argp1);
  result = (bool)(arg1)->FindAngularBounds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnnulusBound_FindArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AnnulusBound *arg1 = (Stomp::AnnulusBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AnnulusBound_FindArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AnnulusBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnnulusBound_FindArea" "', argument " "1"" of type '" "Stomp::AnnulusBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AnnulusBound * >(argp1);
  result = (bool)(arg1)->FindArea();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AnnulusBound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__AnnulusBound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WedgeBound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::WedgeBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_WedgeBound",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WedgeBound" "', argument " "1"" of type '" "Stomp::AngularCoordinate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WedgeBound" "', argument " "1"" of type '" "Stomp::AngularCoordinate const &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WedgeBound" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WedgeBound" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_WedgeBound" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_WedgeBound" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  result = (Stomp::WedgeBound *)new Stomp::WedgeBound((Stomp::AngularCoordinate const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__WedgeBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WedgeBound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::WedgeBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_WedgeBound",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WedgeBound" "', argument " "1"" of type '" "Stomp::AngularCoordinate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WedgeBound" "', argument " "1"" of type '" "Stomp::AngularCoordinate const &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WedgeBound" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WedgeBound" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_WedgeBound" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (Stomp::WedgeBound *)new Stomp::WedgeBound((Stomp::AngularCoordinate const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__WedgeBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WedgeBound(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_WedgeBound__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_WedgeBound__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_WedgeBound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::WedgeBound(Stomp::AngularCoordinate const &,double,double,double,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::WedgeBound(Stomp::AngularCoordinate const &,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WedgeBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WedgeBound *arg1 = (Stomp::WedgeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WedgeBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WedgeBound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WedgeBound" "', argument " "1"" of type '" "Stomp::WedgeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WedgeBound * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WedgeBound_CheckPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WedgeBound *arg1 = (Stomp::WedgeBound *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WedgeBound_CheckPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WedgeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WedgeBound_CheckPoint" "', argument " "1"" of type '" "Stomp::WedgeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WedgeBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WedgeBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WedgeBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->CheckPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WedgeBound_FindAngularBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WedgeBound *arg1 = (Stomp::WedgeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WedgeBound_FindAngularBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WedgeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WedgeBound_FindAngularBounds" "', argument " "1"" of type '" "Stomp::WedgeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WedgeBound * >(argp1);
  result = (bool)(arg1)->FindAngularBounds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WedgeBound_FindArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WedgeBound *arg1 = (Stomp::WedgeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WedgeBound_FindArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WedgeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WedgeBound_FindArea" "', argument " "1"" of type '" "Stomp::WedgeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WedgeBound * >(argp1);
  result = (bool)(arg1)->FindArea();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WedgeBound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__WedgeBound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PolygonBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularVector *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::PolygonBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PolygonBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PolygonBound" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PolygonBound" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularVector * >(argp1);
  result = (Stomp::PolygonBound *)new Stomp::PolygonBound(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__PolygonBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PolygonBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PolygonBound *arg1 = (Stomp::PolygonBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PolygonBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__PolygonBound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PolygonBound" "', argument " "1"" of type '" "Stomp::PolygonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PolygonBound * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolygonBound_CheckPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PolygonBound *arg1 = (Stomp::PolygonBound *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PolygonBound_CheckPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__PolygonBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolygonBound_CheckPoint" "', argument " "1"" of type '" "Stomp::PolygonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PolygonBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PolygonBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PolygonBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->CheckPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolygonBound_FindAngularBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PolygonBound *arg1 = (Stomp::PolygonBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolygonBound_FindAngularBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__PolygonBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolygonBound_FindAngularBounds" "', argument " "1"" of type '" "Stomp::PolygonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PolygonBound * >(argp1);
  result = (bool)(arg1)->FindAngularBounds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PolygonBound_FindArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::PolygonBound *arg1 = (Stomp::PolygonBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PolygonBound_FindArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__PolygonBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PolygonBound_FindArea" "', argument " "1"" of type '" "Stomp::PolygonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::PolygonBound * >(argp1);
  result = (bool)(arg1)->FindArea();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PolygonBound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__PolygonBound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LongitudeBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::LongitudeBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LongitudeBound",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LongitudeBound" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LongitudeBound" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LongitudeBound" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (Stomp::LongitudeBound *)new Stomp::LongitudeBound(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__LongitudeBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LongitudeBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LongitudeBound *arg1 = (Stomp::LongitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LongitudeBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LongitudeBound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LongitudeBound" "', argument " "1"" of type '" "Stomp::LongitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LongitudeBound * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongitudeBound_CheckPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LongitudeBound *arg1 = (Stomp::LongitudeBound *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LongitudeBound_CheckPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LongitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongitudeBound_CheckPoint" "', argument " "1"" of type '" "Stomp::LongitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LongitudeBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LongitudeBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LongitudeBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->CheckPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongitudeBound_FindAngularBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LongitudeBound *arg1 = (Stomp::LongitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongitudeBound_FindAngularBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LongitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongitudeBound_FindAngularBounds" "', argument " "1"" of type '" "Stomp::LongitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LongitudeBound * >(argp1);
  result = (bool)(arg1)->FindAngularBounds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongitudeBound_FindArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LongitudeBound *arg1 = (Stomp::LongitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongitudeBound_FindArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LongitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongitudeBound_FindArea" "', argument " "1"" of type '" "Stomp::LongitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LongitudeBound * >(argp1);
  result = (bool)(arg1)->FindArea();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongitudeBound_LongitudeMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LongitudeBound *arg1 = (Stomp::LongitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongitudeBound_LongitudeMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LongitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongitudeBound_LongitudeMin" "', argument " "1"" of type '" "Stomp::LongitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LongitudeBound * >(argp1);
  result = (double)(arg1)->LongitudeMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongitudeBound_LongitudeMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LongitudeBound *arg1 = (Stomp::LongitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongitudeBound_LongitudeMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LongitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongitudeBound_LongitudeMax" "', argument " "1"" of type '" "Stomp::LongitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LongitudeBound * >(argp1);
  result = (double)(arg1)->LongitudeMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongitudeBound_Sphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LongitudeBound *arg1 = (Stomp::LongitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::AngularCoordinate::Sphere result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongitudeBound_Sphere",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LongitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongitudeBound_Sphere" "', argument " "1"" of type '" "Stomp::LongitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LongitudeBound * >(argp1);
  result = (Stomp::AngularCoordinate::Sphere)(arg1)->Sphere();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LongitudeBound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__LongitudeBound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LatitudeBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::LatitudeBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_LatitudeBound",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LatitudeBound" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LatitudeBound" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LatitudeBound" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (Stomp::LatitudeBound *)new Stomp::LatitudeBound(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__LatitudeBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LatitudeBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatitudeBound *arg1 = (Stomp::LatitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LatitudeBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatitudeBound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LatitudeBound" "', argument " "1"" of type '" "Stomp::LatitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatitudeBound * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatitudeBound_CheckPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatitudeBound *arg1 = (Stomp::LatitudeBound *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatitudeBound_CheckPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatitudeBound_CheckPoint" "', argument " "1"" of type '" "Stomp::LatitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatitudeBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatitudeBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LatitudeBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->CheckPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatitudeBound_FindAngularBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatitudeBound *arg1 = (Stomp::LatitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatitudeBound_FindAngularBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatitudeBound_FindAngularBounds" "', argument " "1"" of type '" "Stomp::LatitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatitudeBound * >(argp1);
  result = (bool)(arg1)->FindAngularBounds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatitudeBound_FindArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatitudeBound *arg1 = (Stomp::LatitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatitudeBound_FindArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatitudeBound_FindArea" "', argument " "1"" of type '" "Stomp::LatitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatitudeBound * >(argp1);
  result = (bool)(arg1)->FindArea();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatitudeBound_LatitudeMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatitudeBound *arg1 = (Stomp::LatitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatitudeBound_LatitudeMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatitudeBound_LatitudeMin" "', argument " "1"" of type '" "Stomp::LatitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatitudeBound * >(argp1);
  result = (double)(arg1)->LatitudeMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatitudeBound_LatitudeMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatitudeBound *arg1 = (Stomp::LatitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatitudeBound_LatitudeMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatitudeBound_LatitudeMax" "', argument " "1"" of type '" "Stomp::LatitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatitudeBound * >(argp1);
  result = (double)(arg1)->LatitudeMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatitudeBound_Sphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatitudeBound *arg1 = (Stomp::LatitudeBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::AngularCoordinate::Sphere result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatitudeBound_Sphere",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatitudeBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatitudeBound_Sphere" "', argument " "1"" of type '" "Stomp::LatitudeBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatitudeBound * >(argp1);
  result = (Stomp::AngularCoordinate::Sphere)(arg1)->Sphere();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LatitudeBound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__LatitudeBound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LatLonBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::LatLonBound *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_LatLonBound",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LatLonBound" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LatLonBound" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LatLonBound" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_LatLonBound" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_LatLonBound" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  result = (Stomp::LatLonBound *)new Stomp::LatLonBound(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__LatLonBound, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LatLonBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatLonBound *arg1 = (Stomp::LatLonBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LatLonBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatLonBound, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LatLonBound" "', argument " "1"" of type '" "Stomp::LatLonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatLonBound * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatLonBound_CheckPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatLonBound *arg1 = (Stomp::LatLonBound *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LatLonBound_CheckPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatLonBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonBound_CheckPoint" "', argument " "1"" of type '" "Stomp::LatLonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatLonBound * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LatLonBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LatLonBound_CheckPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->CheckPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatLonBound_FindAngularBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatLonBound *arg1 = (Stomp::LatLonBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonBound_FindAngularBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatLonBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonBound_FindAngularBounds" "', argument " "1"" of type '" "Stomp::LatLonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatLonBound * >(argp1);
  result = (bool)(arg1)->FindAngularBounds();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatLonBound_FindArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatLonBound *arg1 = (Stomp::LatLonBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonBound_FindArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatLonBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonBound_FindArea" "', argument " "1"" of type '" "Stomp::LatLonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatLonBound * >(argp1);
  result = (bool)(arg1)->FindArea();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatLonBound_LongitudeMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatLonBound *arg1 = (Stomp::LatLonBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonBound_LongitudeMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatLonBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonBound_LongitudeMin" "', argument " "1"" of type '" "Stomp::LatLonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatLonBound * >(argp1);
  result = (double)(arg1)->LongitudeMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatLonBound_LongitudeMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatLonBound *arg1 = (Stomp::LatLonBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonBound_LongitudeMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatLonBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonBound_LongitudeMax" "', argument " "1"" of type '" "Stomp::LatLonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatLonBound * >(argp1);
  result = (double)(arg1)->LongitudeMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatLonBound_LatitudeMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatLonBound *arg1 = (Stomp::LatLonBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonBound_LatitudeMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatLonBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonBound_LatitudeMin" "', argument " "1"" of type '" "Stomp::LatLonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatLonBound * >(argp1);
  result = (double)(arg1)->LatitudeMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatLonBound_LatitudeMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatLonBound *arg1 = (Stomp::LatLonBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonBound_LatitudeMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatLonBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonBound_LatitudeMax" "', argument " "1"" of type '" "Stomp::LatLonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatLonBound * >(argp1);
  result = (double)(arg1)->LatitudeMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LatLonBound_Sphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::LatLonBound *arg1 = (Stomp::LatLonBound *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::AngularCoordinate::Sphere result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LatLonBound_Sphere",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__LatLonBound, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LatLonBound_Sphere" "', argument " "1"" of type '" "Stomp::LatLonBound *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::LatLonBound * >(argp1);
  result = (Stomp::AngularCoordinate::Sphere)(arg1)->Sphere();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LatLonBound_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__LatLonBound, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Cosmology_omega_m_set(PyObject *_val) {
  {
    double val;
    int res = SWIG_AsVal_double(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Stomp::Cosmology::omega_m""' of type '""double""'");
    }
    Stomp::Cosmology::omega_m = static_cast< double >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Cosmology_omega_m_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::Cosmology::omega_m));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Cosmology_omega_m_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Cosmology_omega_m_get();
}


SWIGINTERN PyObject *_wrap_Cosmology_omega_m_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Cosmology_omega_m_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Cosmology_h_set(PyObject *_val) {
  {
    double val;
    int res = SWIG_AsVal_double(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Stomp::Cosmology::h""' of type '""double""'");
    }
    Stomp::Cosmology::h = static_cast< double >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Cosmology_h_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::Cosmology::h));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Cosmology_h_get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Cosmology_h_get();
}


SWIGINTERN PyObject *_wrap_Cosmology_h_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Cosmology_h_set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Cosmology_a__set(PyObject *_val) {
  {
    double val;
    int res = SWIG_AsVal_double(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Stomp::Cosmology::a_""' of type '""double""'");
    }
    Stomp::Cosmology::a_ = static_cast< double >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Cosmology_a__get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::Cosmology::a_));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Cosmology_a__get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Cosmology_a__get();
}


SWIGINTERN PyObject *_wrap_Cosmology_a__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Cosmology_a__set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Cosmology_b__set(PyObject *_val) {
  {
    double val;
    int res = SWIG_AsVal_double(_val, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""Stomp::Cosmology::b_""' of type '""double""'");
    }
    Stomp::Cosmology::b_ = static_cast< double >(val);
  }
  return 0;
fail:
  return 1;
}


SWIGINTERN PyObject *Swig_var_Cosmology_b__get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::Cosmology::b_));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Cosmology_b__get(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(args)) {
  return Swig_var_Cosmology_b__get();
}


SWIGINTERN PyObject *_wrap_Cosmology_b__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *value;
  int res;
  
  if (!PyArg_ParseTuple(args,(char *)"O:set",&value)) return NULL;
  res = Swig_var_Cosmology_b__set(value);
  return !res ? SWIG_Py_Void() : NULL;
}


SWIGINTERN int Swig_var_Cosmology_AA__set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Cosmology_AA_ is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Cosmology_AA__get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::Cosmology::AA_));
  return pyobj;
}


SWIGINTERN int Swig_var_Cosmology_BB__set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Cosmology_BB_ is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Cosmology_BB__get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_double(static_cast< double >(Stomp::Cosmology::BB_));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_Cosmology_OmegaM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":Cosmology_OmegaM")) SWIG_fail;
  result = (double)Stomp::Cosmology::OmegaM();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cosmology_HubbleConstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":Cosmology_HubbleConstant")) SWIG_fail;
  result = (double)Stomp::Cosmology::HubbleConstant();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cosmology_HubbleDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":Cosmology_HubbleDistance")) SWIG_fail;
  result = (double)Stomp::Cosmology::HubbleDistance();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cosmology_OmegaL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":Cosmology_OmegaL")) SWIG_fail;
  result = (double)Stomp::Cosmology::OmegaL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cosmology_SetOmegaM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cosmology_SetOmegaM",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Cosmology_SetOmegaM" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  Stomp::Cosmology::SetOmegaM(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cosmology_SetHubbleConstant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cosmology_SetHubbleConstant",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Cosmology_SetHubbleConstant" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  Stomp::Cosmology::SetHubbleConstant(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cosmology_SetOmegaL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cosmology_SetOmegaL",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Cosmology_SetOmegaL" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  Stomp::Cosmology::SetOmegaL(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cosmology_ComovingDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cosmology_ComovingDistance",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Cosmology_ComovingDistance" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)Stomp::Cosmology::ComovingDistance(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cosmology_AngularDiameterDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cosmology_AngularDiameterDistance",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Cosmology_AngularDiameterDistance" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)Stomp::Cosmology::AngularDiameterDistance(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cosmology_LuminosityDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cosmology_LuminosityDistance",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Cosmology_LuminosityDistance" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)Stomp::Cosmology::LuminosityDistance(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cosmology_ProjectedDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cosmology_ProjectedDistance",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Cosmology_ProjectedDistance" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cosmology_ProjectedDistance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (double)Stomp::Cosmology::ProjectedDistance(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cosmology_ProjectedAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Cosmology_ProjectedAngle",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Cosmology_ProjectedAngle" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Cosmology_ProjectedAngle" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (double)Stomp::Cosmology::ProjectedAngle(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cosmology(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Cosmology *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Cosmology")) SWIG_fail;
  result = (Stomp::Cosmology *)new Stomp::Cosmology();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Cosmology, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Cosmology(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Cosmology *arg1 = (Stomp::Cosmology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Cosmology",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Cosmology, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cosmology" "', argument " "1"" of type '" "Stomp::Cosmology *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Cosmology * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Cosmology_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__Cosmology, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StompWatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::StompWatch *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StompWatch")) SWIG_fail;
  result = (Stomp::StompWatch *)new Stomp::StompWatch();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__StompWatch, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StompWatch_StartTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::StompWatch *arg1 = (Stomp::StompWatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StompWatch_StartTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__StompWatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StompWatch_StartTimer" "', argument " "1"" of type '" "Stomp::StompWatch *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::StompWatch * >(argp1);
  (arg1)->StartTimer();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StompWatch_StopTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::StompWatch *arg1 = (Stomp::StompWatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StompWatch_StopTimer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__StompWatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StompWatch_StopTimer" "', argument " "1"" of type '" "Stomp::StompWatch *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::StompWatch * >(argp1);
  (arg1)->StopTimer();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StompWatch_ElapsedTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::StompWatch *arg1 = (Stomp::StompWatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StompWatch_ElapsedTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__StompWatch, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StompWatch_ElapsedTime" "', argument " "1"" of type '" "Stomp::StompWatch *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::StompWatch * >(argp1);
  result = (double)(arg1)->ElapsedTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StompWatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::StompWatch *arg1 = (Stomp::StompWatch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StompWatch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__StompWatch, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StompWatch" "', argument " "1"" of type '" "Stomp::StompWatch *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::StompWatch * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StompWatch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__StompWatch, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_HistogramBin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_HistogramBin")) SWIG_fail;
  result = (Stomp::HistogramBin *)new Stomp::HistogramBin();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__HistogramBin, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HistogramBin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::HistogramBin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_HistogramBin",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HistogramBin" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HistogramBin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (Stomp::HistogramBin *)new Stomp::HistogramBin(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__HistogramBin, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HistogramBin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_HistogramBin__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_HistogramBin__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_HistogramBin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::HistogramBin()\n"
    "    Stomp::HistogramBin(double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HistogramBin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_HistogramBin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HistogramBin" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_SetBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HistogramBin_SetBounds",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_SetBounds" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HistogramBin_SetBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HistogramBin_SetBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetBounds(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_AddToBin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:HistogramBin_AddToBin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_AddToBin" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HistogramBin_AddToBin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HistogramBin_AddToBin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->AddToBin(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_AddToBin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HistogramBin_AddToBin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_AddToBin" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HistogramBin_AddToBin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)(arg1)->AddToBin(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_AddToBin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__HistogramBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HistogramBin_AddToBin__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__HistogramBin, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HistogramBin_AddToBin__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'HistogramBin_AddToBin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddToBin(Stomp::HistogramBin *,double,double)\n"
    "    AddToBin(Stomp::HistogramBin *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_BinMinimum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HistogramBin_BinMinimum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_BinMinimum" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  result = (double)(arg1)->BinMinimum();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_BinMaximum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HistogramBin_BinMaximum",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_BinMaximum" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  result = (double)(arg1)->BinMaximum();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_BinCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HistogramBin_BinCenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_BinCenter" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  result = (double)(arg1)->BinCenter();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_BinLogCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HistogramBin_BinLogCenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_BinLogCenter" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  result = (double)(arg1)->BinLogCenter();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_BinWeightedCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HistogramBin_BinWeightedCenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_BinWeightedCenter" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  result = (double)(arg1)->BinWeightedCenter();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_BinAveragedCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HistogramBin_BinAveragedCenter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_BinAveragedCenter" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  result = (double)(arg1)->BinAveragedCenter();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_WithinBin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:HistogramBin_WithinBin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_WithinBin" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HistogramBin_WithinBin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)(arg1)->WithinBin(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_BinWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HistogramBin_BinWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_BinWeight" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  result = (double)(arg1)->BinWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_BinItems(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HistogramBin_BinItems",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_BinItems" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  result = (uint32_t)(arg1)->BinItems();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HistogramBin_BinMeanWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::HistogramBin *arg1 = (Stomp::HistogramBin *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:HistogramBin_BinMeanWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HistogramBin_BinMeanWeight" "', argument " "1"" of type '" "Stomp::HistogramBin *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::HistogramBin * >(argp1);
  result = (double)(arg1)->BinMeanWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HistogramBin_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__HistogramBin, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Histogram__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Histogram")) SWIG_fail;
  result = (Stomp::Histogram *)new Stomp::Histogram();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Histogram, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Histogram__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  uint16_t arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::Histogram *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Histogram",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Histogram" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Histogram" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Histogram" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Histogram" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (Stomp::Histogram *)new Stomp::Histogram(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Histogram, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Histogram__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  uint16_t arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::Histogram *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_Histogram",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Histogram" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Histogram" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Histogram" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (Stomp::Histogram *)new Stomp::Histogram(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__Histogram, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Histogram(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Histogram__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Histogram__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Histogram__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Histogram'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::Histogram()\n"
    "    Stomp::Histogram(double,double,uint16_t,bool)\n"
    "    Stomp::Histogram(double,double,uint16_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Histogram(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Histogram",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Histogram" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_SetBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Histogram_SetBounds",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_SetBounds" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Histogram_SetBounds" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Histogram_SetBounds" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetBounds(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_SetNBins(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Histogram_SetNBins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_SetNBins" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Histogram_SetNBins" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  (arg1)->SetNBins(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_SetLogBinning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Histogram_SetLogBinning",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_SetLogBinning" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Histogram_SetLogBinning" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (bool)(arg1)->SetLogBinning(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_AssignBins(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_AssignBins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_AssignBins" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (bool)(arg1)->AssignBins();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_AddToBin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Histogram_AddToBin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_AddToBin" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Histogram_AddToBin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Histogram_AddToBin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->AddToBin(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_AddToBin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Histogram_AddToBin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_AddToBin" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Histogram_AddToBin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (bool)(arg1)->AddToBin(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_AddToBin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Histogram, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Histogram_AddToBin__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__Histogram, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Histogram_AddToBin__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Histogram_AddToBin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddToBin(Stomp::Histogram *,double,double)\n"
    "    AddToBin(Stomp::Histogram *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_Begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::BinIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_Begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_Begin" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (arg1)->Begin();
  resultobj = SWIG_NewPointerObj((new Stomp::BinIterator(static_cast< const Stomp::BinIterator& >(result))), SWIGTYPE_p_Stomp__BinVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::BinIterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_End",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_End" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (arg1)->End();
  resultobj = SWIG_NewPointerObj((new Stomp::BinIterator(static_cast< const Stomp::BinIterator& >(result))), SWIGTYPE_p_Stomp__BinVector__iterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_BoundMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_BoundMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_BoundMin" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (double)(arg1)->BoundMin();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_BoundMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_BoundMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_BoundMax" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (double)(arg1)->BoundMax();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_NBins(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_NBins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_NBins" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (uint16_t)(arg1)->NBins();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_LogBinning(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_LogBinning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_LogBinning" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (bool)(arg1)->LogBinning();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_TotalItems(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_TotalItems",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_TotalItems" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (uint32_t)(arg1)->TotalItems();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_TotalWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_TotalWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_TotalWeight" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (double)(arg1)->TotalWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_MeanItemWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_MeanItemWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_MeanItemWeight" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (double)(arg1)->MeanItemWeight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_MeanBinValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_MeanBinValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_MeanBinValue" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (double)(arg1)->MeanBinValue();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_MeanWeightedBinValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram_MeanWeightedBinValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_MeanWeightedBinValue" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (double)(arg1)->MeanWeightedBinValue();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram__begin_Bins(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Histogram__begin_Bins",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram__begin_Bins" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  result = (std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator *)Stomp_Histogram__begin_Bins(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t__const_iterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram__deref_Bins(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::Histogram *arg1 = (Stomp::Histogram *) 0 ;
  std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator *arg2 = (std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::HistogramBin *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Histogram__deref_Bins",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram__deref_Bins" "', argument " "1"" of type '" "Stomp::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::Histogram * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t__const_iterator, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Histogram__deref_Bins" "', argument " "2"" of type '" "std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator const *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator * >(argp2);
  result = (Stomp::HistogramBin *)Stomp_Histogram__deref_Bins(arg1,(std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__HistogramBin, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Histogram_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__Histogram, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Tokenize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Tokenize",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Tokenize" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tokenize" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Tokenize" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tokenize" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Tokenize" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Tokenize" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  Stomp::Tokenize((std::string const &)*arg1,*arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularCoordinate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::AngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_AngularCoordinate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularCoordinate" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_AngularCoordinate" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (Stomp::AngularCoordinate *)new Stomp::AngularCoordinate(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularCoordinate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::AngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_AngularCoordinate",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularCoordinate" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (Stomp::AngularCoordinate *)new Stomp::AngularCoordinate(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularCoordinate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::AngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AngularCoordinate",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (Stomp::AngularCoordinate *)new Stomp::AngularCoordinate(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularCoordinate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::AngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AngularCoordinate",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (Stomp::AngularCoordinate *)new Stomp::AngularCoordinate(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularCoordinate__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AngularCoordinate")) SWIG_fail;
  result = (Stomp::AngularCoordinate *)new Stomp::AngularCoordinate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularCoordinate__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::AngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_AngularCoordinate",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_AngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_AngularCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::AngularCoordinate *)new Stomp::AngularCoordinate(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__AngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularCoordinate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AngularCoordinate__SWIG_4(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_AngularCoordinate__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_AngularCoordinate__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AngularCoordinate__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_AngularCoordinate__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_AngularCoordinate__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_AngularCoordinate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::AngularCoordinate(double,double,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Stomp::AngularCoordinate(double,double,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::AngularCoordinate(double,double)\n"
    "    Stomp::AngularCoordinate(double)\n"
    "    Stomp::AngularCoordinate()\n"
    "    Stomp::AngularCoordinate(double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AngularCoordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AngularCoordinate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularCoordinate" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetSurveyCoordinates__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_SetSurveyCoordinates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SetSurveyCoordinates" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SetSurveyCoordinates" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_SetSurveyCoordinates" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_SetSurveyCoordinates" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->SetSurveyCoordinates(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetSurveyCoordinates__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_SetSurveyCoordinates",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SetSurveyCoordinates" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SetSurveyCoordinates" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_SetSurveyCoordinates" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetSurveyCoordinates(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetSurveyCoordinates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_SetSurveyCoordinates__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCoordinate_SetSurveyCoordinates__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_SetSurveyCoordinates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetSurveyCoordinates(Stomp::AngularCoordinate *,double,double,bool)\n"
    "    SetSurveyCoordinates(Stomp::AngularCoordinate *,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetEquatorialCoordinates__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_SetEquatorialCoordinates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SetEquatorialCoordinates" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SetEquatorialCoordinates" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_SetEquatorialCoordinates" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_SetEquatorialCoordinates" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->SetEquatorialCoordinates(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetEquatorialCoordinates__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_SetEquatorialCoordinates",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SetEquatorialCoordinates" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SetEquatorialCoordinates" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_SetEquatorialCoordinates" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetEquatorialCoordinates(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetEquatorialCoordinates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_SetEquatorialCoordinates__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCoordinate_SetEquatorialCoordinates__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_SetEquatorialCoordinates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetEquatorialCoordinates(Stomp::AngularCoordinate *,double,double,bool)\n"
    "    SetEquatorialCoordinates(Stomp::AngularCoordinate *,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetGalacticCoordinates__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  double arg2 ;
  double arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_SetGalacticCoordinates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SetGalacticCoordinates" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SetGalacticCoordinates" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_SetGalacticCoordinates" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_SetGalacticCoordinates" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->SetGalacticCoordinates(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetGalacticCoordinates__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_SetGalacticCoordinates",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SetGalacticCoordinates" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SetGalacticCoordinates" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_SetGalacticCoordinates" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetGalacticCoordinates(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetGalacticCoordinates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_SetGalacticCoordinates__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCoordinate_SetGalacticCoordinates__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_SetGalacticCoordinates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetGalacticCoordinates(Stomp::AngularCoordinate *,double,double,bool)\n"
    "    SetGalacticCoordinates(Stomp::AngularCoordinate *,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetUnitSphereCoordinates__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_SetUnitSphereCoordinates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SetUnitSphereCoordinates" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SetUnitSphereCoordinates" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_SetUnitSphereCoordinates" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_SetUnitSphereCoordinates" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  (arg1)->SetUnitSphereCoordinates(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetUnitSphereCoordinates__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_SetUnitSphereCoordinates",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SetUnitSphereCoordinates" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SetUnitSphereCoordinates" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_SetUnitSphereCoordinates" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_SetUnitSphereCoordinates" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_SetUnitSphereCoordinates" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  (arg1)->SetUnitSphereCoordinates(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SetUnitSphereCoordinates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCoordinate_SetUnitSphereCoordinates__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_SetUnitSphereCoordinates__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_SetUnitSphereCoordinates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SetUnitSphereCoordinates(Stomp::AngularCoordinate *,double,double,double)\n"
    "    SetUnitSphereCoordinates(Stomp::AngularCoordinate *,double,double,double,Stomp::AngularCoordinate::Sphere)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  double arg2 ;
  double arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_Set",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_Set" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_Set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_Set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_Set" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_Set" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  (arg1)->Set(arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  double arg2 ;
  double arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_Set",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_Set" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_Set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_Set" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_Set" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  (arg1)->Set(arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_Set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCoordinate_Set__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_Set__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_Set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Set(Stomp::AngularCoordinate *,double,double,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Set(Stomp::AngularCoordinate *,double,double,Stomp::AngularCoordinate::Sphere)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_Lambda(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_Lambda",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_Lambda" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->Lambda();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_Eta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_Eta",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_Eta" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->Eta();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_LambdaRadians(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_LambdaRadians",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_LambdaRadians" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->LambdaRadians();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_EtaRadians(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_EtaRadians",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_EtaRadians" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->EtaRadians();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_RA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_RA",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_RA" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->RA();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_DEC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_DEC",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_DEC" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->DEC();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_RARadians(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_RARadians",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_RARadians" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->RARadians();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_DECRadians(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_DECRadians",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_DECRadians" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->DECRadians();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalLon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_GalLon",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_GalLon" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->GalLon();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalLat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_GalLat",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_GalLat" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->GalLat();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalLonRadians(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_GalLonRadians",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_GalLonRadians" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->GalLonRadians();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalLatRadians(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_GalLatRadians",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_GalLatRadians" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->GalLatRadians();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_UnitSphereX__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_UnitSphereX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_UnitSphereX" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->UnitSphereX();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_UnitSphereY__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_UnitSphereY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_UnitSphereY" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->UnitSphereY();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_UnitSphereZ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_UnitSphereZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_UnitSphereZ" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (double)(arg1)->UnitSphereZ();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_UnitSphereX__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate::Sphere arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_UnitSphereX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_UnitSphereX" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_UnitSphereX" "', argument " "2"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg2 = static_cast< Stomp::AngularCoordinate::Sphere >(val2);
  result = (double)(arg1)->UnitSphereX(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_UnitSphereX(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularCoordinate_UnitSphereX__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCoordinate_UnitSphereX__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_UnitSphereX'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    UnitSphereX(Stomp::AngularCoordinate *)\n"
    "    UnitSphereX(Stomp::AngularCoordinate *,Stomp::AngularCoordinate::Sphere)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_UnitSphereY__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate::Sphere arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_UnitSphereY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_UnitSphereY" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_UnitSphereY" "', argument " "2"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg2 = static_cast< Stomp::AngularCoordinate::Sphere >(val2);
  result = (double)(arg1)->UnitSphereY(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_UnitSphereY(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularCoordinate_UnitSphereY__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCoordinate_UnitSphereY__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_UnitSphereY'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    UnitSphereY(Stomp::AngularCoordinate *)\n"
    "    UnitSphereY(Stomp::AngularCoordinate *,Stomp::AngularCoordinate::Sphere)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_UnitSphereZ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate::Sphere arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_UnitSphereZ",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_UnitSphereZ" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_UnitSphereZ" "', argument " "2"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg2 = static_cast< Stomp::AngularCoordinate::Sphere >(val2);
  result = (double)(arg1)->UnitSphereZ(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_UnitSphereZ(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_AngularCoordinate_UnitSphereZ__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularCoordinate_UnitSphereZ__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_UnitSphereZ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    UnitSphereZ(Stomp::AngularCoordinate *)\n"
    "    UnitSphereZ(Stomp::AngularCoordinate *,Stomp::AngularCoordinate::Sphere)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_AngularDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_AngularDistance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_AngularDistance" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_AngularDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_AngularDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (double)(arg1)->AngularDistance(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_DotProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_DotProduct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_DotProduct" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_DotProduct" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_DotProduct" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (double)(arg1)->DotProduct(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_CrossProduct__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::AngularCoordinate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_CrossProduct",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_CrossProduct" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_CrossProduct" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_CrossProduct" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_CrossProduct" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (arg1)->CrossProduct(*arg2,arg3);
  resultobj = SWIG_NewPointerObj((new Stomp::AngularCoordinate(static_cast< const Stomp::AngularCoordinate& >(result))), SWIGTYPE_p_Stomp__AngularCoordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_CrossProduct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::AngularCoordinate result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_CrossProduct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_CrossProduct" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_CrossProduct" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_CrossProduct" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (arg1)->CrossProduct(*arg2);
  resultobj = SWIG_NewPointerObj((new Stomp::AngularCoordinate(static_cast< const Stomp::AngularCoordinate& >(result))), SWIGTYPE_p_Stomp__AngularCoordinate, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_CrossProduct(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AngularCoordinate_CrossProduct__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_CrossProduct__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_CrossProduct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CrossProduct(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &,Stomp::AngularCoordinate::Sphere)\n"
    "    CrossProduct(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GreatCircle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularCoordinate *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_GreatCircle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_GreatCircle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_GreatCircle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_GreatCircle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCoordinate_GreatCircle" "', argument " "3"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_GreatCircle" "', argument " "3"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCoordinate * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_GreatCircle" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  (arg1)->GreatCircle(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GreatCircle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularCoordinate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_GreatCircle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_GreatCircle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_GreatCircle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_GreatCircle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCoordinate_GreatCircle" "', argument " "3"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_GreatCircle" "', argument " "3"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCoordinate * >(argp3);
  (arg1)->GreatCircle(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GreatCircle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AngularCoordinate_GreatCircle__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCoordinate_GreatCircle__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_GreatCircle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GreatCircle(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &,Stomp::AngularCoordinate &,Stomp::AngularCoordinate::Sphere)\n"
    "    GreatCircle(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &,Stomp::AngularCoordinate &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_PositionAngle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_PositionAngle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_PositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_PositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_PositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_PositionAngle" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (double)(arg1)->PositionAngle(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_PositionAngle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_PositionAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_PositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_PositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_PositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (double)(arg1)->PositionAngle(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_PositionAngle__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_PositionAngle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_PositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_PositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_PositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_PositionAngle" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (double)(arg1)->PositionAngle(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_PositionAngle__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_PositionAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_PositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_PositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_PositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->PositionAngle(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_PositionAngle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AngularCoordinate_PositionAngle__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AngularCoordinate_PositionAngle__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_PositionAngle__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_PositionAngle__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_PositionAngle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PositionAngle(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &,Stomp::AngularCoordinate::Sphere)\n"
    "    PositionAngle(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &)\n"
    "    PositionAngle(Stomp::AngularCoordinate *,Stomp::Pixel &,Stomp::AngularCoordinate::Sphere)\n"
    "    PositionAngle(Stomp::AngularCoordinate *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_CosPositionAngle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_CosPositionAngle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (double)(arg1)->CosPositionAngle(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_CosPositionAngle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_CosPositionAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (double)(arg1)->CosPositionAngle(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_CosPositionAngle__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_CosPositionAngle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (double)(arg1)->CosPositionAngle(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_CosPositionAngle__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_CosPositionAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_CosPositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->CosPositionAngle(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_CosPositionAngle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AngularCoordinate_CosPositionAngle__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AngularCoordinate_CosPositionAngle__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_CosPositionAngle__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_CosPositionAngle__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_CosPositionAngle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CosPositionAngle(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &,Stomp::AngularCoordinate::Sphere)\n"
    "    CosPositionAngle(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &)\n"
    "    CosPositionAngle(Stomp::AngularCoordinate *,Stomp::Pixel &,Stomp::AngularCoordinate::Sphere)\n"
    "    CosPositionAngle(Stomp::AngularCoordinate *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SinPositionAngle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_SinPositionAngle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (double)(arg1)->SinPositionAngle(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SinPositionAngle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_SinPositionAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (double)(arg1)->SinPositionAngle(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SinPositionAngle__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_SinPositionAngle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (double)(arg1)->SinPositionAngle(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SinPositionAngle__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_SinPositionAngle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_SinPositionAngle" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->SinPositionAngle(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SinPositionAngle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AngularCoordinate_SinPositionAngle__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AngularCoordinate_SinPositionAngle__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_SinPositionAngle__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_SinPositionAngle__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_SinPositionAngle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SinPositionAngle(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &,Stomp::AngularCoordinate::Sphere)\n"
    "    SinPositionAngle(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &)\n"
    "    SinPositionAngle(Stomp::AngularCoordinate *,Stomp::Pixel &,Stomp::AngularCoordinate::Sphere)\n"
    "    SinPositionAngle(Stomp::AngularCoordinate *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_Rotate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_Rotate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_Rotate" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_Rotate" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_Rotate" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_Rotate" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  (arg1)->Rotate(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_Rotate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_Rotate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_Rotate" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_Rotate" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_Rotate" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->Rotate(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_Rotate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::AngularCoordinate *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_Rotate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_Rotate" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_Rotate" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_Rotate" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularCoordinate_Rotate" "', argument " "4"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_Rotate" "', argument " "4"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularCoordinate * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_Rotate" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  (arg1)->Rotate(*arg2,arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_Rotate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::AngularCoordinate *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_Rotate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_Rotate" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_Rotate" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_Rotate" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularCoordinate_Rotate" "', argument " "4"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_Rotate" "', argument " "4"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularCoordinate * >(argp4);
  (arg1)->Rotate(*arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_Rotate__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = (Stomp::AngularCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  double *arg7 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double temp5 ;
  int res5 = 0 ;
  double temp6 ;
  int res6 = 0 ;
  double temp7 ;
  int res7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:AngularCoordinate_Rotate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__AngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_Rotate" "', argument " "1"" of type '" "Stomp::AngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_Rotate" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_Rotate" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_Rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_Rotate" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_Rotate" "', argument " "5"" of type '" "double""'");
    }
    temp5 = static_cast< double >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj5, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_Rotate" "', argument " "6"" of type '" "double""'");
    }
    temp6 = static_cast< double >(val);
    arg6 = &temp6;
    res6 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res7 = SWIG_ConvertPtr(obj6,SWIG_as_voidptrptr(&arg7),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj6, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_Rotate" "', argument " "7"" of type '" "double""'");
    }
    temp7 = static_cast< double >(val);
    arg7 = &temp7;
    res7 = SWIG_AddTmpMask(ecode);
  }
  (arg1)->Rotate(*arg2,arg3,arg4,*arg5,*arg6,*arg7);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  if (SWIG_IsNewObj(res7)) delete arg7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_Rotate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_Rotate__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_AngularCoordinate_Rotate__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCoordinate_Rotate__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_Rotate__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_double(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
            }
            if (_v) {
              void *ptr = 0;
              int res = SWIG_AsVal_double(argv[5], 0);
              _v = SWIG_CheckState(res);
              if (!_v) {
                _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[5],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
              }
              if (_v) {
                void *ptr = 0;
                int res = SWIG_AsVal_double(argv[6], 0);
                _v = SWIG_CheckState(res);
                if (!_v) {
                  _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[6],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
                }
                if (_v) {
                  return _wrap_AngularCoordinate_Rotate__SWIG_4(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_Rotate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Rotate(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &,double,Stomp::AngularCoordinate::Sphere)\n"
    "    Rotate(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &,double)\n"
    "    Rotate(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &,double,Stomp::AngularCoordinate &,Stomp::AngularCoordinate::Sphere)\n"
    "    Rotate(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &,double,Stomp::AngularCoordinate &)\n"
    "    Rotate(Stomp::AngularCoordinate *,Stomp::AngularCoordinate &,double,Stomp::AngularCoordinate::Sphere,double &,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SurveyToGalactic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_SurveyToGalactic",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_SurveyToGalactic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SurveyToGalactic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToGalactic" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToGalactic" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_SurveyToGalactic" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  Stomp::AngularCoordinate::SurveyToGalactic(arg1,arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SurveyToGalactic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_SurveyToGalactic",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_SurveyToGalactic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SurveyToGalactic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToGalactic" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToGalactic" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::AngularCoordinate::SurveyToGalactic(arg1,arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SurveyToGalactic(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            return _wrap_AngularCoordinate_SurveyToGalactic__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_SurveyToGalactic__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_SurveyToGalactic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SurveyToGalactic(double,double,double &,double &,bool)\n"
    "    Stomp::AngularCoordinate::SurveyToGalactic(double,double,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SurveyToEquatorial__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_SurveyToEquatorial",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_SurveyToEquatorial" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SurveyToEquatorial" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToEquatorial" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToEquatorial" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_SurveyToEquatorial" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  Stomp::AngularCoordinate::SurveyToEquatorial(arg1,arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SurveyToEquatorial__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_SurveyToEquatorial",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_SurveyToEquatorial" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SurveyToEquatorial" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToEquatorial" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToEquatorial" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::AngularCoordinate::SurveyToEquatorial(arg1,arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SurveyToEquatorial(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            return _wrap_AngularCoordinate_SurveyToEquatorial__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_SurveyToEquatorial__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_SurveyToEquatorial'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SurveyToEquatorial(double,double,double &,double &,bool)\n"
    "    Stomp::AngularCoordinate::SurveyToEquatorial(double,double,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_EquatorialToSurvey__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_EquatorialToSurvey",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_EquatorialToSurvey" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_EquatorialToSurvey" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToSurvey" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToSurvey" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_EquatorialToSurvey" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  Stomp::AngularCoordinate::EquatorialToSurvey(arg1,arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_EquatorialToSurvey__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_EquatorialToSurvey",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_EquatorialToSurvey" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_EquatorialToSurvey" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToSurvey" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToSurvey" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::AngularCoordinate::EquatorialToSurvey(arg1,arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_EquatorialToSurvey(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            return _wrap_AngularCoordinate_EquatorialToSurvey__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_EquatorialToSurvey__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_EquatorialToSurvey'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EquatorialToSurvey(double,double,double &,double &,bool)\n"
    "    Stomp::AngularCoordinate::EquatorialToSurvey(double,double,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_EquatorialToGalactic__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_EquatorialToGalactic",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_EquatorialToGalactic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_EquatorialToGalactic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToGalactic" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToGalactic" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_EquatorialToGalactic" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  Stomp::AngularCoordinate::EquatorialToGalactic(arg1,arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_EquatorialToGalactic__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_EquatorialToGalactic",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_EquatorialToGalactic" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_EquatorialToGalactic" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToGalactic" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToGalactic" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::AngularCoordinate::EquatorialToGalactic(arg1,arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_EquatorialToGalactic(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            return _wrap_AngularCoordinate_EquatorialToGalactic__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_EquatorialToGalactic__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_EquatorialToGalactic'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EquatorialToGalactic(double,double,double &,double &,bool)\n"
    "    Stomp::AngularCoordinate::EquatorialToGalactic(double,double,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalacticToSurvey__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_GalacticToSurvey",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_GalacticToSurvey" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_GalacticToSurvey" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToSurvey" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToSurvey" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_GalacticToSurvey" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  Stomp::AngularCoordinate::GalacticToSurvey(arg1,arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalacticToSurvey__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_GalacticToSurvey",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_GalacticToSurvey" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_GalacticToSurvey" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToSurvey" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToSurvey" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::AngularCoordinate::GalacticToSurvey(arg1,arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalacticToSurvey(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            return _wrap_AngularCoordinate_GalacticToSurvey__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_GalacticToSurvey__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_GalacticToSurvey'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GalacticToSurvey(double,double,double &,double &,bool)\n"
    "    Stomp::AngularCoordinate::GalacticToSurvey(double,double,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalacticToEquatorial__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_GalacticToEquatorial",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_GalacticToEquatorial" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_GalacticToEquatorial" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToEquatorial" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToEquatorial" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_GalacticToEquatorial" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  Stomp::AngularCoordinate::GalacticToEquatorial(arg1,arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalacticToEquatorial__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_GalacticToEquatorial",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_GalacticToEquatorial" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_GalacticToEquatorial" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToEquatorial" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToEquatorial" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  Stomp::AngularCoordinate::GalacticToEquatorial(arg1,arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalacticToEquatorial(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            return _wrap_AngularCoordinate_GalacticToEquatorial__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_GalacticToEquatorial__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_GalacticToEquatorial'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GalacticToEquatorial(double,double,double &,double &,bool)\n"
    "    Stomp::AngularCoordinate::GalacticToEquatorial(double,double,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SurveyToXYZ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  bool arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  double temp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AngularCoordinate_SurveyToXYZ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_SurveyToXYZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SurveyToXYZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToXYZ" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToXYZ" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToXYZ" "', argument " "5"" of type '" "double""'");
    }
    temp5 = static_cast< double >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AngularCoordinate_SurveyToXYZ" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  Stomp::AngularCoordinate::SurveyToXYZ(arg1,arg2,*arg3,*arg4,*arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SurveyToXYZ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  double temp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_SurveyToXYZ",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_SurveyToXYZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_SurveyToXYZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToXYZ" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToXYZ" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_SurveyToXYZ" "', argument " "5"" of type '" "double""'");
    }
    temp5 = static_cast< double >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  Stomp::AngularCoordinate::SurveyToXYZ(arg1,arg2,*arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_SurveyToXYZ(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_double(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
            }
            if (_v) {
              return _wrap_AngularCoordinate_SurveyToXYZ__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_double(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_AngularCoordinate_SurveyToXYZ__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_SurveyToXYZ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SurveyToXYZ(double,double,double &,double &,double &,bool)\n"
    "    Stomp::AngularCoordinate::SurveyToXYZ(double,double,double &,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_EquatorialToXYZ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  bool arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  double temp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AngularCoordinate_EquatorialToXYZ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_EquatorialToXYZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_EquatorialToXYZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToXYZ" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToXYZ" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToXYZ" "', argument " "5"" of type '" "double""'");
    }
    temp5 = static_cast< double >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AngularCoordinate_EquatorialToXYZ" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  Stomp::AngularCoordinate::EquatorialToXYZ(arg1,arg2,*arg3,*arg4,*arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_EquatorialToXYZ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  double temp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_EquatorialToXYZ",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_EquatorialToXYZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_EquatorialToXYZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToXYZ" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToXYZ" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_EquatorialToXYZ" "', argument " "5"" of type '" "double""'");
    }
    temp5 = static_cast< double >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  Stomp::AngularCoordinate::EquatorialToXYZ(arg1,arg2,*arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_EquatorialToXYZ(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_double(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
            }
            if (_v) {
              return _wrap_AngularCoordinate_EquatorialToXYZ__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_double(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_AngularCoordinate_EquatorialToXYZ__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_EquatorialToXYZ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    EquatorialToXYZ(double,double,double &,double &,double &,bool)\n"
    "    Stomp::AngularCoordinate::EquatorialToXYZ(double,double,double &,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalacticToXYZ__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  bool arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  double temp5 ;
  int res5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AngularCoordinate_GalacticToXYZ",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_GalacticToXYZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_GalacticToXYZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToXYZ" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToXYZ" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToXYZ" "', argument " "5"" of type '" "double""'");
    }
    temp5 = static_cast< double >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AngularCoordinate_GalacticToXYZ" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  Stomp::AngularCoordinate::GalacticToXYZ(arg1,arg2,*arg3,*arg4,*arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalacticToXYZ__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  double *arg5 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  double temp4 ;
  int res4 = 0 ;
  double temp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_GalacticToXYZ",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_GalacticToXYZ" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularCoordinate_GalacticToXYZ" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj2, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToXYZ" "', argument " "3"" of type '" "double""'");
    }
    temp3 = static_cast< double >(val);
    arg3 = &temp3;
    res3 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res4 = SWIG_ConvertPtr(obj3,SWIG_as_voidptrptr(&arg4),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj3, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToXYZ" "', argument " "4"" of type '" "double""'");
    }
    temp4 = static_cast< double >(val);
    arg4 = &temp4;
    res4 = SWIG_AddTmpMask(ecode);
  }
  if (!(SWIG_IsOK((res5 = SWIG_ConvertPtr(obj4,SWIG_as_voidptrptr(&arg5),SWIGTYPE_p_double,0))))) {
    double val;
    int ecode = SWIG_AsVal_double(obj4, &val);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "AngularCoordinate_GalacticToXYZ" "', argument " "5"" of type '" "double""'");
    }
    temp5 = static_cast< double >(val);
    arg5 = &temp5;
    res5 = SWIG_AddTmpMask(ecode);
  }
  Stomp::AngularCoordinate::GalacticToXYZ(arg1,arg2,*arg3,*arg4,*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalacticToXYZ(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_double(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
            }
            if (_v) {
              return _wrap_AngularCoordinate_GalacticToXYZ__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *ptr = 0;
        int res = SWIG_AsVal_double(argv[2], 0);
        _v = SWIG_CheckState(res);
        if (!_v) {
          _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[2],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
        }
        if (_v) {
          void *ptr = 0;
          int res = SWIG_AsVal_double(argv[3], 0);
          _v = SWIG_CheckState(res);
          if (!_v) {
            _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[3],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
          }
          if (_v) {
            void *ptr = 0;
            int res = SWIG_AsVal_double(argv[4], 0);
            _v = SWIG_CheckState(res);
            if (!_v) {
              _v = (SWIG_IsOK((res = SWIG_ConvertPtr(argv[4],SWIG_as_voidptrptr(&ptr),SWIGTYPE_p_double,0))));
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_AngularCoordinate_GalacticToXYZ__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_GalacticToXYZ'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GalacticToXYZ(double,double,double &,double &,double &,bool)\n"
    "    Stomp::AngularCoordinate::GalacticToXYZ(double,double,double &,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_EtaMultiplier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_EtaMultiplier",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_EtaMultiplier" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)Stomp::AngularCoordinate::EtaMultiplier(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_RAMultiplier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_RAMultiplier",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_RAMultiplier" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)Stomp::AngularCoordinate::RAMultiplier(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_GalLonMultiplier(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularCoordinate_GalLonMultiplier",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AngularCoordinate_GalLonMultiplier" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)Stomp::AngularCoordinate::GalLonMultiplier(arg1);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_ToAngularVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  Stomp::AngularVector *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_ToAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "3"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "3"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularVector * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (bool)Stomp::AngularCoordinate::ToAngularVector(*arg1,*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_ToAngularVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  Stomp::AngularVector *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_ToAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "3"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "3"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularVector * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  result = (bool)Stomp::AngularCoordinate::ToAngularVector(*arg1,*arg2,*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_ToAngularVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  Stomp::AngularVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_ToAngularVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "3"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "3"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularVector * >(argp3);
  result = (bool)Stomp::AngularCoordinate::ToAngularVector(*arg1,*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_ToAngularVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:AngularCoordinate_ToAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = (bool)Stomp::AngularCoordinate::ToAngularVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_ToAngularVector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_ToAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  result = (bool)Stomp::AngularCoordinate::ToAngularVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_ToAngularVector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_ToAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)Stomp::AngularCoordinate::ToAngularVector((std::string const &)*arg1,*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_ToAngularVector__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_ToAngularVector",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (bool)Stomp::AngularCoordinate::ToAngularVector((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_ToAngularVector__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_ToAngularVector",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_ToAngularVector" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  result = (bool)Stomp::AngularCoordinate::ToAngularVector((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_ToAngularVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AngularCoordinate_ToAngularVector__SWIG_7(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AngularCoordinate_ToAngularVector__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_ToAngularVector__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCoordinate_ToAngularVector__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCoordinate_ToAngularVector__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_ToAngularVector__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_ToAngularVector__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_AngularCoordinate_ToAngularVector__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_ToAngularVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ToAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::AngularVector &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::AngularVector &,Stomp::AngularCoordinate::Sphere)\n"
    "    ToAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::AngularVector &)\n"
    "    ToAngularVector(std::string const &,Stomp::AngularVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    ToAngularVector(std::string const &,Stomp::AngularVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    ToAngularVector(std::string const &,Stomp::AngularVector &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToAngularVector(std::string const &,Stomp::AngularVector &,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::AngularCoordinate::ToAngularVector(std::string const &,Stomp::AngularVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_FromAngularVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:AngularCoordinate_FromAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (bool)Stomp::AngularCoordinate::FromAngularVector(*arg1,*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_FromAngularVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_FromAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  result = (bool)Stomp::AngularCoordinate::FromAngularVector(*arg1,*arg2,*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_FromAngularVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_FromAngularVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  result = (bool)Stomp::AngularCoordinate::FromAngularVector(*arg1,*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_FromAngularVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularCoordinate_FromAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)Stomp::AngularCoordinate::FromAngularVector(*arg1,(std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_FromAngularVector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularCoordinate_FromAngularVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (bool)Stomp::AngularCoordinate::FromAngularVector(*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_FromAngularVector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularCoordinate_FromAngularVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "1"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularCoordinate_FromAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)Stomp::AngularCoordinate::FromAngularVector(*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularCoordinate_FromAngularVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_AngularCoordinate_FromAngularVector__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AngularCoordinate_FromAngularVector__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_AngularCoordinate_FromAngularVector__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCoordinate_FromAngularVector__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_AngularCoordinate_FromAngularVector__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_AngularCoordinate_FromAngularVector__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularCoordinate_FromAngularVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FromAngularVector(Stomp::AngularVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    FromAngularVector(Stomp::AngularVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::AngularCoordinate::Sphere)\n"
    "    FromAngularVector(Stomp::AngularVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &)\n"
    "    FromAngularVector(Stomp::AngularVector &,std::string const &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    FromAngularVector(Stomp::AngularVector &,std::string const &,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::AngularCoordinate::FromAngularVector(Stomp::AngularVector &,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *AngularCoordinate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__AngularCoordinate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_WeightedAngularCoordinate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_WeightedAngularCoordinate")) SWIG_fail;
  result = (Stomp::WeightedAngularCoordinate *)new Stomp::WeightedAngularCoordinate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__WeightedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeightedAngularCoordinate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::WeightedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_WeightedAngularCoordinate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WeightedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WeightedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WeightedAngularCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_WeightedAngularCoordinate" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_WeightedAngularCoordinate" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (Stomp::WeightedAngularCoordinate *)new Stomp::WeightedAngularCoordinate(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__WeightedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeightedAngularCoordinate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::WeightedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_WeightedAngularCoordinate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WeightedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WeightedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WeightedAngularCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_WeightedAngularCoordinate" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  result = (Stomp::WeightedAngularCoordinate *)new Stomp::WeightedAngularCoordinate(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__WeightedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeightedAngularCoordinate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::WeightedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_WeightedAngularCoordinate",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WeightedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WeightedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WeightedAngularCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::WeightedAngularCoordinate *)new Stomp::WeightedAngularCoordinate(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__WeightedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeightedAngularCoordinate__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Stomp::FieldDict *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  bool arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Stomp::WeightedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_WeightedAngularCoordinate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WeightedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WeightedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WeightedAngularCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_WeightedAngularCoordinate" "', argument " "4"" of type '" "Stomp::FieldDict &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WeightedAngularCoordinate" "', argument " "4"" of type '" "Stomp::FieldDict &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::FieldDict * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_WeightedAngularCoordinate" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_WeightedAngularCoordinate" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (Stomp::WeightedAngularCoordinate *)new Stomp::WeightedAngularCoordinate(arg1,arg2,arg3,*arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__WeightedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeightedAngularCoordinate__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Stomp::FieldDict *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::WeightedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_WeightedAngularCoordinate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WeightedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WeightedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WeightedAngularCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_WeightedAngularCoordinate" "', argument " "4"" of type '" "Stomp::FieldDict &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WeightedAngularCoordinate" "', argument " "4"" of type '" "Stomp::FieldDict &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::FieldDict * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_WeightedAngularCoordinate" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  result = (Stomp::WeightedAngularCoordinate *)new Stomp::WeightedAngularCoordinate(arg1,arg2,arg3,*arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__WeightedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeightedAngularCoordinate__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  Stomp::FieldDict *arg4 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::WeightedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_WeightedAngularCoordinate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WeightedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WeightedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WeightedAngularCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_WeightedAngularCoordinate" "', argument " "4"" of type '" "Stomp::FieldDict &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WeightedAngularCoordinate" "', argument " "4"" of type '" "Stomp::FieldDict &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::FieldDict * >(argp4);
  result = (Stomp::WeightedAngularCoordinate *)new Stomp::WeightedAngularCoordinate(arg1,arg2,arg3,*arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__WeightedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeightedAngularCoordinate__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::WeightedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_WeightedAngularCoordinate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WeightedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WeightedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WeightedAngularCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_WeightedAngularCoordinate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (Stomp::WeightedAngularCoordinate *)new Stomp::WeightedAngularCoordinate(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__WeightedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeightedAngularCoordinate__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Stomp::FieldDict *arg5 = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::WeightedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_WeightedAngularCoordinate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WeightedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_WeightedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_WeightedAngularCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_WeightedAngularCoordinate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_WeightedAngularCoordinate" "', argument " "5"" of type '" "Stomp::FieldDict &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WeightedAngularCoordinate" "', argument " "5"" of type '" "Stomp::FieldDict &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::FieldDict * >(argp5);
  result = (Stomp::WeightedAngularCoordinate *)new Stomp::WeightedAngularCoordinate(arg1,arg2,arg3,arg4,*arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__WeightedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WeightedAngularCoordinate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_WeightedAngularCoordinate__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_WeightedAngularCoordinate__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_new_WeightedAngularCoordinate__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_WeightedAngularCoordinate__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_WeightedAngularCoordinate__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_WeightedAngularCoordinate__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_WeightedAngularCoordinate__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_WeightedAngularCoordinate__SWIG_8(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_WeightedAngularCoordinate__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_WeightedAngularCoordinate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::WeightedAngularCoordinate()\n"
    "    Stomp::WeightedAngularCoordinate(double,double,double,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Stomp::WeightedAngularCoordinate(double,double,double,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::WeightedAngularCoordinate(double,double,double)\n"
    "    Stomp::WeightedAngularCoordinate(double,double,double,Stomp::FieldDict &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Stomp::WeightedAngularCoordinate(double,double,double,Stomp::FieldDict &,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::WeightedAngularCoordinate(double,double,double,Stomp::FieldDict &)\n"
    "    Stomp::WeightedAngularCoordinate(double,double,double,double)\n"
    "    Stomp::WeightedAngularCoordinate(double,double,double,double,Stomp::FieldDict &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WeightedAngularCoordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *arg1 = (Stomp::WeightedAngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WeightedAngularCoordinate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WeightedAngularCoordinate" "', argument " "1"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_SetWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *arg1 = (Stomp::WeightedAngularCoordinate *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeightedAngularCoordinate_SetWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_SetWeight" "', argument " "1"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WeightedAngularCoordinate_SetWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_Weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *arg1 = (Stomp::WeightedAngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeightedAngularCoordinate_Weight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_Weight" "', argument " "1"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp1);
  result = (double)(arg1)->Weight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_SetField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *arg1 = (Stomp::WeightedAngularCoordinate *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WeightedAngularCoordinate_SetField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_SetField" "', argument " "1"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_SetField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_SetField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedAngularCoordinate_SetField" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->SetField((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_Field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *arg1 = (Stomp::WeightedAngularCoordinate *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeightedAngularCoordinate_Field",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_Field" "', argument " "1"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_Field" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_Field" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->Field((std::string const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_NFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *arg1 = (Stomp::WeightedAngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeightedAngularCoordinate_NFields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_NFields" "', argument " "1"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp1);
  result = (uint16_t)(arg1)->NFields();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_HasFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *arg1 = (Stomp::WeightedAngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeightedAngularCoordinate_HasFields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_HasFields" "', argument " "1"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp1);
  result = (bool)(arg1)->HasFields();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FieldNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *arg1 = (Stomp::WeightedAngularCoordinate *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeightedAngularCoordinate_FieldNames",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FieldNames" "', argument " "1"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FieldNames" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FieldNames" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  (arg1)->FieldNames(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_CopyFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *arg1 = (Stomp::WeightedAngularCoordinate *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeightedAngularCoordinate_CopyFields",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_CopyFields" "', argument " "1"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_CopyFields" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_CopyFields" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  (arg1)->CopyFields(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_CopyFieldToWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *arg1 = (Stomp::WeightedAngularCoordinate *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeightedAngularCoordinate_CopyFieldToWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_CopyFieldToWeight" "', argument " "1"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_CopyFieldToWeight" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_CopyFieldToWeight" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->CopyFieldToWeight((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_RestoreOriginalWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WeightedAngularCoordinate *arg1 = (Stomp::WeightedAngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WeightedAngularCoordinate_RestoreOriginalWeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_RestoreOriginalWeight" "', argument " "1"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp1);
  (arg1)->RestoreOriginalWeight();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  Stomp::WAngularVector *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector(*arg1,*arg2,*arg3,*arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  Stomp::WAngularVector *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector(*arg1,*arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  Stomp::WAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector(*arg1,*arg2,*arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  double arg3 ;
  Stomp::WAngularVector *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector(*arg1,*arg2,arg3,*arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  double arg3 ;
  Stomp::WAngularVector *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector(*arg1,*arg2,arg3,*arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  double arg3 ;
  Stomp::WAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector(*arg1,*arg2,arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  int8_t arg7 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  signed char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_signed_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "7"" of type '" "int8_t""'");
  } 
  arg7 = static_cast< int8_t >(val7);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,*arg2,*arg3,*arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,*arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp4);
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,*arg2,*arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,(std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  int8_t arg8 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  signed char val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_signed_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "8"" of type '" "int8_t""'");
  } 
  arg8 = static_cast< int8_t >(val8);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2,*arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2,*arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2,*arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2,*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WeightedAngularCoordinate_ToWAngularVector",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_ToWAngularVector" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  result = (bool)Stomp::WeightedAngularCoordinate::ToWAngularVector((std::string const &)*arg1,*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_ToWAngularVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_17(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_10(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_16(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_9(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_15(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_8(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_3(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_14(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_7(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_13(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_signed_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_signed_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_WeightedAngularCoordinate_ToWAngularVector__SWIG_12(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'WeightedAngularCoordinate_ToWAngularVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ToWAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::WAngularVector &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToWAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::WAngularVector &,Stomp::AngularCoordinate::Sphere)\n"
    "    ToWAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::WAngularVector &)\n"
    "    ToWAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,double,Stomp::WAngularVector &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToWAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,double,Stomp::WAngularVector &,Stomp::AngularCoordinate::Sphere)\n"
    "    ToWAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,double,Stomp::WAngularVector &)\n"
    "    ToWAngularVector(std::string const &,Stomp::WAngularVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,int8_t)\n"
    "    ToWAngularVector(std::string const &,Stomp::WAngularVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    ToWAngularVector(std::string const &,Stomp::WAngularVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    ToWAngularVector(std::string const &,Stomp::WAngularVector &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToWAngularVector(std::string const &,Stomp::WAngularVector &,Stomp::AngularCoordinate::Sphere)\n"
    "    ToWAngularVector(std::string const &,Stomp::WAngularVector &)\n"
    "    ToWAngularVector(std::string const &,Stomp::WAngularVector &,Stomp::FieldColumnDict &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,int8_t)\n"
    "    ToWAngularVector(std::string const &,Stomp::WAngularVector &,Stomp::FieldColumnDict &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    ToWAngularVector(std::string const &,Stomp::WAngularVector &,Stomp::FieldColumnDict &,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    ToWAngularVector(std::string const &,Stomp::WAngularVector &,Stomp::FieldColumnDict &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToWAngularVector(std::string const &,Stomp::WAngularVector &,Stomp::FieldColumnDict &,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::WeightedAngularCoordinate::ToWAngularVector(std::string const &,Stomp::WAngularVector &,Stomp::FieldColumnDict &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  uint8_t arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = static_cast< uint8_t >(val8);
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,*arg2,(std::string const &)*arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,*arg2,(std::string const &)*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WeightedAngularCoordinate_FromWAngularVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_FromWAngularVector" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (bool)Stomp::WeightedAngularCoordinate::FromWAngularVector(*arg1,*arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_FromWAngularVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_10(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_8(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_7(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_WeightedAngularCoordinate_FromWAngularVector__SWIG_6(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'WeightedAngularCoordinate_FromWAngularVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FromWAngularVector(Stomp::WAngularVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    FromWAngularVector(Stomp::WAngularVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::AngularCoordinate::Sphere)\n"
    "    FromWAngularVector(Stomp::WAngularVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &)\n"
    "    FromWAngularVector(Stomp::WAngularVector &,std::string const &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    FromWAngularVector(Stomp::WAngularVector &,std::string const &,Stomp::AngularCoordinate::Sphere)\n"
    "    FromWAngularVector(Stomp::WAngularVector &,std::string const &)\n"
    "    FromWAngularVector(Stomp::WAngularVector &,Stomp::FieldColumnDict &,std::string const &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,uint8_t)\n"
    "    FromWAngularVector(Stomp::WAngularVector &,Stomp::FieldColumnDict &,std::string const &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    FromWAngularVector(Stomp::WAngularVector &,Stomp::FieldColumnDict &,std::string const &,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    FromWAngularVector(Stomp::WAngularVector &,Stomp::FieldColumnDict &,std::string const &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    FromWAngularVector(Stomp::WAngularVector &,Stomp::FieldColumnDict &,std::string const &,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::WeightedAngularCoordinate::FromWAngularVector(Stomp::WAngularVector &,Stomp::FieldColumnDict &,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_WeightedAngularCoordinate_AddField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::WAngularVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WeightedAngularCoordinate_AddField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WeightedAngularCoordinate_AddField" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_AddField" "', argument " "1"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::WAngularVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WeightedAngularCoordinate_AddField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_AddField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WeightedAngularCoordinate_AddField" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WeightedAngularCoordinate_AddField" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  result = (bool)Stomp::WeightedAngularCoordinate::AddField(*arg1,(std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *WeightedAngularCoordinate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__WeightedAngularCoordinate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CosmoCoordinate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CosmoCoordinate")) SWIG_fail;
  result = (Stomp::CosmoCoordinate *)new Stomp::CosmoCoordinate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__CosmoCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CosmoCoordinate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  bool arg6 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Stomp::CosmoCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_CosmoCoordinate",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CosmoCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CosmoCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CosmoCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CosmoCoordinate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CosmoCoordinate" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_CosmoCoordinate" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (Stomp::CosmoCoordinate *)new Stomp::CosmoCoordinate(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__CosmoCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CosmoCoordinate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::CosmoCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_CosmoCoordinate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CosmoCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CosmoCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CosmoCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CosmoCoordinate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CosmoCoordinate" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  result = (Stomp::CosmoCoordinate *)new Stomp::CosmoCoordinate(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__CosmoCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CosmoCoordinate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::CosmoCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_CosmoCoordinate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CosmoCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CosmoCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CosmoCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CosmoCoordinate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (Stomp::CosmoCoordinate *)new Stomp::CosmoCoordinate(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__CosmoCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CosmoCoordinate__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::CosmoCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_CosmoCoordinate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CosmoCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CosmoCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_CosmoCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_CosmoCoordinate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_CosmoCoordinate" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (Stomp::CosmoCoordinate *)new Stomp::CosmoCoordinate(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__CosmoCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CosmoCoordinate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CosmoCoordinate__SWIG_0(self, args);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_CosmoCoordinate__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_CosmoCoordinate__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_CosmoCoordinate__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_CosmoCoordinate__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_CosmoCoordinate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::CosmoCoordinate()\n"
    "    Stomp::CosmoCoordinate(double,double,double,double,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Stomp::CosmoCoordinate(double,double,double,double,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::CosmoCoordinate(double,double,double,double)\n"
    "    Stomp::CosmoCoordinate(double,double,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CosmoCoordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoCoordinate *arg1 = (Stomp::CosmoCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CosmoCoordinate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CosmoCoordinate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CosmoCoordinate" "', argument " "1"" of type '" "Stomp::CosmoCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoCoordinate * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ProjectedRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoCoordinate *arg1 = (Stomp::CosmoCoordinate *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoCoordinate_ProjectedRadius",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CosmoCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ProjectedRadius" "', argument " "1"" of type '" "Stomp::CosmoCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ProjectedRadius" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ProjectedRadius" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (double)(arg1)->ProjectedRadius(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_DotProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoCoordinate *arg1 = (Stomp::CosmoCoordinate *) 0 ;
  Stomp::CosmoCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoCoordinate_DotProduct",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CosmoCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_DotProduct" "', argument " "1"" of type '" "Stomp::CosmoCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoCoordinate * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__CosmoCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_DotProduct" "', argument " "2"" of type '" "Stomp::CosmoCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_DotProduct" "', argument " "2"" of type '" "Stomp::CosmoCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::CosmoCoordinate * >(argp2);
  result = (double)(arg1)->DotProduct(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ComovingDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoCoordinate *arg1 = (Stomp::CosmoCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoCoordinate_ComovingDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CosmoCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ComovingDistance" "', argument " "1"" of type '" "Stomp::CosmoCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoCoordinate * >(argp1);
  result = (double)(arg1)->ComovingDistance();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_AngularDiameterDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoCoordinate *arg1 = (Stomp::CosmoCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoCoordinate_AngularDiameterDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CosmoCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_AngularDiameterDistance" "', argument " "1"" of type '" "Stomp::CosmoCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoCoordinate * >(argp1);
  result = (double)(arg1)->AngularDiameterDistance();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_LuminosityDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoCoordinate *arg1 = (Stomp::CosmoCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoCoordinate_LuminosityDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CosmoCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_LuminosityDistance" "', argument " "1"" of type '" "Stomp::CosmoCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoCoordinate * >(argp1);
  result = (double)(arg1)->LuminosityDistance();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_Redshift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoCoordinate *arg1 = (Stomp::CosmoCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoCoordinate_Redshift",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CosmoCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_Redshift" "', argument " "1"" of type '" "Stomp::CosmoCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoCoordinate * >(argp1);
  result = (double)(arg1)->Redshift();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_SetRedshift(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoCoordinate *arg1 = (Stomp::CosmoCoordinate *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoCoordinate_SetRedshift",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__CosmoCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_SetRedshift" "', argument " "1"" of type '" "Stomp::CosmoCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CosmoCoordinate_SetRedshift" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetRedshift(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  Stomp::CosmoVector *arg5 = 0 ;
  Stomp::AngularCoordinate::Sphere arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::CosmoVector * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "6"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg6 = static_cast< Stomp::AngularCoordinate::Sphere >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector(*arg1,*arg2,*arg3,*arg4,*arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  Stomp::CosmoVector *arg5 = 0 ;
  Stomp::AngularCoordinate::Sphere arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::CosmoVector * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "6"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg6 = static_cast< Stomp::AngularCoordinate::Sphere >(val6);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector(*arg1,*arg2,*arg3,*arg4,*arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  Stomp::CosmoVector *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::CosmoVector * >(argp5);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector(*arg1,*arg2,*arg3,*arg4,*arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  double arg4 ;
  Stomp::CosmoVector *arg5 = 0 ;
  Stomp::AngularCoordinate::Sphere arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::CosmoVector * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "6"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg6 = static_cast< Stomp::AngularCoordinate::Sphere >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector(*arg1,*arg2,*arg3,arg4,*arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  double arg4 ;
  Stomp::CosmoVector *arg5 = 0 ;
  Stomp::AngularCoordinate::Sphere arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::CosmoVector * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "6"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg6 = static_cast< Stomp::AngularCoordinate::Sphere >(val6);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector(*arg1,*arg2,*arg3,arg4,*arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  double arg4 ;
  Stomp::CosmoVector *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::CosmoVector * >(argp5);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector(*arg1,*arg2,*arg3,arg4,*arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::CosmoVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  int8_t arg8 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  signed char val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::CosmoVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_signed_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "8"" of type '" "int8_t""'");
  } 
  arg8 = static_cast< int8_t >(val8);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::CosmoVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::CosmoVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::CosmoVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::CosmoVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::CosmoVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::CosmoVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::CosmoVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::CosmoVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector((std::string const &)*arg1,*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::CosmoVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::CosmoVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::CosmoVector *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoCoordinate_ToCosmoVector",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_ToCosmoVector" "', argument " "2"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::CosmoVector * >(argp2);
  result = (bool)Stomp::CosmoCoordinate::ToCosmoVector((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_ToCosmoVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_12(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_10(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_8(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_3(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_7(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_signed_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_CosmoCoordinate_ToCosmoVector__SWIG_6(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CosmoCoordinate_ToCosmoVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ToCosmoVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::CosmoVector &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToCosmoVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::CosmoVector &,Stomp::AngularCoordinate::Sphere)\n"
    "    ToCosmoVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::CosmoVector &)\n"
    "    ToCosmoVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,double,Stomp::CosmoVector &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToCosmoVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,double,Stomp::CosmoVector &,Stomp::AngularCoordinate::Sphere)\n"
    "    ToCosmoVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,double,Stomp::CosmoVector &)\n"
    "    ToCosmoVector(std::string const &,Stomp::CosmoVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,uint8_t,int8_t)\n"
    "    ToCosmoVector(std::string const &,Stomp::CosmoVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,uint8_t)\n"
    "    ToCosmoVector(std::string const &,Stomp::CosmoVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    ToCosmoVector(std::string const &,Stomp::CosmoVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    ToCosmoVector(std::string const &,Stomp::CosmoVector &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToCosmoVector(std::string const &,Stomp::CosmoVector &,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::CosmoCoordinate::ToCosmoVector(std::string const &,Stomp::CosmoVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_FromCosmoVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  Stomp::AngularCoordinate::Sphere arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:CosmoCoordinate_FromCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "6"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg6 = static_cast< Stomp::AngularCoordinate::Sphere >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  result = (bool)Stomp::CosmoCoordinate::FromCosmoVector(*arg1,*arg2,*arg3,*arg4,*arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_FromCosmoVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  Stomp::AngularCoordinate::Sphere arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CosmoCoordinate_FromCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "6"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg6 = static_cast< Stomp::AngularCoordinate::Sphere >(val6);
  result = (bool)Stomp::CosmoCoordinate::FromCosmoVector(*arg1,*arg2,*arg3,*arg4,*arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_FromCosmoVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CosmoCoordinate_FromCosmoVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp5);
  result = (bool)Stomp::CosmoCoordinate::FromCosmoVector(*arg1,*arg2,*arg3,*arg4,*arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_FromCosmoVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CosmoCoordinate_FromCosmoVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)Stomp::CosmoCoordinate::FromCosmoVector(*arg1,(std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_FromCosmoVector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CosmoCoordinate_FromCosmoVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (bool)Stomp::CosmoCoordinate::FromCosmoVector(*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_FromCosmoVector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::CosmoVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoCoordinate_FromCosmoVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "1"" of type '" "Stomp::CosmoVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::CosmoVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoCoordinate_FromCosmoVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)Stomp::CosmoCoordinate::FromCosmoVector(*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoCoordinate_FromCosmoVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CosmoCoordinate_FromCosmoVector__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CosmoCoordinate_FromCosmoVector__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CosmoCoordinate_FromCosmoVector__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_CosmoCoordinate_FromCosmoVector__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_CosmoCoordinate_FromCosmoVector__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_CosmoCoordinate_FromCosmoVector__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CosmoCoordinate_FromCosmoVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FromCosmoVector(Stomp::CosmoVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    FromCosmoVector(Stomp::CosmoVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::AngularCoordinate::Sphere)\n"
    "    FromCosmoVector(Stomp::CosmoVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &)\n"
    "    FromCosmoVector(Stomp::CosmoVector &,std::string const &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    FromCosmoVector(Stomp::CosmoVector &,std::string const &,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::CosmoCoordinate::FromCosmoVector(Stomp::CosmoVector &,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *CosmoCoordinate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__CosmoCoordinate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IndexedAngularCoordinate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IndexedAngularCoordinate")) SWIG_fail;
  result = (Stomp::IndexedAngularCoordinate *)new Stomp::IndexedAngularCoordinate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedAngularCoordinate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  uint32_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::IndexedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_IndexedAngularCoordinate",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedAngularCoordinate" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_IndexedAngularCoordinate" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_IndexedAngularCoordinate" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (Stomp::IndexedAngularCoordinate *)new Stomp::IndexedAngularCoordinate(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedAngularCoordinate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  uint32_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::IndexedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_IndexedAngularCoordinate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedAngularCoordinate" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_IndexedAngularCoordinate" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  result = (Stomp::IndexedAngularCoordinate *)new Stomp::IndexedAngularCoordinate(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedAngularCoordinate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  uint32_t arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::IndexedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_IndexedAngularCoordinate",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedAngularCoordinate" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (Stomp::IndexedAngularCoordinate *)new Stomp::IndexedAngularCoordinate(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedAngularCoordinate__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  uint32_t arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::IndexedAngularCoordinate *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_IndexedAngularCoordinate",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexedAngularCoordinate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedAngularCoordinate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedAngularCoordinate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_IndexedAngularCoordinate" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  result = (Stomp::IndexedAngularCoordinate *)new Stomp::IndexedAngularCoordinate(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedAngularCoordinate, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedAngularCoordinate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IndexedAngularCoordinate__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_IndexedAngularCoordinate__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_IndexedAngularCoordinate__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_IndexedAngularCoordinate__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_IndexedAngularCoordinate__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_IndexedAngularCoordinate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::IndexedAngularCoordinate()\n"
    "    Stomp::IndexedAngularCoordinate(double,double,uint32_t,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Stomp::IndexedAngularCoordinate(double,double,uint32_t,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::IndexedAngularCoordinate(double,double,uint32_t)\n"
    "    Stomp::IndexedAngularCoordinate(double,double,double,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IndexedAngularCoordinate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedAngularCoordinate *arg1 = (Stomp::IndexedAngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IndexedAngularCoordinate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedAngularCoordinate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexedAngularCoordinate" "', argument " "1"" of type '" "Stomp::IndexedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedAngularCoordinate * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_SetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedAngularCoordinate *arg1 = (Stomp::IndexedAngularCoordinate *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedAngularCoordinate_SetIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_SetIndex" "', argument " "1"" of type '" "Stomp::IndexedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedAngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexedAngularCoordinate_SetIndex" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->SetIndex(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_Index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedAngularCoordinate *arg1 = (Stomp::IndexedAngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedAngularCoordinate_Index",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_Index" "', argument " "1"" of type '" "Stomp::IndexedAngularCoordinate *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedAngularCoordinate * >(argp1);
  result = (uint32_t)(arg1)->Index();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg3 = 0 ;
  Stomp::IAngularVector *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IAngularVector * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector(*arg1,*arg2,*arg3,*arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg3 = 0 ;
  Stomp::IAngularVector *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IAngularVector * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector(*arg1,*arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg3 = 0 ;
  Stomp::IAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IAngularVector * >(argp4);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector(*arg1,*arg2,*arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  Stomp::IAngularVector *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::IAngularVector * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector(*arg1,*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  Stomp::IAngularVector *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::IAngularVector * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector(*arg1,*arg2,*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  Stomp::IAngularVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::IAngularVector * >(argp3);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector(*arg1,*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  int8_t arg7 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  signed char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_signed_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "7"" of type '" "int8_t""'");
  } 
  arg7 = static_cast< int8_t >(val7);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector((std::string const &)*arg1,*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector((std::string const &)*arg1,*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedAngularCoordinate_ToIAngularVector",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_ToIAngularVector" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  result = (bool)Stomp::IndexedAngularCoordinate::ToIAngularVector((std::string const &)*arg1,*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_ToIAngularVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_11(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_10(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_9(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_8(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_7(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_signed_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_IndexedAngularCoordinate_ToIAngularVector__SWIG_6(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedAngularCoordinate_ToIAngularVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ToIAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< uint32_t,std::allocator< uint32_t > > &,Stomp::IAngularVector &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToIAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< uint32_t,std::allocator< uint32_t > > &,Stomp::IAngularVector &,Stomp::AngularCoordinate::Sphere)\n"
    "    ToIAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< uint32_t,std::allocator< uint32_t > > &,Stomp::IAngularVector &)\n"
    "    ToIAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::IAngularVector &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToIAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::IAngularVector &,Stomp::AngularCoordinate::Sphere)\n"
    "    ToIAngularVector(std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,Stomp::IAngularVector &)\n"
    "    ToIAngularVector(std::string const &,Stomp::IAngularVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,int8_t)\n"
    "    ToIAngularVector(std::string const &,Stomp::IAngularVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    ToIAngularVector(std::string const &,Stomp::IAngularVector &,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    ToIAngularVector(std::string const &,Stomp::IAngularVector &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    ToIAngularVector(std::string const &,Stomp::IAngularVector &,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::IndexedAngularCoordinate::ToIAngularVector(std::string const &,Stomp::IAngularVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IAngularVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IndexedAngularCoordinate_FromIAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (bool)Stomp::IndexedAngularCoordinate::FromIAngularVector(*arg1,*arg2,*arg3,*arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IAngularVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg4 = 0 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IndexedAngularCoordinate_FromIAngularVector",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  result = (bool)Stomp::IndexedAngularCoordinate::FromIAngularVector(*arg1,*arg2,*arg3,*arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IAngularVector *arg1 = 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedAngularCoordinate_FromIAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IAngularVector * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp4);
  result = (bool)Stomp::IndexedAngularCoordinate::FromIAngularVector(*arg1,*arg2,*arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IAngularVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedAngularCoordinate_FromIAngularVector",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IAngularVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)Stomp::IndexedAngularCoordinate::FromIAngularVector(*arg1,(std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IAngularVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedAngularCoordinate_FromIAngularVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IAngularVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (bool)Stomp::IndexedAngularCoordinate::FromIAngularVector(*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IAngularVector *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedAngularCoordinate_FromIAngularVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "1"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IAngularVector * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedAngularCoordinate_FromIAngularVector" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)Stomp::IndexedAngularCoordinate::FromIAngularVector(*arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedAngularCoordinate_FromIAngularVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_IndexedAngularCoordinate_FromIAngularVector__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedAngularCoordinate_FromIAngularVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FromIAngularVector(Stomp::IAngularVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< uint32_t,std::allocator< uint32_t > > &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    FromIAngularVector(Stomp::IAngularVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< uint32_t,std::allocator< uint32_t > > &,Stomp::AngularCoordinate::Sphere)\n"
    "    FromIAngularVector(Stomp::IAngularVector &,std::vector< double,std::allocator< double > > &,std::vector< double,std::allocator< double > > &,std::vector< uint32_t,std::allocator< uint32_t > > &)\n"
    "    FromIAngularVector(Stomp::IAngularVector &,std::string const &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    FromIAngularVector(Stomp::IAngularVector &,std::string const &,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::IndexedAngularCoordinate::FromIAngularVector(Stomp::IAngularVector &,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *IndexedAngularCoordinate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__IndexedAngularCoordinate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreePixel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreePixel")) SWIG_fail;
  result = (Stomp::TreePixel *)new Stomp::TreePixel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePixel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::TreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_TreePixel",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TreePixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreePixel" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (Stomp::TreePixel *)new Stomp::TreePixel(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePixel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::TreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TreePixel",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TreePixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::TreePixel *)new Stomp::TreePixel(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePixel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::TreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_TreePixel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreePixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreePixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreePixel" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (Stomp::TreePixel *)new Stomp::TreePixel(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePixel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::TreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TreePixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreePixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreePixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::TreePixel *)new Stomp::TreePixel(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePixel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint16_t arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::TreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_TreePixel",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TreePixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreePixel" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreePixel" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  result = (Stomp::TreePixel *)new Stomp::TreePixel(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePixel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::TreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_TreePixel",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TreePixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreePixel" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (Stomp::TreePixel *)new Stomp::TreePixel(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreePixel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreePixel__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TreePixel__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TreePixel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_TreePixel__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_TreePixel__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_TreePixel__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_TreePixel__SWIG_5(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_TreePixel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::TreePixel()\n"
    "    Stomp::TreePixel(uint32_t const,uint32_t const,uint16_t const)\n"
    "    Stomp::TreePixel(uint32_t const,uint32_t const)\n"
    "    Stomp::TreePixel(Stomp::AngularCoordinate &,uint32_t const,uint16_t const)\n"
    "    Stomp::TreePixel(Stomp::AngularCoordinate &,uint32_t const)\n"
    "    Stomp::TreePixel(uint32_t const,uint32_t const,uint32_t const,uint16_t const)\n"
    "    Stomp::TreePixel(uint32_t const,uint32_t const,uint32_t const)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TreePixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreePixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreePixel" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel__InitializeSubPixels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel__InitializeSubPixels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel__InitializeSubPixels" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (bool)(arg1)->_InitializeSubPixels();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectPairCount__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_DirectPairCount",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectPairCount" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectPairCount" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectPairCount" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectPairCount" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectPairCount" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_DirectPairCount" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  result = (uint32_t)(arg1)->DirectPairCount(*arg2,*arg3,arg4);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectPairCount__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_DirectPairCount",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectPairCount" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectPairCount" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectPairCount" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectPairCount" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectPairCount" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (uint32_t)(arg1)->DirectPairCount(*arg2,*arg3);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectPairCount(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_DirectPairCount__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_DirectPairCount__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreePixel_DirectPairCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DirectPairCount(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &,int16_t)\n"
    "    DirectPairCount(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindPairs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindPairs" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  result = (uint32_t)(arg1)->FindPairs(*arg2,*arg3,arg4);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindPairs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (uint32_t)(arg1)->FindPairs(*arg2,*arg3);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindPairs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (uint32_t)(arg1)->FindPairs(*arg2,arg3,arg4);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindPairs__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (uint32_t)(arg1)->FindPairs(*arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectWeightedPairs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_DirectWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  result = (double)(arg1)->DirectWeightedPairs(*arg2,*arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectWeightedPairs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_DirectWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (double)(arg1)->DirectWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectWeightedPairs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_DirectWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  result = (double)(arg1)->DirectWeightedPairs(*arg2,*arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectWeightedPairs__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_DirectWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (double)(arg1)->DirectWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindPairs__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindPairs" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  (arg1)->FindPairs(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindPairs__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  (arg1)->FindPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindPairs__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindPairs" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  (arg1)->FindPairs(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindPairs__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  (arg1)->FindPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindPairs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_FindPairs__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreePixel_FindPairs__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_FindPairs__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_FindPairs__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindPairs__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindPairs__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindPairs__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindPairs__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreePixel_FindPairs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &,int16_t)\n"
    "    FindPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &)\n"
    "    FindPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,double,double)\n"
    "    FindPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,double)\n"
    "    FindPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularBin &,int16_t)\n"
    "    FindPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularBin &)\n"
    "    FindPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularCorrelation &,int16_t)\n"
    "    FindPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularCorrelation &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  (arg1)->FindWeightedPairs(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  (arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  (arg1)->FindWeightedPairs(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  (arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  (arg1)->FindWeightedPairs(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  (arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  int16_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  ecode4 = SWIG_AsVal_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "int16_t""'");
  } 
  arg4 = static_cast< int16_t >(val4);
  (arg1)->FindWeightedPairs(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  (arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectWeightedPairs__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_DirectWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "5"" of type '" "int16_t""'");
  } 
  arg5 = static_cast< int16_t >(val5);
  result = (double)(arg1)->DirectWeightedPairs(*arg2,*arg3,(std::string const &)*arg4,arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectWeightedPairs__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_DirectWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (double)(arg1)->DirectWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "int16_t""'");
  } 
  arg5 = static_cast< int16_t >(val5);
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4,arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_19(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "int16_t""'");
  } 
  arg5 = static_cast< int16_t >(val5);
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_21(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "int16_t""'");
  } 
  arg5 = static_cast< int16_t >(val5);
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_23(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectWeightedPairs__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_DirectWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "5"" of type '" "int16_t""'");
  } 
  arg5 = static_cast< int16_t >(val5);
  result = (double)(arg1)->DirectWeightedPairs(*arg2,*arg3,(std::string const &)*arg4,arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectWeightedPairs__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_DirectWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (double)(arg1)->DirectWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_24(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "int16_t""'");
  } 
  arg5 = static_cast< int16_t >(val5);
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4,arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_25(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_26(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_27(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_28(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "int16_t""'");
  } 
  arg5 = static_cast< int16_t >(val5);
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_29(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_30(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  short val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  ecode5 = SWIG_AsVal_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "int16_t""'");
  } 
  arg5 = static_cast< int16_t >(val5);
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_31(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectWeightedPairs__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularBin *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int16_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  short val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TreePixel_DirectWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularBin * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  ecode6 = SWIG_AsVal_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "6"" of type '" "int16_t""'");
  } 
  arg6 = static_cast< int16_t >(val6);
  result = (double)(arg1)->DirectWeightedPairs(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5,arg6);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectWeightedPairs__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularBin *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_DirectWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularBin * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreePixel_DirectWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_DirectWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (double)(arg1)->DirectWeightedPairs(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_DirectWeightedPairs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_DirectWeightedPairs__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_DirectWeightedPairs__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_DirectWeightedPairs__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreePixel_DirectWeightedPairs__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_DirectWeightedPairs__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreePixel_DirectWeightedPairs__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TreePixel_DirectWeightedPairs__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreePixel_DirectWeightedPairs__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TreePixel_DirectWeightedPairs__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_short(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TreePixel_DirectWeightedPairs__SWIG_8(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreePixel_DirectWeightedPairs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DirectWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &,int16_t)\n"
    "    DirectWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &)\n"
    "    DirectWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,Stomp::AngularBin &,int16_t)\n"
    "    DirectWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,Stomp::AngularBin &)\n"
    "    DirectWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &,std::string const &,int16_t)\n"
    "    DirectWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &,std::string const &)\n"
    "    DirectWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,Stomp::AngularBin &,std::string const &,int16_t)\n"
    "    DirectWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,Stomp::AngularBin &,std::string const &)\n"
    "    DirectWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,std::string const &,Stomp::AngularBin &,std::string const &,int16_t)\n"
    "    DirectWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,std::string const &,Stomp::AngularBin &,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularBin *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int16_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  short val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularBin * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  ecode6 = SWIG_AsVal_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TreePixel_FindWeightedPairs" "', argument " "6"" of type '" "int16_t""'");
  } 
  arg6 = static_cast< int16_t >(val6);
  result = (double)(arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5,arg6);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_33(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularBin *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularBin * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_34(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TreePixel_FindWeightedPairs" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,arg4,arg5,(std::string const &)*arg6);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_35(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_36(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularBin *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int16_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  short val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularBin * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  ecode6 = SWIG_AsVal_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TreePixel_FindWeightedPairs" "', argument " "6"" of type '" "int16_t""'");
  } 
  arg6 = static_cast< int16_t >(val6);
  (arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_37(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularBin *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularBin * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_38(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularCorrelation *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int16_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  short val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularCorrelation * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  ecode6 = SWIG_AsVal_short(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TreePixel_FindWeightedPairs" "', argument " "6"" of type '" "int16_t""'");
  } 
  arg6 = static_cast< int16_t >(val6);
  (arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs__SWIG_39(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularCorrelation *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreePixel_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularCorrelation * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindWeightedPairs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_FindWeightedPairs__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreePixel_FindWeightedPairs__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_FindWeightedPairs__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreePixel_FindWeightedPairs__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_FindWeightedPairs__SWIG_9(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_FindWeightedPairs__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_FindWeightedPairs__SWIG_13(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_FindWeightedPairs__SWIG_15(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_8(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_10(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_25(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_12(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_14(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_27(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_17(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_21(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_23(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_19(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_29(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreePixel_FindWeightedPairs__SWIG_31(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_24(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_20(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_26(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_33(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_28(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_22(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_30(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_35(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_short(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_16(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_18(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_37(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreePixel_FindWeightedPairs__SWIG_39(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_short(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TreePixel_FindWeightedPairs__SWIG_36(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_short(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TreePixel_FindWeightedPairs__SWIG_32(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_short(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TreePixel_FindWeightedPairs__SWIG_38(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_TreePixel_FindWeightedPairs__SWIG_34(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreePixel_FindWeightedPairs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,double,double)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,double)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,Stomp::AngularBin &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,Stomp::AngularBin &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,double,double)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,double)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularBin &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularBin &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularCorrelation &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularCorrelation &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,Stomp::AngularBin &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,Stomp::AngularBin &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,Stomp::AngularCorrelation &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,Stomp::AngularCorrelation &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &,std::string const &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,double,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularCoordinate &,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularBin &,std::string const &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularCorrelation &,std::string const &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::AngularVector &,Stomp::AngularCorrelation &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,Stomp::AngularBin &,std::string const &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,double,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,Stomp::AngularBin &,std::string const &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,Stomp::AngularCorrelation &,std::string const &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,Stomp::AngularCorrelation &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,std::string const &,Stomp::AngularBin &,std::string const &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,std::string const &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,std::string const &,double,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &,std::string const &,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,std::string const &,Stomp::AngularBin &,std::string const &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,std::string const &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,std::string const &,Stomp::AngularCorrelation &,std::string const &,int16_t)\n"
    "    FindWeightedPairs(Stomp::TreePixel *,Stomp::WAngularVector &,std::string const &,Stomp::AngularCorrelation &,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindKNearestNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint8_t arg3 ;
  Stomp::WAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_FindKNearestNeighbors",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindKNearestNeighbors" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindKNearestNeighbors" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindKNearestNeighbors" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_FindKNearestNeighbors" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_FindKNearestNeighbors" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindKNearestNeighbors" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  result = (uint16_t)(arg1)->FindKNearestNeighbors(*arg2,arg3,*arg4);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FindNearestNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::WeightedAngularCoordinate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FindNearestNeighbor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FindNearestNeighbor" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FindNearestNeighbor" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindNearestNeighbor" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FindNearestNeighbor" "', argument " "3"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FindNearestNeighbor" "', argument " "3"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp3);
  result = (uint16_t)(arg1)->FindNearestNeighbor(*arg2,*arg3);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_KNearestNeighborDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_KNearestNeighborDistance",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_KNearestNeighborDistance" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_KNearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_KNearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_KNearestNeighborDistance" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_KNearestNeighborDistance" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_KNearestNeighborDistance" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  result = (double)(arg1)->KNearestNeighborDistance(*arg2,arg3,*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_NearestNeighborDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_NearestNeighborDistance",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_NearestNeighborDistance" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_NearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_NearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_NearestNeighborDistance" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_NearestNeighborDistance" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  result = (double)(arg1)->NearestNeighborDistance(*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_ClosestMatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::WeightedAngularCoordinate *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_ClosestMatch",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_ClosestMatch" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_ClosestMatch" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_ClosestMatch" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_ClosestMatch" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreePixel_ClosestMatch" "', argument " "4"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_ClosestMatch" "', argument " "4"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp4);
  result = (bool)(arg1)->ClosestMatch(*arg2,arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_InitializeCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_InitializeCorners",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_InitializeCorners" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  (arg1)->InitializeCorners();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_AddPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePixel_AddPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_AddPoint" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_AddPoint" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_AddPoint" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  result = (bool)(arg1)->AddPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_AddPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_AddPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_AddPoint" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_AddPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->AddPoint(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_AddPoint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePixel_AddPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_AddPoint" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->AddPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_AddPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePixel_AddPoint__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePixel_AddPoint__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreePixel_AddPoint__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreePixel_AddPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddPoint(Stomp::TreePixel *,Stomp::WeightedAngularCoordinate &)\n"
    "    AddPoint(Stomp::TreePixel *,Stomp::AngularCoordinate &,double)\n"
    "    AddPoint(Stomp::TreePixel *,Stomp::AngularCoordinate &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_NPoints__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_NPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_NPoints" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (uint32_t)(arg1)->NPoints();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_NPoints__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePixel_NPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_NPoints" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_NPoints" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_NPoints" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (uint32_t)(arg1)->NPoints(*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_NPoints(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreePixel_NPoints__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePixel_NPoints__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreePixel_NPoints'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NPoints(Stomp::TreePixel *)\n"
    "    NPoints(Stomp::TreePixel *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_PixelWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePixel_PixelWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_PixelWeight" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_PixelWeight" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_PixelWeight" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->PixelWeight(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_Coverage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_Coverage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_Coverage" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->Coverage();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_Coverage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePixel_Coverage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_Coverage" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_Coverage" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_Coverage" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->Coverage(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_Coverage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreePixel_Coverage__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePixel_Coverage__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreePixel_Coverage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Coverage(Stomp::TreePixel *)\n"
    "    Coverage(Stomp::TreePixel *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_Points__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePixel_Points",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_Points" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_Points" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_Points" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  (arg1)->Points(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_Points__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::Pixel *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_Points",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_Points" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_Points" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_Points" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_Points" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_Points" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::Pixel * >(argp3);
  (arg1)->Points(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_Points(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePixel_Points__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_Points__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreePixel_Points'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Points(Stomp::TreePixel *,Stomp::WAngularVector &)\n"
    "    Points(Stomp::TreePixel *,Stomp::WAngularVector &,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_Nodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_Nodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_Nodes" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (uint16_t)(arg1)->Nodes();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_AddToWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePixel_AddToWeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_AddToWeight" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreePixel_AddToWeight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->AddToWeight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FieldTotal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePixel_FieldTotal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FieldTotal" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FieldTotal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FieldTotal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->FieldTotal((std::string const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FieldTotal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::Pixel *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_FieldTotal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FieldTotal" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FieldTotal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FieldTotal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_FieldTotal" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FieldTotal" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::Pixel * >(argp3);
  result = (double)(arg1)->FieldTotal((std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FieldTotal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreePixel_FieldTotal__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreePixel_FieldTotal__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreePixel_FieldTotal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FieldTotal(Stomp::TreePixel *,std::string const &)\n"
    "    FieldTotal(Stomp::TreePixel *,std::string const &,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_AddToField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreePixel_AddToField",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_AddToField" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_AddToField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_AddToField" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreePixel_AddToField" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  (arg1)->AddToField((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_NField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_NField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_NField" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (uint16_t)(arg1)->NField();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_HasFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_HasFields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_HasFields" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (bool)(arg1)->HasFields();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_FieldNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePixel_FieldNames",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_FieldNames" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_FieldNames" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_FieldNames" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  (arg1)->FieldNames(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_SetPixelCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreePixel_SetPixelCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_SetPixelCapacity" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreePixel_SetPixelCapacity" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  (arg1)->SetPixelCapacity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_PixelCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_PixelCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_PixelCapacity" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (uint16_t)(arg1)->PixelCapacity();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_HasPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_HasPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_HasPoints" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (bool)(arg1)->HasPoints();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_HasNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_HasNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_HasNodes" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (bool)(arg1)->HasNodes();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_Clear" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereX" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereX();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereY" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereY();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereZ" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereX_UL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereX_UL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereX_UL" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_UL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereY_UL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereY_UL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereY_UL" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_UL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereZ_UL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereZ_UL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereZ_UL" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_UL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereX_UR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereX_UR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereX_UR" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_UR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereY_UR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereY_UR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereY_UR" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_UR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereZ_UR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereZ_UR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereZ_UR" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_UR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereX_LL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereX_LL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereX_LL" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_LL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereY_LL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereY_LL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereY_LL" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_LL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereZ_LL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereZ_LL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereZ_LL" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_LL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereX_LR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereX_LR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereX_LR" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_LR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereY_LR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereY_LR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereY_LR" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_LR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_UnitSphereZ_LR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreePixel_UnitSphereZ_LR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_UnitSphereZ_LR" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_LR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreePixel_WithinAnnulus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreePixel *arg1 = (Stomp::TreePixel *) 0 ;
  Stomp::AngularBin *arg2 = 0 ;
  Stomp::PixelVector *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreePixel_WithinAnnulus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreePixel_WithinAnnulus" "', argument " "1"" of type '" "Stomp::TreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreePixel_WithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_WithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularBin * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreePixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreePixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreePixel_WithinAnnulus" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->WithinAnnulus(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreePixel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__TreePixel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NearestNeighborPixel___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborPixel *arg1 = (Stomp::NearestNeighborPixel *) 0 ;
  Stomp::DistancePixelPair *arg2 = 0 ;
  Stomp::DistancePixelPair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NearestNeighborPixel___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__NearestNeighborPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NearestNeighborPixel___call__" "', argument " "1"" of type '" "Stomp::NearestNeighborPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::NearestNeighborPixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__pairT_double_Stomp__TreePixel_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NearestNeighborPixel___call__" "', argument " "2"" of type '" "Stomp::DistancePixelPair const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NearestNeighborPixel___call__" "', argument " "2"" of type '" "Stomp::DistancePixelPair const &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::DistancePixelPair * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__pairT_double_Stomp__TreePixel_p_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NearestNeighborPixel___call__" "', argument " "3"" of type '" "Stomp::DistancePixelPair const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NearestNeighborPixel___call__" "', argument " "3"" of type '" "Stomp::DistancePixelPair const &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::DistancePixelPair * >(argp3);
  result = (int)(arg1)->operator ()((Stomp::DistancePixelPair const &)*arg2,(Stomp::DistancePixelPair const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NearestNeighborPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NearestNeighborPixel")) SWIG_fail;
  result = (Stomp::NearestNeighborPixel *)new Stomp::NearestNeighborPixel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__NearestNeighborPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NearestNeighborPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborPixel *arg1 = (Stomp::NearestNeighborPixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NearestNeighborPixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__NearestNeighborPixel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NearestNeighborPixel" "', argument " "1"" of type '" "Stomp::NearestNeighborPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::NearestNeighborPixel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NearestNeighborPixel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__NearestNeighborPixel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NearestNeighborPoint___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborPoint *arg1 = (Stomp::NearestNeighborPoint *) 0 ;
  Stomp::DistancePointPair *arg2 = 0 ;
  Stomp::DistancePointPair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NearestNeighborPoint___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__NearestNeighborPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NearestNeighborPoint___call__" "', argument " "1"" of type '" "Stomp::NearestNeighborPoint *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::NearestNeighborPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NearestNeighborPoint___call__" "', argument " "2"" of type '" "Stomp::DistancePointPair const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NearestNeighborPoint___call__" "', argument " "2"" of type '" "Stomp::DistancePointPair const &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::DistancePointPair * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NearestNeighborPoint___call__" "', argument " "3"" of type '" "Stomp::DistancePointPair const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NearestNeighborPoint___call__" "', argument " "3"" of type '" "Stomp::DistancePointPair const &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::DistancePointPair * >(argp3);
  result = (int)(arg1)->operator ()((Stomp::DistancePointPair const &)*arg2,(Stomp::DistancePointPair const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NearestNeighborPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NearestNeighborPoint")) SWIG_fail;
  result = (Stomp::NearestNeighborPoint *)new Stomp::NearestNeighborPoint();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__NearestNeighborPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NearestNeighborPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborPoint *arg1 = (Stomp::NearestNeighborPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NearestNeighborPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__NearestNeighborPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NearestNeighborPoint" "', argument " "1"" of type '" "Stomp::NearestNeighborPoint *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::NearestNeighborPoint * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NearestNeighborPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__NearestNeighborPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreeNeighbor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::TreeNeighbor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TreeNeighbor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeNeighbor" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeNeighbor" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreeNeighbor" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (Stomp::TreeNeighbor *)new Stomp::TreeNeighbor(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeNeighbor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeNeighbor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::TreeNeighbor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeNeighbor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeNeighbor" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeNeighbor" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (Stomp::TreeNeighbor *)new Stomp::TreeNeighbor(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeNeighbor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeNeighbor(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeNeighbor__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TreeNeighbor__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_TreeNeighbor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::TreeNeighbor(Stomp::AngularCoordinate &,uint8_t)\n"
    "    Stomp::TreeNeighbor(Stomp::AngularCoordinate &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TreeNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeNeighbor *arg1 = (Stomp::TreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreeNeighbor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeNeighbor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeNeighbor" "', argument " "1"" of type '" "Stomp::TreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeNeighbor * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeNeighbor_NearestNeighbors__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeNeighbor *arg1 = (Stomp::TreeNeighbor *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeNeighbor_NearestNeighbors",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNeighbor_NearestNeighbors" "', argument " "1"" of type '" "Stomp::TreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeNeighbor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeNeighbor_NearestNeighbors" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeNeighbor_NearestNeighbors" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeNeighbor_NearestNeighbors" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->NearestNeighbors(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeNeighbor_NearestNeighbors__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeNeighbor *arg1 = (Stomp::TreeNeighbor *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeNeighbor_NearestNeighbors",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNeighbor_NearestNeighbors" "', argument " "1"" of type '" "Stomp::TreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeNeighbor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeNeighbor_NearestNeighbors" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeNeighbor_NearestNeighbors" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  (arg1)->NearestNeighbors(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeNeighbor_NearestNeighbors(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeNeighbor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeNeighbor_NearestNeighbors__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeNeighbor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeNeighbor_NearestNeighbors__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeNeighbor_NearestNeighbors'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NearestNeighbors(Stomp::TreeNeighbor *,Stomp::WAngularVector &,bool)\n"
    "    NearestNeighbors(Stomp::TreeNeighbor *,Stomp::WAngularVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeNeighbor_Neighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeNeighbor *arg1 = (Stomp::TreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeNeighbor_Neighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNeighbor_Neighbors" "', argument " "1"" of type '" "Stomp::TreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeNeighbor * >(argp1);
  result = (uint8_t)(arg1)->Neighbors();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeNeighbor_MaxNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeNeighbor *arg1 = (Stomp::TreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeNeighbor_MaxNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNeighbor_MaxNeighbors" "', argument " "1"" of type '" "Stomp::TreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeNeighbor * >(argp1);
  result = (uint8_t)(arg1)->MaxNeighbors();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeNeighbor_TestPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeNeighbor *arg1 = (Stomp::TreeNeighbor *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = (Stomp::WeightedAngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeNeighbor_TestPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNeighbor_TestPoint" "', argument " "1"" of type '" "Stomp::TreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeNeighbor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeNeighbor_TestPoint" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate *""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  result = (bool)(arg1)->TestPoint(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeNeighbor_MaxDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeNeighbor *arg1 = (Stomp::TreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeNeighbor_MaxDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNeighbor_MaxDistance" "', argument " "1"" of type '" "Stomp::TreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeNeighbor * >(argp1);
  result = (double)(arg1)->MaxDistance();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeNeighbor_MaxAngularDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeNeighbor *arg1 = (Stomp::TreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeNeighbor_MaxAngularDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNeighbor_MaxAngularDistance" "', argument " "1"" of type '" "Stomp::TreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeNeighbor * >(argp1);
  result = (double)(arg1)->MaxAngularDistance();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeNeighbor_NodesVisited(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeNeighbor *arg1 = (Stomp::TreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeNeighbor_NodesVisited",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNeighbor_NodesVisited" "', argument " "1"" of type '" "Stomp::TreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeNeighbor * >(argp1);
  result = (uint16_t)(arg1)->NodesVisited();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeNeighbor_AddNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeNeighbor *arg1 = (Stomp::TreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeNeighbor_AddNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeNeighbor_AddNode" "', argument " "1"" of type '" "Stomp::TreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeNeighbor * >(argp1);
  (arg1)->AddNode();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreeNeighbor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__TreeNeighbor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IndexedTreePixel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IndexedTreePixel")) SWIG_fail;
  result = (Stomp::IndexedTreePixel *)new Stomp::IndexedTreePixel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreePixel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::IndexedTreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_IndexedTreePixel",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexedTreePixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedTreePixel" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (Stomp::IndexedTreePixel *)new Stomp::IndexedTreePixel(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreePixel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::IndexedTreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IndexedTreePixel",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexedTreePixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::IndexedTreePixel *)new Stomp::IndexedTreePixel(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreePixel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::IndexedTreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_IndexedTreePixel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreePixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreePixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedTreePixel" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (Stomp::IndexedTreePixel *)new Stomp::IndexedTreePixel(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreePixel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::IndexedTreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IndexedTreePixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreePixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreePixel" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::IndexedTreePixel *)new Stomp::IndexedTreePixel(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreePixel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint16_t arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::IndexedTreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_IndexedTreePixel",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexedTreePixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedTreePixel" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_IndexedTreePixel" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  result = (Stomp::IndexedTreePixel *)new Stomp::IndexedTreePixel(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreePixel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::IndexedTreePixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_IndexedTreePixel",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexedTreePixel" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreePixel" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedTreePixel" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (Stomp::IndexedTreePixel *)new Stomp::IndexedTreePixel(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreePixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreePixel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IndexedTreePixel__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IndexedTreePixel__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IndexedTreePixel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_IndexedTreePixel__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_IndexedTreePixel__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_IndexedTreePixel__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_IndexedTreePixel__SWIG_5(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_IndexedTreePixel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::IndexedTreePixel()\n"
    "    Stomp::IndexedTreePixel(uint32_t const,uint32_t const,uint16_t const)\n"
    "    Stomp::IndexedTreePixel(uint32_t const,uint32_t const)\n"
    "    Stomp::IndexedTreePixel(Stomp::AngularCoordinate &,uint32_t const,uint16_t const)\n"
    "    Stomp::IndexedTreePixel(Stomp::AngularCoordinate &,uint32_t const)\n"
    "    Stomp::IndexedTreePixel(uint32_t const,uint32_t const,uint32_t const,uint16_t const)\n"
    "    Stomp::IndexedTreePixel(uint32_t const,uint32_t const,uint32_t const)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IndexedTreePixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IndexedTreePixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexedTreePixel" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_FindPairs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  Stomp::IAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreePixel_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreePixel_FindPairs" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IAngularVector * >(argp4);
  (arg1)->FindPairs(*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_FindPairs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  Stomp::IndexVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreePixel_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreePixel_FindPairs" "', argument " "4"" of type '" "Stomp::IndexVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "4"" of type '" "Stomp::IndexVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IndexVector * >(argp4);
  (arg1)->FindPairs(*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_FindPairs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  Stomp::IAngularVector *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IndexedTreePixel_FindPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreePixel_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedTreePixel_FindPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IndexedTreePixel_FindPairs" "', argument " "5"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "5"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::IAngularVector * >(argp5);
  (arg1)->FindPairs(*arg2,arg3,arg4,*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_FindPairs__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  Stomp::IndexVector *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IndexedTreePixel_FindPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreePixel_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedTreePixel_FindPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IndexedTreePixel_FindPairs" "', argument " "5"" of type '" "Stomp::IndexVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "5"" of type '" "Stomp::IndexVector &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::IndexVector * >(argp5);
  (arg1)->FindPairs(*arg2,arg3,arg4,*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_FindPairs__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::IAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreePixel_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreePixel_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreePixel_FindPairs" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IAngularVector * >(argp4);
  (arg1)->FindPairs(*arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_FindPairs__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::IndexVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreePixel_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreePixel_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreePixel_FindPairs" "', argument " "4"" of type '" "Stomp::IndexVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindPairs" "', argument " "4"" of type '" "Stomp::IndexVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IndexVector * >(argp4);
  (arg1)->FindPairs(*arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_FindPairs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IndexedTreePixel_FindPairs__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IndexedTreePixel_FindPairs__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IndexedTreePixel_FindPairs__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IndexedTreePixel_FindPairs__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_IndexedTreePixel_FindPairs__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_IndexedTreePixel_FindPairs__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreePixel_FindPairs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindPairs(Stomp::IndexedTreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &,Stomp::IAngularVector &)\n"
    "    FindPairs(Stomp::IndexedTreePixel *,Stomp::AngularCoordinate &,Stomp::AngularBin &,Stomp::IndexVector &)\n"
    "    FindPairs(Stomp::IndexedTreePixel *,Stomp::AngularCoordinate &,double,double,Stomp::IAngularVector &)\n"
    "    FindPairs(Stomp::IndexedTreePixel *,Stomp::AngularCoordinate &,double,double,Stomp::IndexVector &)\n"
    "    FindPairs(Stomp::IndexedTreePixel *,Stomp::AngularCoordinate &,double,Stomp::IAngularVector &)\n"
    "    FindPairs(Stomp::IndexedTreePixel *,Stomp::AngularCoordinate &,double,Stomp::IndexVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_FindKNearestNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint8_t arg3 ;
  Stomp::IAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreePixel_FindKNearestNeighbors",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_FindKNearestNeighbors" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_FindKNearestNeighbors" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindKNearestNeighbors" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreePixel_FindKNearestNeighbors" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreePixel_FindKNearestNeighbors" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindKNearestNeighbors" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IAngularVector * >(argp4);
  result = (uint16_t)(arg1)->FindKNearestNeighbors(*arg2,arg3,*arg4);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_FindNearestNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::IndexedAngularCoordinate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreePixel_FindNearestNeighbor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_FindNearestNeighbor" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_FindNearestNeighbor" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindNearestNeighbor" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__IndexedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreePixel_FindNearestNeighbor" "', argument " "3"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_FindNearestNeighbor" "', argument " "3"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::IndexedAngularCoordinate * >(argp3);
  result = (uint16_t)(arg1)->FindNearestNeighbor(*arg2,*arg3);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_KNearestNeighborDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreePixel_KNearestNeighborDistance",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_KNearestNeighborDistance" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_KNearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_KNearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreePixel_KNearestNeighborDistance" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreePixel_KNearestNeighborDistance" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_KNearestNeighborDistance" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  result = (double)(arg1)->KNearestNeighborDistance(*arg2,arg3,*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_NearestNeighborDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreePixel_NearestNeighborDistance",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_NearestNeighborDistance" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_NearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_NearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreePixel_NearestNeighborDistance" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_NearestNeighborDistance" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  result = (double)(arg1)->NearestNeighborDistance(*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_ClosestMatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::IndexedAngularCoordinate *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreePixel_ClosestMatch",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_ClosestMatch" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_ClosestMatch" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_ClosestMatch" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreePixel_ClosestMatch" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__IndexedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreePixel_ClosestMatch" "', argument " "4"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_ClosestMatch" "', argument " "4"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IndexedAngularCoordinate * >(argp4);
  result = (bool)(arg1)->ClosestMatch(*arg2,arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_InitializeCorners(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_InitializeCorners",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_InitializeCorners" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  (arg1)->InitializeCorners();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_AddPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::IndexedAngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreePixel_AddPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_AddPoint" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__IndexedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_AddPoint" "', argument " "2"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_AddPoint" "', argument " "2"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IndexedAngularCoordinate * >(argp2);
  result = (bool)(arg1)->AddPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_AddPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreePixel_AddPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_AddPoint" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreePixel_AddPoint" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (bool)(arg1)->AddPoint(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_AddPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__IndexedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedTreePixel_AddPoint__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IndexedTreePixel_AddPoint__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreePixel_AddPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddPoint(Stomp::IndexedTreePixel *,Stomp::IndexedAngularCoordinate &)\n"
    "    AddPoint(Stomp::IndexedTreePixel *,Stomp::AngularCoordinate &,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_NPoints__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_NPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_NPoints" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (uint32_t)(arg1)->NPoints();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_NPoints__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreePixel_NPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_NPoints" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_NPoints" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_NPoints" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (uint32_t)(arg1)->NPoints(*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_NPoints(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IndexedTreePixel_NPoints__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedTreePixel_NPoints__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreePixel_NPoints'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NPoints(Stomp::IndexedTreePixel *)\n"
    "    NPoints(Stomp::IndexedTreePixel *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_Indices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::IndexVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreePixel_Indices",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_Indices" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_Indices" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_Indices" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreePixel_Indices" "', argument " "3"" of type '" "Stomp::IndexVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_Indices" "', argument " "3"" of type '" "Stomp::IndexVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::IndexVector * >(argp3);
  (arg1)->Indices(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_Coverage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_Coverage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_Coverage" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->Coverage();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_Coverage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreePixel_Coverage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_Coverage" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_Coverage" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_Coverage" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->Coverage(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_Coverage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IndexedTreePixel_Coverage__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedTreePixel_Coverage__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreePixel_Coverage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Coverage(Stomp::IndexedTreePixel *)\n"
    "    Coverage(Stomp::IndexedTreePixel *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_Points__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreePixel_Points",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_Points" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_Points" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_Points" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  (arg1)->Points(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_Points__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  Stomp::Pixel *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreePixel_Points",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_Points" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_Points" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_Points" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreePixel_Points" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_Points" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::Pixel * >(argp3);
  (arg1)->Points(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_Points(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedTreePixel_Points__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreePixel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IndexedTreePixel_Points__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreePixel_Points'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Points(Stomp::IndexedTreePixel *,Stomp::IAngularVector &)\n"
    "    Points(Stomp::IndexedTreePixel *,Stomp::IAngularVector &,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_Nodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_Nodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_Nodes" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (uint16_t)(arg1)->Nodes();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_SetPixelCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreePixel_SetPixelCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_SetPixelCapacity" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexedTreePixel_SetPixelCapacity" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  (arg1)->SetPixelCapacity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_PixelCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_PixelCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_PixelCapacity" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (uint16_t)(arg1)->PixelCapacity();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_HasPoints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_HasPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_HasPoints" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (bool)(arg1)->HasPoints();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_HasNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_HasNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_HasNodes" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (bool)(arg1)->HasNodes();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_Clear" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereX" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereX();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereY" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereY();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereZ",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereZ" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereX_UL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereX_UL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereX_UL" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_UL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereY_UL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereY_UL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereY_UL" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_UL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereZ_UL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereZ_UL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereZ_UL" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_UL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereX_UR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereX_UR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereX_UR" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_UR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereY_UR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereY_UR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereY_UR" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_UR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereZ_UR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereZ_UR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereZ_UR" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_UR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereX_LL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereX_LL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereX_LL" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_LL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereY_LL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereY_LL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereY_LL" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_LL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereZ_LL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereZ_LL",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereZ_LL" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_LL();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereX_LR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereX_LR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereX_LR" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereX_LR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereY_LR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereY_LR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereY_LR" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereY_LR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_UnitSphereZ_LR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreePixel_UnitSphereZ_LR",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_UnitSphereZ_LR" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  result = (double)(arg1)->UnitSphereZ_LR();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreePixel_WithinAnnulus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreePixel *arg1 = (Stomp::IndexedTreePixel *) 0 ;
  Stomp::AngularBin *arg2 = 0 ;
  Stomp::PixelVector *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreePixel_WithinAnnulus",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreePixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreePixel_WithinAnnulus" "', argument " "1"" of type '" "Stomp::IndexedTreePixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreePixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreePixel_WithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_WithinAnnulus" "', argument " "2"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularBin * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreePixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreePixel_WithinAnnulus" "', argument " "3"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::PixelVector * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedTreePixel_WithinAnnulus" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->WithinAnnulus(*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IndexedTreePixel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__IndexedTreePixel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NearestNeighborIndexedPixel___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborIndexedPixel *arg1 = (Stomp::NearestNeighborIndexedPixel *) 0 ;
  Stomp::DistanceIPixelPair *arg2 = 0 ;
  Stomp::DistanceIPixelPair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NearestNeighborIndexedPixel___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__NearestNeighborIndexedPixel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NearestNeighborIndexedPixel___call__" "', argument " "1"" of type '" "Stomp::NearestNeighborIndexedPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::NearestNeighborIndexedPixel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__pairT_double_Stomp__IndexedTreePixel_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NearestNeighborIndexedPixel___call__" "', argument " "2"" of type '" "Stomp::DistanceIPixelPair const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NearestNeighborIndexedPixel___call__" "', argument " "2"" of type '" "Stomp::DistanceIPixelPair const &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::DistanceIPixelPair * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__pairT_double_Stomp__IndexedTreePixel_p_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NearestNeighborIndexedPixel___call__" "', argument " "3"" of type '" "Stomp::DistanceIPixelPair const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NearestNeighborIndexedPixel___call__" "', argument " "3"" of type '" "Stomp::DistanceIPixelPair const &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::DistanceIPixelPair * >(argp3);
  result = (int)(arg1)->operator ()((Stomp::DistanceIPixelPair const &)*arg2,(Stomp::DistanceIPixelPair const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NearestNeighborIndexedPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborIndexedPixel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NearestNeighborIndexedPixel")) SWIG_fail;
  result = (Stomp::NearestNeighborIndexedPixel *)new Stomp::NearestNeighborIndexedPixel();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__NearestNeighborIndexedPixel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NearestNeighborIndexedPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborIndexedPixel *arg1 = (Stomp::NearestNeighborIndexedPixel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NearestNeighborIndexedPixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__NearestNeighborIndexedPixel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NearestNeighborIndexedPixel" "', argument " "1"" of type '" "Stomp::NearestNeighborIndexedPixel *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::NearestNeighborIndexedPixel * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NearestNeighborIndexedPixel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__NearestNeighborIndexedPixel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NearestNeighborIndexedPoint___call__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborIndexedPoint *arg1 = (Stomp::NearestNeighborIndexedPoint *) 0 ;
  Stomp::DistanceIPointPair *arg2 = 0 ;
  Stomp::DistanceIPointPair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NearestNeighborIndexedPoint___call__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__NearestNeighborIndexedPoint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NearestNeighborIndexedPoint___call__" "', argument " "1"" of type '" "Stomp::NearestNeighborIndexedPoint *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::NearestNeighborIndexedPoint * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NearestNeighborIndexedPoint___call__" "', argument " "2"" of type '" "Stomp::DistanceIPointPair const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NearestNeighborIndexedPoint___call__" "', argument " "2"" of type '" "Stomp::DistanceIPointPair const &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::DistanceIPointPair * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NearestNeighborIndexedPoint___call__" "', argument " "3"" of type '" "Stomp::DistanceIPointPair const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NearestNeighborIndexedPoint___call__" "', argument " "3"" of type '" "Stomp::DistanceIPointPair const &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::DistanceIPointPair * >(argp3);
  result = (int)(arg1)->operator ()((Stomp::DistanceIPointPair const &)*arg2,(Stomp::DistanceIPointPair const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NearestNeighborIndexedPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborIndexedPoint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NearestNeighborIndexedPoint")) SWIG_fail;
  result = (Stomp::NearestNeighborIndexedPoint *)new Stomp::NearestNeighborIndexedPoint();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__NearestNeighborIndexedPoint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NearestNeighborIndexedPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::NearestNeighborIndexedPoint *arg1 = (Stomp::NearestNeighborIndexedPoint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NearestNeighborIndexedPoint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__NearestNeighborIndexedPoint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NearestNeighborIndexedPoint" "', argument " "1"" of type '" "Stomp::NearestNeighborIndexedPoint *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::NearestNeighborIndexedPoint * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NearestNeighborIndexedPoint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__NearestNeighborIndexedPoint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IndexedTreeNeighbor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::IndexedTreeNeighbor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IndexedTreeNeighbor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreeNeighbor" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreeNeighbor" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreeNeighbor" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  result = (Stomp::IndexedTreeNeighbor *)new Stomp::IndexedTreeNeighbor(*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeNeighbor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeNeighbor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::IndexedTreeNeighbor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IndexedTreeNeighbor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreeNeighbor" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreeNeighbor" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  result = (Stomp::IndexedTreeNeighbor *)new Stomp::IndexedTreeNeighbor(*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeNeighbor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeNeighbor__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::AngularCoordinate *arg1 = 0 ;
  uint8_t arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::IndexedTreeNeighbor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_IndexedTreeNeighbor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreeNeighbor" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreeNeighbor" "', argument " "1"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg1 = reinterpret_cast< Stomp::AngularCoordinate * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreeNeighbor" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedTreeNeighbor" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (Stomp::IndexedTreeNeighbor *)new Stomp::IndexedTreeNeighbor(*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeNeighbor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeNeighbor(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IndexedTreeNeighbor__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IndexedTreeNeighbor__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_IndexedTreeNeighbor__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_IndexedTreeNeighbor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::IndexedTreeNeighbor(Stomp::AngularCoordinate &,uint8_t)\n"
    "    Stomp::IndexedTreeNeighbor(Stomp::AngularCoordinate &)\n"
    "    Stomp::IndexedTreeNeighbor(Stomp::AngularCoordinate &,uint8_t,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IndexedTreeNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeNeighbor *arg1 = (Stomp::IndexedTreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IndexedTreeNeighbor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeNeighbor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexedTreeNeighbor" "', argument " "1"" of type '" "Stomp::IndexedTreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeNeighbor * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeNeighbor_NearestNeighbors__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeNeighbor *arg1 = (Stomp::IndexedTreeNeighbor *) 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreeNeighbor_NearestNeighbors",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeNeighbor_NearestNeighbors" "', argument " "1"" of type '" "Stomp::IndexedTreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeNeighbor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeNeighbor_NearestNeighbors" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeNeighbor_NearestNeighbors" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeNeighbor_NearestNeighbors" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->NearestNeighbors(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeNeighbor_NearestNeighbors__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeNeighbor *arg1 = (Stomp::IndexedTreeNeighbor *) 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeNeighbor_NearestNeighbors",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeNeighbor_NearestNeighbors" "', argument " "1"" of type '" "Stomp::IndexedTreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeNeighbor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeNeighbor_NearestNeighbors" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeNeighbor_NearestNeighbors" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  (arg1)->NearestNeighbors(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeNeighbor_NearestNeighbors(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeNeighbor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedTreeNeighbor_NearestNeighbors__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeNeighbor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IndexedTreeNeighbor_NearestNeighbors__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreeNeighbor_NearestNeighbors'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NearestNeighbors(Stomp::IndexedTreeNeighbor *,Stomp::IAngularVector &,bool)\n"
    "    NearestNeighbors(Stomp::IndexedTreeNeighbor *,Stomp::IAngularVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeNeighbor_Neighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeNeighbor *arg1 = (Stomp::IndexedTreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeNeighbor_Neighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeNeighbor_Neighbors" "', argument " "1"" of type '" "Stomp::IndexedTreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeNeighbor * >(argp1);
  result = (uint8_t)(arg1)->Neighbors();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeNeighbor_MaxNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeNeighbor *arg1 = (Stomp::IndexedTreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeNeighbor_MaxNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeNeighbor_MaxNeighbors" "', argument " "1"" of type '" "Stomp::IndexedTreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeNeighbor * >(argp1);
  result = (uint8_t)(arg1)->MaxNeighbors();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeNeighbor_TestPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeNeighbor *arg1 = (Stomp::IndexedTreeNeighbor *) 0 ;
  Stomp::IndexedAngularCoordinate *arg2 = (Stomp::IndexedAngularCoordinate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeNeighbor_TestPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeNeighbor_TestPoint" "', argument " "1"" of type '" "Stomp::IndexedTreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeNeighbor * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Stomp__IndexedAngularCoordinate, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeNeighbor_TestPoint" "', argument " "2"" of type '" "Stomp::IndexedAngularCoordinate *""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IndexedAngularCoordinate * >(argp2);
  result = (bool)(arg1)->TestPoint(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeNeighbor_MaxDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeNeighbor *arg1 = (Stomp::IndexedTreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeNeighbor_MaxDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeNeighbor_MaxDistance" "', argument " "1"" of type '" "Stomp::IndexedTreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeNeighbor * >(argp1);
  result = (double)(arg1)->MaxDistance();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeNeighbor_MaxAngularDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeNeighbor *arg1 = (Stomp::IndexedTreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeNeighbor_MaxAngularDistance",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeNeighbor_MaxAngularDistance" "', argument " "1"" of type '" "Stomp::IndexedTreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeNeighbor * >(argp1);
  result = (double)(arg1)->MaxAngularDistance();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeNeighbor_NodesVisited(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeNeighbor *arg1 = (Stomp::IndexedTreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeNeighbor_NodesVisited",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeNeighbor_NodesVisited" "', argument " "1"" of type '" "Stomp::IndexedTreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeNeighbor * >(argp1);
  result = (uint16_t)(arg1)->NodesVisited();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeNeighbor_AddNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeNeighbor *arg1 = (Stomp::IndexedTreeNeighbor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeNeighbor_AddNode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeNeighbor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeNeighbor_AddNode" "', argument " "1"" of type '" "Stomp::IndexedTreeNeighbor *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeNeighbor * >(argp1);
  (arg1)->AddNode();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IndexedTreeNeighbor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__IndexedTreeNeighbor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint16_t arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TreeMap",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = (Stomp::TreeMap *)new Stomp::TreeMap(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeMap",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  result = (Stomp::TreeMap *)new Stomp::TreeMap(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TreeMap")) SWIG_fail;
  result = (Stomp::TreeMap *)new Stomp::TreeMap();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  int8_t arg8 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  signed char val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_TreeMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreeMap" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TreeMap" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_TreeMap" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_TreeMap" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_signed_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_TreeMap" "', argument " "8"" of type '" "int8_t""'");
  } 
  arg8 = static_cast< int8_t >(val8);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_TreeMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreeMap" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TreeMap" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_TreeMap" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_TreeMap" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_TreeMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreeMap" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TreeMap" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_TreeMap" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_TreeMap",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreeMap" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TreeMap" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_TreeMap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreeMap" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_TreeMap",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TreeMap",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TreeMap",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  uint32_t arg3 ;
  uint16_t arg4 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  bool arg6 ;
  uint8_t arg7 ;
  uint8_t arg8 ;
  int8_t arg9 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  signed char val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:new_TreeMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreeMap" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TreeMap" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_TreeMap" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_TreeMap" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_TreeMap" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = static_cast< uint8_t >(val8);
  ecode9 = SWIG_AsVal_signed_SS_char(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_TreeMap" "', argument " "9"" of type '" "int8_t""'");
  } 
  arg9 = static_cast< int8_t >(val9);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  uint32_t arg3 ;
  uint16_t arg4 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  bool arg6 ;
  uint8_t arg7 ;
  uint8_t arg8 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  unsigned char val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_TreeMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreeMap" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TreeMap" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_TreeMap" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_TreeMap" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_TreeMap" "', argument " "8"" of type '" "uint8_t""'");
  } 
  arg8 = static_cast< uint8_t >(val8);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  uint32_t arg3 ;
  uint16_t arg4 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  bool arg6 ;
  uint8_t arg7 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_TreeMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreeMap" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TreeMap" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_TreeMap" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_TreeMap" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  uint32_t arg3 ;
  uint16_t arg4 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  bool arg6 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_TreeMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreeMap" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TreeMap" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_TreeMap" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  uint32_t arg3 ;
  uint16_t arg4 ;
  Stomp::AngularCoordinate::Sphere arg5 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_TreeMap",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreeMap" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TreeMap" "', argument " "5"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg5 = static_cast< Stomp::AngularCoordinate::Sphere >(val5);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,*arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  uint32_t arg3 ;
  uint16_t arg4 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_TreeMap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_short(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TreeMap" "', argument " "4"" of type '" "uint16_t""'");
  } 
  arg4 = static_cast< uint16_t >(val4);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  uint32_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_TreeMap",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TreeMap" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Stomp::FieldColumnDict *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::TreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TreeMap",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TreeMap" "', argument " "2"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::FieldColumnDict * >(argp2);
  result = (Stomp::TreeMap *)new Stomp::TreeMap((std::string const &)*arg1,*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TreeMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[10];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 9); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TreeMap__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_TreeMap__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TreeMap__SWIG_10(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TreeMap__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TreeMap__SWIG_18(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_TreeMap__SWIG_9(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_TreeMap__SWIG_17(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_TreeMap__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_TreeMap__SWIG_16(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_TreeMap__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_TreeMap__SWIG_15(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_TreeMap__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_TreeMap__SWIG_14(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_TreeMap__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_TreeMap__SWIG_13(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_TreeMap__SWIG_4(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_TreeMap__SWIG_12(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_signed_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_TreeMap__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_short(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_unsigned_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_signed_SS_char(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_new_TreeMap__SWIG_11(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_TreeMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::TreeMap(uint32_t,uint16_t)\n"
    "    Stomp::TreeMap(uint32_t)\n"
    "    Stomp::TreeMap()\n"
    "    Stomp::TreeMap(std::string const &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,int8_t)\n"
    "    Stomp::TreeMap(std::string const &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    Stomp::TreeMap(std::string const &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    Stomp::TreeMap(std::string const &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Stomp::TreeMap(std::string const &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::TreeMap(std::string const &,uint32_t,uint16_t)\n"
    "    Stomp::TreeMap(std::string const &,uint32_t)\n"
    "    Stomp::TreeMap(std::string const &)\n"
    "    Stomp::TreeMap(std::string const &,Stomp::FieldColumnDict &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,int8_t)\n"
    "    Stomp::TreeMap(std::string const &,Stomp::FieldColumnDict &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    Stomp::TreeMap(std::string const &,Stomp::FieldColumnDict &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    Stomp::TreeMap(std::string const &,Stomp::FieldColumnDict &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Stomp::TreeMap(std::string const &,Stomp::FieldColumnDict &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::TreeMap(std::string const &,Stomp::FieldColumnDict &,uint32_t,uint16_t)\n"
    "    Stomp::TreeMap(std::string const &,Stomp::FieldColumnDict &,uint32_t)\n"
    "    Stomp::TreeMap(std::string const &,Stomp::FieldColumnDict &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TreeMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TreeMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TreeMap" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindPairs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (uint32_t)(arg1)->FindPairs(*arg2,*arg3);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindPairs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_FindPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (uint32_t)(arg1)->FindPairs(*arg2,arg3,arg4);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindPairs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (uint32_t)(arg1)->FindPairs(*arg2,arg3);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindPairs__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  (arg1)->FindPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindPairs__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  (arg1)->FindPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindPairs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindPairs__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeMap_FindPairs__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindPairs__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindPairs__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreeMap_FindPairs__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeMap_FindPairs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindPairs(Stomp::TreeMap *,Stomp::AngularCoordinate &,Stomp::AngularBin &)\n"
    "    FindPairs(Stomp::TreeMap *,Stomp::AngularCoordinate &,double,double)\n"
    "    FindPairs(Stomp::TreeMap *,Stomp::AngularCoordinate &,double)\n"
    "    FindPairs(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularBin &)\n"
    "    FindPairs(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularCorrelation &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  (arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  (arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  (arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  (arg1)->FindWeightedPairs(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_12(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_13(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_14(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_15(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_16(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_17(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_18(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_19(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_20(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularBin *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularBin * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_21(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "TreeMap_FindWeightedPairs" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,arg4,arg5,(std::string const &)*arg6);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_22(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  result = (double)(arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_23(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularBin *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularBin * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs__SWIG_24(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularCorrelation *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreeMap_FindWeightedPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairs" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "4"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularCorrelation * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairs" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  (arg1)->FindWeightedPairs(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairs__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairs__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairs__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairs__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairs__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairs__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairs__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairs__SWIG_9(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairs__SWIG_15(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairs__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairs__SWIG_17(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairs__SWIG_10(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairs__SWIG_13(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairs__SWIG_14(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairs__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairs__SWIG_12(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairs__SWIG_18(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairs__SWIG_19(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreeMap_FindWeightedPairs__SWIG_16(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreeMap_FindWeightedPairs__SWIG_20(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreeMap_FindWeightedPairs__SWIG_22(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreeMap_FindWeightedPairs__SWIG_11(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreeMap_FindWeightedPairs__SWIG_23(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreeMap_FindWeightedPairs__SWIG_24(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_TreeMap_FindWeightedPairs__SWIG_21(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeMap_FindWeightedPairs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::AngularCoordinate &,Stomp::AngularBin &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::AngularCoordinate &,double,double)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::AngularCoordinate &,double)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularBin &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularCorrelation &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WeightedAngularCoordinate &,Stomp::AngularBin &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WeightedAngularCoordinate &,double,double)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WeightedAngularCoordinate &,double)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WAngularVector &,Stomp::AngularBin &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WAngularVector &,Stomp::AngularCorrelation &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::AngularCoordinate &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::AngularCoordinate &,double,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::AngularCoordinate &,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularCorrelation &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WeightedAngularCoordinate &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WeightedAngularCoordinate &,double,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WeightedAngularCoordinate &,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WAngularVector &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WAngularVector &,Stomp::AngularCorrelation &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WeightedAngularCoordinate &,std::string const &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WeightedAngularCoordinate &,std::string const &,double,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WeightedAngularCoordinate &,std::string const &,double,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WAngularVector &,std::string const &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairs(Stomp::TreeMap *,Stomp::WAngularVector &,std::string const &,Stomp::AngularCorrelation &,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindPairsWithRegions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindPairsWithRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  (arg1)->FindPairsWithRegions(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindPairsWithRegions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindPairsWithRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  (arg1)->FindPairsWithRegions(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindPairsWithRegions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindPairsWithRegions__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindPairsWithRegions__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeMap_FindPairsWithRegions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindPairsWithRegions(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularBin &)\n"
    "    FindPairsWithRegions(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularCorrelation &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairsWithRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  (arg1)->FindWeightedPairsWithRegions(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairsWithRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  (arg1)->FindWeightedPairsWithRegions(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairsWithRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  (arg1)->FindWeightedPairsWithRegions(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindWeightedPairsWithRegions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  (arg1)->FindWeightedPairsWithRegions(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairsWithRegions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairsWithRegions(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairsWithRegions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::AngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairsWithRegions(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairsWithRegions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairsWithRegions(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::AngularCorrelation *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindWeightedPairsWithRegions",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularCorrelation * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->FindWeightedPairsWithRegions(*arg2,*arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularBin *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreeMap_FindWeightedPairsWithRegions",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularBin * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  (arg1)->FindWeightedPairsWithRegions(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Stomp::AngularCorrelation *arg4 = 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreeMap_FindWeightedPairsWithRegions",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__AngularCorrelation,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "4"" of type '" "Stomp::AngularCorrelation &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::AngularCorrelation * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindWeightedPairsWithRegions" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  (arg1)->FindWeightedPairsWithRegions(*arg2,(std::string const &)*arg3,*arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindWeightedPairsWithRegions(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_8(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Stomp__AngularCorrelation, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_TreeMap_FindWeightedPairsWithRegions__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeMap_FindWeightedPairsWithRegions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindWeightedPairsWithRegions(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularBin &)\n"
    "    FindWeightedPairsWithRegions(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularCorrelation &)\n"
    "    FindWeightedPairsWithRegions(Stomp::TreeMap *,Stomp::WAngularVector &,Stomp::AngularBin &)\n"
    "    FindWeightedPairsWithRegions(Stomp::TreeMap *,Stomp::WAngularVector &,Stomp::AngularCorrelation &)\n"
    "    FindWeightedPairsWithRegions(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairsWithRegions(Stomp::TreeMap *,Stomp::AngularVector &,Stomp::AngularCorrelation &,std::string const &)\n"
    "    FindWeightedPairsWithRegions(Stomp::TreeMap *,Stomp::WAngularVector &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairsWithRegions(Stomp::TreeMap *,Stomp::WAngularVector &,Stomp::AngularCorrelation &,std::string const &)\n"
    "    FindWeightedPairsWithRegions(Stomp::TreeMap *,Stomp::WAngularVector &,std::string const &,Stomp::AngularBin &,std::string const &)\n"
    "    FindWeightedPairsWithRegions(Stomp::TreeMap *,Stomp::WAngularVector &,std::string const &,Stomp::AngularCorrelation &,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindKNearestNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint8_t arg3 ;
  Stomp::WAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_FindKNearestNeighbors",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindKNearestNeighbors" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindKNearestNeighbors" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindKNearestNeighbors" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FindKNearestNeighbors" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_FindKNearestNeighbors" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindKNearestNeighbors" "', argument " "4"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WAngularVector * >(argp4);
  result = (uint16_t)(arg1)->FindKNearestNeighbors(*arg2,arg3,*arg4);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindNearestNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::WeightedAngularCoordinate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FindNearestNeighbor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindNearestNeighbor" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindNearestNeighbor" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindNearestNeighbor" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FindNearestNeighbor" "', argument " "3"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindNearestNeighbor" "', argument " "3"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp3);
  result = (uint16_t)(arg1)->FindNearestNeighbor(*arg2,*arg3);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_KNearestNeighborDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_KNearestNeighborDistance",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_KNearestNeighborDistance" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_KNearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_KNearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_KNearestNeighborDistance" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_KNearestNeighborDistance" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_KNearestNeighborDistance" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  result = (double)(arg1)->KNearestNeighborDistance(*arg2,arg3,*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_NearestNeighborDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_NearestNeighborDistance",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_NearestNeighborDistance" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_NearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_NearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_NearestNeighborDistance" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_NearestNeighborDistance" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  result = (double)(arg1)->NearestNeighborDistance(*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_ClosestMatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::WeightedAngularCoordinate *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_ClosestMatch",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_ClosestMatch" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_ClosestMatch" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_ClosestMatch" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_ClosestMatch" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "TreeMap_ClosestMatch" "', argument " "4"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_ClosestMatch" "', argument " "4"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp4);
  result = (bool)(arg1)->ClosestMatch(*arg2,arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_AddPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WeightedAngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_AddPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_AddPoint" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__WeightedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_AddPoint" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_AddPoint" "', argument " "2"" of type '" "Stomp::WeightedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WeightedAngularCoordinate * >(argp2);
  result = (bool)(arg1)->AddPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_AddPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_AddPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_AddPoint" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_AddPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (bool)(arg1)->AddPoint(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_AddPoint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_AddPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_AddPoint" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  result = (bool)(arg1)->AddPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_AddPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__WeightedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeMap_AddPoint__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeMap_AddPoint__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeMap_AddPoint__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeMap_AddPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddPoint(Stomp::TreeMap *,Stomp::WeightedAngularCoordinate &)\n"
    "    AddPoint(Stomp::TreeMap *,Stomp::AngularCoordinate &,double)\n"
    "    AddPoint(Stomp::TreeMap *,Stomp::AngularCoordinate &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  int8_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  signed char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:TreeMap_Read",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_Read" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreeMap_Read" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TreeMap_Read" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_signed_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TreeMap_Read" "', argument " "7"" of type '" "int8_t""'");
  } 
  arg7 = static_cast< int8_t >(val7);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TreeMap_Read",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_Read" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreeMap_Read" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TreeMap_Read" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreeMap_Read",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_Read" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreeMap_Read" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_Read",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_Read" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_Read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->Read((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  int8_t arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  signed char val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:TreeMap_Read",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_Read" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreeMap_Read" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TreeMap_Read" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TreeMap_Read" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_signed_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "TreeMap_Read" "', argument " "8"" of type '" "int8_t""'");
  } 
  arg8 = static_cast< int8_t >(val8);
  result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:TreeMap_Read",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_Read" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreeMap_Read" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TreeMap_Read" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TreeMap_Read" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:TreeMap_Read",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_Read" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreeMap_Read" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TreeMap_Read" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:TreeMap_Read",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_Read" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TreeMap_Read" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:TreeMap_Read",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TreeMap_Read" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::FieldColumnDict *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Read" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Read" "', argument " "3"" of type '" "Stomp::FieldColumnDict &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::FieldColumnDict * >(argp3);
  result = (bool)(arg1)->Read((std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Read(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeMap_Read__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_Read__SWIG_11(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeMap_Read__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreeMap_Read__SWIG_10(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_TreeMap_Read__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TreeMap_Read__SWIG_9(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_TreeMap_Read__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TreeMap_Read__SWIG_8(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_TreeMap_Read__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_TreeMap_Read__SWIG_7(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_signed_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_TreeMap_Read__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_signed_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_TreeMap_Read__SWIG_6(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeMap_Read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Read(Stomp::TreeMap *,std::string const &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,int8_t)\n"
    "    Read(Stomp::TreeMap *,std::string const &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    Read(Stomp::TreeMap *,std::string const &,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    Read(Stomp::TreeMap *,std::string const &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Read(Stomp::TreeMap *,std::string const &,Stomp::AngularCoordinate::Sphere)\n"
    "    Read(Stomp::TreeMap *,std::string const &)\n"
    "    Read(Stomp::TreeMap *,std::string const &,Stomp::FieldColumnDict &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,int8_t)\n"
    "    Read(Stomp::TreeMap *,std::string const &,Stomp::FieldColumnDict &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    Read(Stomp::TreeMap *,std::string const &,Stomp::FieldColumnDict &,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    Read(Stomp::TreeMap *,std::string const &,Stomp::FieldColumnDict &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Read(Stomp::TreeMap *,std::string const &,Stomp::FieldColumnDict &,Stomp::AngularCoordinate::Sphere)\n"
    "    Read(Stomp::TreeMap *,std::string const &,Stomp::FieldColumnDict &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Coverage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_Coverage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Coverage" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_Coverage" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->Coverage(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Coverage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_Coverage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Coverage" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  (arg1)->Coverage(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Coverage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeMap_Coverage__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeMap_Coverage__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeMap_Coverage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Coverage(Stomp::TreeMap *,Stomp::PixelVector &,uint32_t)\n"
    "    Coverage(Stomp::TreeMap *,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Covering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_Covering",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Covering" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Covering" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Covering" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_Covering" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (bool)(arg1)->Covering(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindUnmaskedFraction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_FindUnmaskedFraction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->FindUnmaskedFraction(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FindUnmaskedStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_FindUnmaskedStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FindUnmaskedStatus" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (int8_t)(arg1)->FindUnmaskedStatus(*arg2);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_NodeMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_NodeMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_NodeMap" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_NodeMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_NodeMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  (arg1)->NodeMap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Resolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_Resolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Resolution" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (uint32_t)(arg1)->Resolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_PixelCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_PixelCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_PixelCapacity" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (uint16_t)(arg1)->PixelCapacity();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_SetResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_SetResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_SetResolution" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeMap_SetResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->SetResolution(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_SetPixelCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_SetPixelCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_SetPixelCapacity" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeMap_SetPixelCapacity" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetPixelCapacity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_NPoints__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_NPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_NPoints" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeMap_NPoints" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (uint32_t)(arg1)->NPoints(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_NPoints__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_NPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_NPoints" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (uint32_t)(arg1)->NPoints();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_NPoints__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_NPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_NPoints" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_NPoints" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_NPoints" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (uint32_t)(arg1)->NPoints(*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_NPoints(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeMap_NPoints__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeMap_NPoints__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TreeMap_NPoints__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeMap_NPoints'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NPoints(Stomp::TreeMap *,uint32_t)\n"
    "    NPoints(Stomp::TreeMap *)\n"
    "    NPoints(Stomp::TreeMap *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Points__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_Points",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Points" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Points" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Points" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  (arg1)->Points(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Points__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::WAngularVector *arg2 = 0 ;
  Stomp::Pixel *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_Points",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Points" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Points" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Points" "', argument " "2"" of type '" "Stomp::WAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::WAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_Points" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Points" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::Pixel * >(argp3);
  (arg1)->Points(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Points(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeMap_Points__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_Points__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeMap_Points'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Points(Stomp::TreeMap *,Stomp::WAngularVector &)\n"
    "    Points(Stomp::TreeMap *,Stomp::WAngularVector &,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Weight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_Weight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Weight" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TreeMap_Weight" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (double)(arg1)->Weight(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Weight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_Weight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Weight" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (double)(arg1)->Weight();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Weight__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_Weight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Weight" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_Weight" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_Weight" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->Weight(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Weight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_TreeMap_Weight__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeMap_Weight__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_TreeMap_Weight__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeMap_Weight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Weight(Stomp::TreeMap *,uint32_t)\n"
    "    Weight(Stomp::TreeMap *)\n"
    "    Weight(Stomp::TreeMap *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FieldTotal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FieldTotal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FieldTotal" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FieldTotal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FieldTotal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TreeMap_FieldTotal" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (double)(arg1)->FieldTotal((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FieldTotal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_FieldTotal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FieldTotal" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FieldTotal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FieldTotal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (double)(arg1)->FieldTotal((std::string const &)*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FieldTotal__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::Pixel *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TreeMap_FieldTotal",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FieldTotal" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FieldTotal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FieldTotal" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TreeMap_FieldTotal" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FieldTotal" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::Pixel * >(argp3);
  result = (double)(arg1)->FieldTotal((std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FieldTotal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_TreeMap_FieldTotal__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_TreeMap_FieldTotal__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__TreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_TreeMap_FieldTotal__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'TreeMap_FieldTotal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FieldTotal(Stomp::TreeMap *,std::string const &,uint32_t)\n"
    "    FieldTotal(Stomp::TreeMap *,std::string const &)\n"
    "    FieldTotal(Stomp::TreeMap *,std::string const &,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_NField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_NField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_NField" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (uint16_t)(arg1)->NField();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_HasFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_HasFields",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_HasFields" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (bool)(arg1)->HasFields();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_FieldNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TreeMap_FieldNames",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_FieldNames" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TreeMap_FieldNames" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TreeMap_FieldNames" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  (arg1)->FieldNames(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_BaseNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_BaseNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_BaseNodes" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (uint16_t)(arg1)->BaseNodes();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Nodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_Nodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Nodes" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (uint16_t)(arg1)->Nodes();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Size" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (uint32_t)(arg1)->Size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_Area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Area" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (double)(arg1)->Area();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_CalculateArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_CalculateArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_CalculateArea" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  (arg1)->CalculateArea();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_MinResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_MinResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_MinResolution" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (uint32_t)(arg1)->MinResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_MaxResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_MaxResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_MaxResolution" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (uint32_t)(arg1)->MaxResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_MinLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_MinLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_MinLevel" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (uint8_t)(arg1)->MinLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_MaxLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_MaxLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_MaxLevel" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (uint8_t)(arg1)->MaxLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_Empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Empty" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  result = (bool)(arg1)->Empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TreeMap_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::TreeMap *arg1 = (Stomp::TreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TreeMap_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__TreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TreeMap_Clear" "', argument " "1"" of type '" "Stomp::TreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::TreeMap * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TreeMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__TreeMap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IndexedTreeMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint16_t arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::IndexedTreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IndexedTreeMap",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreeMap" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  result = (Stomp::IndexedTreeMap *)new Stomp::IndexedTreeMap(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  Stomp::IndexedTreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IndexedTreeMap",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  result = (Stomp::IndexedTreeMap *)new Stomp::IndexedTreeMap(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IndexedTreeMap")) SWIG_fail;
  result = (Stomp::IndexedTreeMap *)new Stomp::IndexedTreeMap();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeMap__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  int8_t arg8 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  signed char val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  Stomp::IndexedTreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new_IndexedTreeMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedTreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_IndexedTreeMap" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_IndexedTreeMap" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_IndexedTreeMap" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_IndexedTreeMap" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  ecode8 = SWIG_AsVal_signed_SS_char(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_IndexedTreeMap" "', argument " "8"" of type '" "int8_t""'");
  } 
  arg8 = static_cast< int8_t >(val8);
  result = (Stomp::IndexedTreeMap *)new Stomp::IndexedTreeMap((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeMap__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  unsigned char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  Stomp::IndexedTreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new_IndexedTreeMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedTreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_IndexedTreeMap" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_IndexedTreeMap" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_IndexedTreeMap" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_unsigned_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_IndexedTreeMap" "', argument " "7"" of type '" "uint8_t""'");
  } 
  arg7 = static_cast< uint8_t >(val7);
  result = (Stomp::IndexedTreeMap *)new Stomp::IndexedTreeMap((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeMap__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  uint8_t arg6 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Stomp::IndexedTreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_IndexedTreeMap",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedTreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_IndexedTreeMap" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_IndexedTreeMap" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_IndexedTreeMap" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = (Stomp::IndexedTreeMap *)new Stomp::IndexedTreeMap((std::string const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeMap__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  bool arg5 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  Stomp::IndexedTreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_IndexedTreeMap",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedTreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_IndexedTreeMap" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_IndexedTreeMap" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  result = (Stomp::IndexedTreeMap *)new Stomp::IndexedTreeMap((std::string const &)*arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeMap__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  Stomp::AngularCoordinate::Sphere arg4 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Stomp::IndexedTreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_IndexedTreeMap",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedTreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_IndexedTreeMap" "', argument " "4"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg4 = static_cast< Stomp::AngularCoordinate::Sphere >(val4);
  result = (Stomp::IndexedTreeMap *)new Stomp::IndexedTreeMap((std::string const &)*arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeMap__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  uint16_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Stomp::IndexedTreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_IndexedTreeMap",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IndexedTreeMap" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);
  result = (Stomp::IndexedTreeMap *)new Stomp::IndexedTreeMap((std::string const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeMap__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t arg2 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Stomp::IndexedTreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IndexedTreeMap",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexedTreeMap" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (Stomp::IndexedTreeMap *)new Stomp::IndexedTreeMap((std::string const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeMap__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  Stomp::IndexedTreeMap *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IndexedTreeMap",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexedTreeMap" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (Stomp::IndexedTreeMap *)new Stomp::IndexedTreeMap((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexedTreeMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IndexedTreeMap__SWIG_2(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IndexedTreeMap__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IndexedTreeMap__SWIG_10(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IndexedTreeMap__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IndexedTreeMap__SWIG_9(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_IndexedTreeMap__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_IndexedTreeMap__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_IndexedTreeMap__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_new_IndexedTreeMap__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new_IndexedTreeMap__SWIG_4(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_short(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_unsigned_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_signed_SS_char(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new_IndexedTreeMap__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_IndexedTreeMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Stomp::IndexedTreeMap(uint32_t,uint16_t)\n"
    "    Stomp::IndexedTreeMap(uint32_t)\n"
    "    Stomp::IndexedTreeMap()\n"
    "    Stomp::IndexedTreeMap(std::string const &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,int8_t)\n"
    "    Stomp::IndexedTreeMap(std::string const &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    Stomp::IndexedTreeMap(std::string const &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    Stomp::IndexedTreeMap(std::string const &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Stomp::IndexedTreeMap(std::string const &,uint32_t,uint16_t,Stomp::AngularCoordinate::Sphere)\n"
    "    Stomp::IndexedTreeMap(std::string const &,uint32_t,uint16_t)\n"
    "    Stomp::IndexedTreeMap(std::string const &,uint32_t)\n"
    "    Stomp::IndexedTreeMap(std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IndexedTreeMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IndexedTreeMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexedTreeMap" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_FindPairs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  Stomp::IAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreeMap_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreeMap_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreeMap_FindPairs" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IAngularVector * >(argp4);
  (arg1)->FindPairs(*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_FindPairs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::AngularBin *arg3 = 0 ;
  Stomp::IndexVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreeMap_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__AngularBin,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreeMap_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "3"" of type '" "Stomp::AngularBin &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::AngularBin * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreeMap_FindPairs" "', argument " "4"" of type '" "Stomp::IndexVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "4"" of type '" "Stomp::IndexVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IndexVector * >(argp4);
  (arg1)->FindPairs(*arg2,*arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_FindPairs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  Stomp::IAngularVector *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IndexedTreeMap_FindPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedTreeMap_FindPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IndexedTreeMap_FindPairs" "', argument " "5"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "5"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::IAngularVector * >(argp5);
  (arg1)->FindPairs(*arg2,arg3,arg4,*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_FindPairs__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  Stomp::IndexVector *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IndexedTreeMap_FindPairs",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedTreeMap_FindPairs" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IndexedTreeMap_FindPairs" "', argument " "5"" of type '" "Stomp::IndexVector &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "5"" of type '" "Stomp::IndexVector &""'"); 
  }
  arg5 = reinterpret_cast< Stomp::IndexVector * >(argp5);
  (arg1)->FindPairs(*arg2,arg3,arg4,*arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_FindPairs__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::IAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreeMap_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreeMap_FindPairs" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IAngularVector * >(argp4);
  (arg1)->FindPairs(*arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_FindPairs__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::IndexVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreeMap_FindPairs",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_FindPairs" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_FindPairs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreeMap_FindPairs" "', argument " "4"" of type '" "Stomp::IndexVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindPairs" "', argument " "4"" of type '" "Stomp::IndexVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IndexVector * >(argp4);
  (arg1)->FindPairs(*arg2,arg3,*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_FindPairs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IndexedTreeMap_FindPairs__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__AngularBin, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IndexedTreeMap_FindPairs__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IndexedTreeMap_FindPairs__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IndexedTreeMap_FindPairs__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_IndexedTreeMap_FindPairs__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_IndexedTreeMap_FindPairs__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreeMap_FindPairs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindPairs(Stomp::IndexedTreeMap *,Stomp::AngularCoordinate &,Stomp::AngularBin &,Stomp::IAngularVector &)\n"
    "    FindPairs(Stomp::IndexedTreeMap *,Stomp::AngularCoordinate &,Stomp::AngularBin &,Stomp::IndexVector &)\n"
    "    FindPairs(Stomp::IndexedTreeMap *,Stomp::AngularCoordinate &,double,double,Stomp::IAngularVector &)\n"
    "    FindPairs(Stomp::IndexedTreeMap *,Stomp::AngularCoordinate &,double,double,Stomp::IndexVector &)\n"
    "    FindPairs(Stomp::IndexedTreeMap *,Stomp::AngularCoordinate &,double,Stomp::IAngularVector &)\n"
    "    FindPairs(Stomp::IndexedTreeMap *,Stomp::AngularCoordinate &,double,Stomp::IndexVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_FindKNearestNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint8_t arg3 ;
  Stomp::IAngularVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreeMap_FindKNearestNeighbors",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_FindKNearestNeighbors" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_FindKNearestNeighbors" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindKNearestNeighbors" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_FindKNearestNeighbors" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreeMap_FindKNearestNeighbors" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindKNearestNeighbors" "', argument " "4"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IAngularVector * >(argp4);
  result = (uint16_t)(arg1)->FindKNearestNeighbors(*arg2,arg3,*arg4);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_FindNearestNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  Stomp::IndexedAngularCoordinate *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreeMap_FindNearestNeighbor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_FindNearestNeighbor" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_FindNearestNeighbor" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindNearestNeighbor" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__IndexedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreeMap_FindNearestNeighbor" "', argument " "3"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindNearestNeighbor" "', argument " "3"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::IndexedAngularCoordinate * >(argp3);
  result = (uint16_t)(arg1)->FindNearestNeighbor(*arg2,*arg3);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_KNearestNeighborDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint8_t arg3 ;
  uint16_t *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreeMap_KNearestNeighborDistance",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_KNearestNeighborDistance" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_KNearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_KNearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_KNearestNeighborDistance" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreeMap_KNearestNeighborDistance" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_KNearestNeighborDistance" "', argument " "4"" of type '" "uint16_t &""'"); 
  }
  arg4 = reinterpret_cast< uint16_t * >(argp4);
  result = (double)(arg1)->KNearestNeighborDistance(*arg2,arg3,*arg4);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_NearestNeighborDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreeMap_NearestNeighborDistance",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_NearestNeighborDistance" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_NearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_NearestNeighborDistance" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_unsigned_short,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreeMap_NearestNeighborDistance" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_NearestNeighborDistance" "', argument " "3"" of type '" "uint16_t &""'"); 
  }
  arg3 = reinterpret_cast< uint16_t * >(argp3);
  result = (double)(arg1)->NearestNeighborDistance(*arg2,*arg3);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_ClosestMatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  double arg3 ;
  Stomp::IndexedAngularCoordinate *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreeMap_ClosestMatch",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_ClosestMatch" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_ClosestMatch" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_ClosestMatch" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_ClosestMatch" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Stomp__IndexedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexedTreeMap_ClosestMatch" "', argument " "4"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_ClosestMatch" "', argument " "4"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  arg4 = reinterpret_cast< Stomp::IndexedAngularCoordinate * >(argp4);
  result = (bool)(arg1)->ClosestMatch(*arg2,arg3,*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_AddPoint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::IndexedAngularCoordinate *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeMap_AddPoint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_AddPoint" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__IndexedAngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_AddPoint" "', argument " "2"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_AddPoint" "', argument " "2"" of type '" "Stomp::IndexedAngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IndexedAngularCoordinate * >(argp2);
  result = (bool)(arg1)->AddPoint(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_AddPoint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::AngularCoordinate *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreeMap_AddPoint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_AddPoint" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__AngularCoordinate,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_AddPoint" "', argument " "2"" of type '" "Stomp::AngularCoordinate &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::AngularCoordinate * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_AddPoint" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (bool)(arg1)->AddPoint(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_AddPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__IndexedAngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedTreeMap_AddPoint__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__AngularCoordinate, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IndexedTreeMap_AddPoint__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreeMap_AddPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    AddPoint(Stomp::IndexedTreeMap *,Stomp::IndexedAngularCoordinate &)\n"
    "    AddPoint(Stomp::IndexedTreeMap *,Stomp::AngularCoordinate &,uint32_t)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Read__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  int8_t arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  signed char val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:IndexedTreeMap_Read",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Read" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_Read" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedTreeMap_Read" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IndexedTreeMap_Read" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IndexedTreeMap_Read" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  ecode7 = SWIG_AsVal_signed_SS_char(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "IndexedTreeMap_Read" "', argument " "7"" of type '" "int8_t""'");
  } 
  arg7 = static_cast< int8_t >(val7);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Read__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  uint8_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:IndexedTreeMap_Read",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Read" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_Read" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedTreeMap_Read" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IndexedTreeMap_Read" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_char(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "IndexedTreeMap_Read" "', argument " "6"" of type '" "uint8_t""'");
  } 
  arg6 = static_cast< uint8_t >(val6);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Read__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  uint8_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:IndexedTreeMap_Read",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Read" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_Read" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedTreeMap_Read" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "IndexedTreeMap_Read" "', argument " "5"" of type '" "uint8_t""'");
  } 
  arg5 = static_cast< uint8_t >(val5);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3,arg4,arg5);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Read__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreeMap_Read",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Read" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_Read" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedTreeMap_Read" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Read__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  std::string *arg2 = 0 ;
  Stomp::AngularCoordinate::Sphere arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreeMap_Read",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Read" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_Read" "', argument " "3"" of type '" "Stomp::AngularCoordinate::Sphere""'");
  } 
  arg3 = static_cast< Stomp::AngularCoordinate::Sphere >(val3);
  result = (bool)(arg1)->Read((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Read__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeMap_Read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Read" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->Read((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Read(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[8];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 7); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedTreeMap_Read__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IndexedTreeMap_Read__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IndexedTreeMap_Read__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_IndexedTreeMap_Read__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_IndexedTreeMap_Read__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_char(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_signed_SS_char(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_IndexedTreeMap_Read__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreeMap_Read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Read(Stomp::IndexedTreeMap *,std::string const &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t,int8_t)\n"
    "    Read(Stomp::IndexedTreeMap *,std::string const &,Stomp::AngularCoordinate::Sphere,bool,uint8_t,uint8_t)\n"
    "    Read(Stomp::IndexedTreeMap *,std::string const &,Stomp::AngularCoordinate::Sphere,bool,uint8_t)\n"
    "    Read(Stomp::IndexedTreeMap *,std::string const &,Stomp::AngularCoordinate::Sphere,bool)\n"
    "    Read(Stomp::IndexedTreeMap *,std::string const &,Stomp::AngularCoordinate::Sphere)\n"
    "    Read(Stomp::IndexedTreeMap *,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Coverage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  uint32_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexedTreeMap_Coverage",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Coverage" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_Coverage" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexedTreeMap_Coverage" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->Coverage(*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Coverage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreeMap_Coverage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Coverage" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_Coverage" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  (arg1)->Coverage(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Coverage__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::PixelVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeMap_Coverage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Coverage" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Coverage" "', argument " "2"" of type '" "Stomp::PixelVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::PixelVector * >(argp2);
  (arg1)->Coverage(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Coverage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedTreeMap_Coverage__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IndexedTreeMap_Coverage__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IndexedTreeMap_Coverage__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreeMap_Coverage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Coverage(Stomp::IndexedTreeMap *,Stomp::PixelVector &,uint32_t,bool)\n"
    "    Coverage(Stomp::IndexedTreeMap *,Stomp::PixelVector &,uint32_t)\n"
    "    Coverage(Stomp::IndexedTreeMap *,Stomp::PixelVector &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Covering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreeMap_Covering",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Covering" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Covering" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Covering" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexedTreeMap_Covering" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  result = (bool)(arg1)->Covering(*arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_FindUnmaskedFraction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeMap_FindUnmaskedFraction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_FindUnmaskedFraction" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindUnmaskedFraction" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (double)(arg1)->FindUnmaskedFraction(*arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_FindUnmaskedStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeMap_FindUnmaskedStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_FindUnmaskedStatus" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_FindUnmaskedStatus" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (int8_t)(arg1)->FindUnmaskedStatus(*arg2);
  resultobj = SWIG_From_signed_SS_char(static_cast< signed char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_NodeMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::Map *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeMap_NodeMap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_NodeMap" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Map,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_NodeMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_NodeMap" "', argument " "2"" of type '" "Stomp::Map &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Map * >(argp2);
  (arg1)->NodeMap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Resolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_Resolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Resolution" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (uint32_t)(arg1)->Resolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_PixelCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_PixelCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_PixelCapacity" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (uint16_t)(arg1)->PixelCapacity();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_SetResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeMap_SetResolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_SetResolution" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexedTreeMap_SetResolution" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  (arg1)->SetResolution(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_SetPixelCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeMap_SetPixelCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_SetPixelCapacity" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexedTreeMap_SetPixelCapacity" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetPixelCapacity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_NPoints__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeMap_NPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_NPoints" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexedTreeMap_NPoints" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  result = (uint32_t)(arg1)->NPoints(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_NPoints__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_NPoints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_NPoints" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (uint32_t)(arg1)->NPoints();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_NPoints__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeMap_NPoints",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_NPoints" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_NPoints" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_NPoints" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  result = (uint32_t)(arg1)->NPoints(*arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_NPoints(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IndexedTreeMap_NPoints__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedTreeMap_NPoints__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IndexedTreeMap_NPoints__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreeMap_NPoints'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NPoints(Stomp::IndexedTreeMap *,uint32_t)\n"
    "    NPoints(Stomp::IndexedTreeMap *)\n"
    "    NPoints(Stomp::IndexedTreeMap *,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Points__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexedTreeMap_Points",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Points" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Points" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Points" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  (arg1)->Points(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Points__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::IAngularVector *arg2 = 0 ;
  Stomp::Pixel *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreeMap_Points",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Points" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Points" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Points" "', argument " "2"" of type '" "Stomp::IAngularVector &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::IAngularVector * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreeMap_Points" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Points" "', argument " "3"" of type '" "Stomp::Pixel &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::Pixel * >(argp3);
  (arg1)->Points(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Points(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IndexedTreeMap_Points__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Stomp__IndexedTreeMap, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Stomp__Pixel, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IndexedTreeMap_Points__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexedTreeMap_Points'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Points(Stomp::IndexedTreeMap *,Stomp::IAngularVector &)\n"
    "    Points(Stomp::IndexedTreeMap *,Stomp::IAngularVector &,Stomp::Pixel &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Indices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  Stomp::Pixel *arg2 = 0 ;
  Stomp::IndexVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexedTreeMap_Indices",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Indices" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Stomp__Pixel,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexedTreeMap_Indices" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Indices" "', argument " "2"" of type '" "Stomp::Pixel &""'"); 
  }
  arg2 = reinterpret_cast< Stomp::Pixel * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IndexedTreeMap_Indices" "', argument " "3"" of type '" "Stomp::IndexVector &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexedTreeMap_Indices" "', argument " "3"" of type '" "Stomp::IndexVector &""'"); 
  }
  arg3 = reinterpret_cast< Stomp::IndexVector * >(argp3);
  (arg1)->Indices(*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_BaseNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_BaseNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_BaseNodes" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (uint16_t)(arg1)->BaseNodes();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Nodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint16_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_Nodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Nodes" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (uint16_t)(arg1)->Nodes();
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Size" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (uint32_t)(arg1)->Size();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_Area",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Area" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (double)(arg1)->Area();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_CalculateArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_CalculateArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_CalculateArea" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  (arg1)->CalculateArea();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_MinResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_MinResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_MinResolution" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (uint32_t)(arg1)->MinResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_MaxResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_MaxResolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_MaxResolution" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (uint32_t)(arg1)->MaxResolution();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_MinLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_MinLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_MinLevel" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (uint8_t)(arg1)->MinLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_MaxLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint8_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_MaxLevel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_MaxLevel" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (uint8_t)(arg1)->MaxLevel();
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_Empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Empty" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  result = (bool)(arg1)->Empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexedTreeMap_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Stomp::IndexedTreeMap *arg1 = (Stomp::IndexedTreeMap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexedTreeMap_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Stomp__IndexedTreeMap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexedTreeMap_Clear" "', argument " "1"" of type '" "Stomp::IndexedTreeMap *""'"); 
  }
  arg1 = reinterpret_cast< Stomp::IndexedTreeMap * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IndexedTreeMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Stomp__IndexedTreeMap, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_AngularVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_iterator" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  result = (swig::PySwigIterator *)std_vector_Sl_Stomp_AngularCoordinate_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector___nonzero__" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  result = (bool)std_vector_Sl_Stomp_AngularCoordinate_Sg____nonzero__((std::vector< Stomp::AngularCoordinate > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector___len__" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  result = std_vector_Sl_Stomp_AngularCoordinate_Sg____len__((std::vector< Stomp::AngularCoordinate > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_pop" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  try {
    result = std_vector_Sl_Stomp_AngularCoordinate_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::AngularCoordinate >::value_type(static_cast< const std::vector< Stomp::AngularCoordinate >::value_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::AngularCoordinate >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector___getslice__" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularVector___getslice__" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularVector___getslice__" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::AngularCoordinate >::difference_type >(val3);
  try {
    result = (std::vector< Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > *)std_vector_Sl_Stomp_AngularCoordinate_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::AngularCoordinate >::difference_type arg3 ;
  std::vector< Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector___setslice__" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularVector___setslice__" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularVector___setslice__" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::AngularCoordinate >::difference_type >(val3);
  {
    std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > *ptr = (std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Stomp_AngularCoordinate_Sg____setslice__(arg1,arg2,arg3,(std::vector< Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::AngularCoordinate >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector___delslice__" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularVector___delslice__" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularVector___delslice__" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::AngularCoordinate >::difference_type >(val3);
  try {
    std_vector_Sl_Stomp_AngularCoordinate_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector___delitem__" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularVector___delitem__" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularCoordinate >::difference_type >(val2);
  try {
    std_vector_Sl_Stomp_AngularCoordinate_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::AngularCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector___getitem__" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularVector___getitem__" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularCoordinate >::difference_type >(val2);
  try {
    {
      std::vector< Stomp::AngularCoordinate >::value_type const &_result_ref = std_vector_Sl_Stomp_AngularCoordinate_Sg____getitem__((std::vector< Stomp::AngularCoordinate > const *)arg1,arg2);
      result = (std::vector< Stomp::AngularCoordinate >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::AngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector___setitem__" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularVector___setitem__" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularCoordinate >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::AngularCoordinate >::value_type * >(argp3);
  try {
    std_vector_Sl_Stomp_AngularCoordinate_Sg____setitem__(arg1,arg2,(Stomp::AngularCoordinate const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_append" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularVector_append" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularVector_append" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::AngularCoordinate >::value_type * >(argp2);
  std_vector_Sl_Stomp_AngularCoordinate_Sg__append(arg1,(Stomp::AngularCoordinate const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AngularVector")) SWIG_fail;
  result = (std::vector< Stomp::AngularCoordinate > *)new std::vector< Stomp::AngularCoordinate >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AngularVector",&obj0)) SWIG_fail;
  {
    std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > *ptr = (std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AngularVector" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularVector" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Stomp::AngularCoordinate > *)new std::vector< Stomp::AngularCoordinate >((std::vector< Stomp::AngularCoordinate > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_empty" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  result = (bool)((std::vector< Stomp::AngularCoordinate > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_size" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::AngularCoordinate > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_clear" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_swap" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< Stomp::AngularCoordinate > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_get_allocator" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::AngularCoordinate > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::AngularCoordinate >::allocator_type(static_cast< const std::vector< Stomp::AngularCoordinate >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_begin" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::AngularCoordinate > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularCoordinate >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_end" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::AngularCoordinate > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularCoordinate >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_rbegin" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::AngularCoordinate > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularCoordinate >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_rend" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::AngularCoordinate > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularCoordinate >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_AngularVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularVector" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::AngularCoordinate >::size_type >(val1);
  result = (std::vector< Stomp::AngularCoordinate > *)new std::vector< Stomp::AngularCoordinate >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_pop_back" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularCoordinate >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::AngularCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::iterator arg2 ;
  std::vector< Stomp::AngularCoordinate >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::AngularCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AngularVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AngularVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_AngularVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_AngularVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< Stomp::AngularCoordinate > *,std::vector< Stomp::AngularCoordinate >::iterator)\n"
    "    erase(std::vector< Stomp::AngularCoordinate > *,std::vector< Stomp::AngularCoordinate >::iterator,std::vector< Stomp::AngularCoordinate >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate >::size_type arg1 ;
  std::vector< Stomp::AngularCoordinate >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::AngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_AngularVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_AngularVector" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::AngularCoordinate >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AngularVector" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AngularVector" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::AngularCoordinate >::value_type * >(argp2);
  result = (std::vector< Stomp::AngularCoordinate > *)new std::vector< Stomp::AngularCoordinate >(arg1,(std::vector< Stomp::AngularCoordinate >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AngularVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_AngularVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_AngularVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_AngularVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_AngularVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_AngularVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Stomp::AngularCoordinate >()\n"
    "    std::vector< Stomp::AngularCoordinate >(std::vector< Stomp::AngularCoordinate > const &)\n"
    "    std::vector< Stomp::AngularCoordinate >(std::vector< Stomp::AngularCoordinate >::size_type)\n"
    "    std::vector< Stomp::AngularCoordinate >(std::vector< Stomp::AngularCoordinate >::size_type,std::vector< Stomp::AngularCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_push_back" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AngularVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::AngularCoordinate >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Stomp::AngularCoordinate >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_front" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  {
    std::vector< Stomp::AngularCoordinate >::value_type const &_result_ref = ((std::vector< Stomp::AngularCoordinate > const *)arg1)->front();
    result = (std::vector< Stomp::AngularCoordinate >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_back" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  {
    std::vector< Stomp::AngularCoordinate >::value_type const &_result_ref = ((std::vector< Stomp::AngularCoordinate > const *)arg1)->back();
    result = (std::vector< Stomp::AngularCoordinate >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::size_type arg2 ;
  std::vector< Stomp::AngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_assign" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularVector_assign" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularCoordinate >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::AngularCoordinate >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Stomp::AngularCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::size_type arg2 ;
  std::vector< Stomp::AngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularCoordinate >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::AngularCoordinate >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Stomp::AngularCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_AngularVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AngularVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< Stomp::AngularCoordinate > *,std::vector< Stomp::AngularCoordinate >::size_type)\n"
    "    resize(std::vector< Stomp::AngularCoordinate > *,std::vector< Stomp::AngularCoordinate >::size_type,std::vector< Stomp::AngularCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::iterator arg2 ;
  std::vector< Stomp::AngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::AngularCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:AngularVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AngularVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::AngularCoordinate >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< Stomp::AngularCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::iterator arg2 ;
  std::vector< Stomp::AngularCoordinate >::size_type arg3 ;
  std::vector< Stomp::AngularCoordinate >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:AngularVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "AngularVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::AngularCoordinate >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::AngularCoordinate >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "AngularVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AngularVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::AngularCoordinate >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Stomp::AngularCoordinate >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< Stomp::AngularCoordinate >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_AngularVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_AngularVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'AngularVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< Stomp::AngularCoordinate > *,std::vector< Stomp::AngularCoordinate >::iterator,std::vector< Stomp::AngularCoordinate >::value_type const &)\n"
    "    insert(std::vector< Stomp::AngularCoordinate > *,std::vector< Stomp::AngularCoordinate >::iterator,std::vector< Stomp::AngularCoordinate >::size_type,std::vector< Stomp::AngularCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  std::vector< Stomp::AngularCoordinate >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AngularVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_reserve" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AngularVector_reserve" "', argument " "2"" of type '" "std::vector< Stomp::AngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularCoordinate >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AngularVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AngularVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AngularVector_capacity" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::AngularCoordinate > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AngularVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularCoordinate > *arg1 = (std::vector< Stomp::AngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AngularVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AngularVector" "', argument " "1"" of type '" "std::vector< Stomp::AngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularCoordinate > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AngularVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ThetaVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_iterator" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  result = (swig::PySwigIterator *)std_vector_Sl_Stomp_AngularBin_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector___nonzero__" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  result = (bool)std_vector_Sl_Stomp_AngularBin_Sg____nonzero__((std::vector< Stomp::AngularBin > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector___len__" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  result = std_vector_Sl_Stomp_AngularBin_Sg____len__((std::vector< Stomp::AngularBin > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_pop" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  try {
    result = std_vector_Sl_Stomp_AngularBin_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::AngularBin >::value_type(static_cast< const std::vector< Stomp::AngularBin >::value_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::difference_type arg2 ;
  std::vector< Stomp::AngularBin >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThetaVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector___getslice__" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThetaVector___getslice__" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularBin >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThetaVector___getslice__" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::AngularBin >::difference_type >(val3);
  try {
    result = (std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > > *)std_vector_Sl_Stomp_AngularBin_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::difference_type arg2 ;
  std::vector< Stomp::AngularBin >::difference_type arg3 ;
  std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThetaVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector___setslice__" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThetaVector___setslice__" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularBin >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThetaVector___setslice__" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::AngularBin >::difference_type >(val3);
  {
    std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > > *ptr = (std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThetaVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThetaVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Stomp_AngularBin_Sg____setslice__(arg1,arg2,arg3,(std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::difference_type arg2 ;
  std::vector< Stomp::AngularBin >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThetaVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector___delslice__" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThetaVector___delslice__" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularBin >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThetaVector___delslice__" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::AngularBin >::difference_type >(val3);
  try {
    std_vector_Sl_Stomp_AngularBin_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThetaVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector___delitem__" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThetaVector___delitem__" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularBin >::difference_type >(val2);
  try {
    std_vector_Sl_Stomp_AngularBin_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::AngularBin >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThetaVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector___getitem__" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThetaVector___getitem__" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularBin >::difference_type >(val2);
  try {
    {
      std::vector< Stomp::AngularBin >::value_type const &_result_ref = std_vector_Sl_Stomp_AngularBin_Sg____getitem__((std::vector< Stomp::AngularBin > const *)arg1,arg2);
      result = (std::vector< Stomp::AngularBin >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::difference_type arg2 ;
  std::vector< Stomp::AngularBin >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThetaVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector___setitem__" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThetaVector___setitem__" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularBin >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThetaVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThetaVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::AngularBin >::value_type * >(argp3);
  try {
    std_vector_Sl_Stomp_AngularBin_Sg____setitem__(arg1,arg2,(Stomp::AngularBin const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThetaVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_append" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThetaVector_append" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThetaVector_append" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::AngularBin >::value_type * >(argp2);
  std_vector_Sl_Stomp_AngularBin_Sg__append(arg1,(Stomp::AngularBin const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThetaVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ThetaVector")) SWIG_fail;
  result = (std::vector< Stomp::AngularBin > *)new std::vector< Stomp::AngularBin >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThetaVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThetaVector",&obj0)) SWIG_fail;
  {
    std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > > *ptr = (std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ThetaVector" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThetaVector" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Stomp::AngularBin > *)new std::vector< Stomp::AngularBin >((std::vector< Stomp::AngularBin > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_empty" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  result = (bool)((std::vector< Stomp::AngularBin > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_size" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  result = ((std::vector< Stomp::AngularBin > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_clear" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThetaVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_swap" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThetaVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThetaVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< Stomp::AngularBin > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_get_allocator" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  result = ((std::vector< Stomp::AngularBin > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::AngularBin >::allocator_type(static_cast< const std::vector< Stomp::AngularBin >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_begin" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  result = ((std::vector< Stomp::AngularBin > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularBin >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_end" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  result = ((std::vector< Stomp::AngularBin > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularBin >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_rbegin" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  result = ((std::vector< Stomp::AngularBin > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularBin >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_rend" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  result = ((std::vector< Stomp::AngularBin > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularBin >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThetaVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ThetaVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThetaVector" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::AngularBin >::size_type >(val1);
  result = (std::vector< Stomp::AngularBin > *)new std::vector< Stomp::AngularBin >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_pop_back" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThetaVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThetaVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularBin >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::AngularBin >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThetaVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThetaVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThetaVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularBin >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::iterator arg2 ;
  std::vector< Stomp::AngularBin >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::AngularBin >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThetaVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThetaVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThetaVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThetaVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThetaVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularBin >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ThetaVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ThetaVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ThetaVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< Stomp::AngularBin > *,std::vector< Stomp::AngularBin >::iterator)\n"
    "    erase(std::vector< Stomp::AngularBin > *,std::vector< Stomp::AngularBin >::iterator,std::vector< Stomp::AngularBin >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThetaVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin >::size_type arg1 ;
  std::vector< Stomp::AngularBin >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::AngularBin > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ThetaVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ThetaVector" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::AngularBin >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ThetaVector" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ThetaVector" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::AngularBin >::value_type * >(argp2);
  result = (std::vector< Stomp::AngularBin > *)new std::vector< Stomp::AngularBin >(arg1,(std::vector< Stomp::AngularBin >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ThetaVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ThetaVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ThetaVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ThetaVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ThetaVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ThetaVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Stomp::AngularBin >()\n"
    "    std::vector< Stomp::AngularBin >(std::vector< Stomp::AngularBin > const &)\n"
    "    std::vector< Stomp::AngularBin >(std::vector< Stomp::AngularBin >::size_type)\n"
    "    std::vector< Stomp::AngularBin >(std::vector< Stomp::AngularBin >::size_type,std::vector< Stomp::AngularBin >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThetaVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_push_back" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ThetaVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThetaVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::AngularBin >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Stomp::AngularBin >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_front" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  {
    std::vector< Stomp::AngularBin >::value_type const &_result_ref = ((std::vector< Stomp::AngularBin > const *)arg1)->front();
    result = (std::vector< Stomp::AngularBin >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_back" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  {
    std::vector< Stomp::AngularBin >::value_type const &_result_ref = ((std::vector< Stomp::AngularBin > const *)arg1)->back();
    result = (std::vector< Stomp::AngularBin >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::size_type arg2 ;
  std::vector< Stomp::AngularBin >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThetaVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_assign" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThetaVector_assign" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularBin >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThetaVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThetaVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::AngularBin >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Stomp::AngularBin >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::size_type arg2 ;
  std::vector< Stomp::AngularBin >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThetaVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThetaVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularBin >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThetaVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThetaVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::AngularBin >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Stomp::AngularBin >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ThetaVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThetaVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ThetaVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< Stomp::AngularBin > *,std::vector< Stomp::AngularBin >::size_type)\n"
    "    resize(std::vector< Stomp::AngularBin > *,std::vector< Stomp::AngularBin >::size_type,std::vector< Stomp::AngularBin >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::iterator arg2 ;
  std::vector< Stomp::AngularBin >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::AngularBin >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ThetaVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThetaVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThetaVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ThetaVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThetaVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::AngularBin >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< Stomp::AngularBin >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::AngularBin >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::iterator arg2 ;
  std::vector< Stomp::AngularBin >::size_type arg3 ;
  std::vector< Stomp::AngularBin >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ThetaVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThetaVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ThetaVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThetaVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::AngularBin >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::AngularBin >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ThetaVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ThetaVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::AngularBin >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Stomp::AngularBin >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< Stomp::AngularBin >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ThetaVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::AngularBin,std::allocator< Stomp::AngularBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::AngularBin >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ThetaVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'ThetaVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< Stomp::AngularBin > *,std::vector< Stomp::AngularBin >::iterator,std::vector< Stomp::AngularBin >::value_type const &)\n"
    "    insert(std::vector< Stomp::AngularBin > *,std::vector< Stomp::AngularBin >::iterator,std::vector< Stomp::AngularBin >::size_type,std::vector< Stomp::AngularBin >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  std::vector< Stomp::AngularBin >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ThetaVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_reserve" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThetaVector_reserve" "', argument " "2"" of type '" "std::vector< Stomp::AngularBin >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::AngularBin >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ThetaVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::AngularBin >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ThetaVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ThetaVector_capacity" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  result = ((std::vector< Stomp::AngularBin > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ThetaVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin > *arg1 = (std::vector< Stomp::AngularBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ThetaVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ThetaVector" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ThetaVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_RadialVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_iterator" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  result = (swig::PySwigIterator *)std_vector_Sl_Stomp_RadialBin_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector___nonzero__" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  result = (bool)std_vector_Sl_Stomp_RadialBin_Sg____nonzero__((std::vector< Stomp::RadialBin > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector___len__" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  result = std_vector_Sl_Stomp_RadialBin_Sg____len__((std::vector< Stomp::RadialBin > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_pop" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  try {
    result = std_vector_Sl_Stomp_RadialBin_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::RadialBin >::value_type(static_cast< const std::vector< Stomp::RadialBin >::value_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::difference_type arg2 ;
  std::vector< Stomp::RadialBin >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::RadialBin,std::allocator< Stomp::RadialBin > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RadialVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector___getslice__" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialVector___getslice__" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::RadialBin >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RadialVector___getslice__" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::RadialBin >::difference_type >(val3);
  try {
    result = (std::vector< Stomp::RadialBin,std::allocator< Stomp::RadialBin > > *)std_vector_Sl_Stomp_RadialBin_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::difference_type arg2 ;
  std::vector< Stomp::RadialBin >::difference_type arg3 ;
  std::vector< Stomp::RadialBin,std::allocator< Stomp::RadialBin > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RadialVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector___setslice__" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialVector___setslice__" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::RadialBin >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RadialVector___setslice__" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::RadialBin >::difference_type >(val3);
  {
    std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > > *ptr = (std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RadialVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::RadialBin,std::allocator< Stomp::RadialBin > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::RadialBin,std::allocator< Stomp::RadialBin > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Stomp_RadialBin_Sg____setslice__(arg1,arg2,arg3,(std::vector< Stomp::RadialBin,std::allocator< Stomp::RadialBin > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::difference_type arg2 ;
  std::vector< Stomp::RadialBin >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RadialVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector___delslice__" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialVector___delslice__" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::RadialBin >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RadialVector___delslice__" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::RadialBin >::difference_type >(val3);
  try {
    std_vector_Sl_Stomp_RadialBin_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector___delitem__" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialVector___delitem__" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::RadialBin >::difference_type >(val2);
  try {
    std_vector_Sl_Stomp_RadialBin_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::RadialBin >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector___getitem__" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialVector___getitem__" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::RadialBin >::difference_type >(val2);
  try {
    {
      std::vector< Stomp::RadialBin >::value_type const &_result_ref = std_vector_Sl_Stomp_RadialBin_Sg____getitem__((std::vector< Stomp::RadialBin > const *)arg1,arg2);
      result = (std::vector< Stomp::RadialBin >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::difference_type arg2 ;
  std::vector< Stomp::RadialBin >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RadialVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector___setitem__" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialVector___setitem__" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::RadialBin >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RadialVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::RadialBin >::value_type * >(argp3);
  try {
    std_vector_Sl_Stomp_RadialBin_Sg____setitem__(arg1,arg2,(Stomp::RadialBin const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_append" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadialVector_append" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialVector_append" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::RadialBin >::value_type * >(argp2);
  std_vector_Sl_Stomp_RadialBin_Sg__append(arg1,(Stomp::RadialBin const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RadialVector")) SWIG_fail;
  result = (std::vector< Stomp::RadialBin > *)new std::vector< Stomp::RadialBin >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RadialVector",&obj0)) SWIG_fail;
  {
    std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > > *ptr = (std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RadialVector" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RadialVector" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Stomp::RadialBin > *)new std::vector< Stomp::RadialBin >((std::vector< Stomp::RadialBin > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_empty" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  result = (bool)((std::vector< Stomp::RadialBin > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_size" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  result = ((std::vector< Stomp::RadialBin > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_clear" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_swap" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadialVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< Stomp::RadialBin > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_get_allocator" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  result = ((std::vector< Stomp::RadialBin > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::RadialBin >::allocator_type(static_cast< const std::vector< Stomp::RadialBin >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_begin" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  result = ((std::vector< Stomp::RadialBin > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::RadialBin >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_end" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  result = ((std::vector< Stomp::RadialBin > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::RadialBin >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_rbegin" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  result = ((std::vector< Stomp::RadialBin > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::RadialBin >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_rend" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  result = ((std::vector< Stomp::RadialBin > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::RadialBin >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RadialVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RadialVector" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::RadialBin >::size_type >(val1);
  result = (std::vector< Stomp::RadialBin > *)new std::vector< Stomp::RadialBin >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_pop_back" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::RadialBin >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::RadialBin >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RadialVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RadialVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::RadialBin >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::iterator arg2 ;
  std::vector< Stomp::RadialBin >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::RadialBin >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RadialVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RadialVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RadialVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RadialVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RadialVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::RadialBin >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_RadialVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_RadialVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RadialVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< Stomp::RadialBin > *,std::vector< Stomp::RadialBin >::iterator)\n"
    "    erase(std::vector< Stomp::RadialBin > *,std::vector< Stomp::RadialBin >::iterator,std::vector< Stomp::RadialBin >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin >::size_type arg1 ;
  std::vector< Stomp::RadialBin >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::RadialBin > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RadialVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RadialVector" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::RadialBin >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RadialVector" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RadialVector" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::RadialBin >::value_type * >(argp2);
  result = (std::vector< Stomp::RadialBin > *)new std::vector< Stomp::RadialBin >(arg1,(std::vector< Stomp::RadialBin >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RadialVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RadialVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RadialVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RadialVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_RadialVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_RadialVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Stomp::RadialBin >()\n"
    "    std::vector< Stomp::RadialBin >(std::vector< Stomp::RadialBin > const &)\n"
    "    std::vector< Stomp::RadialBin >(std::vector< Stomp::RadialBin >::size_type)\n"
    "    std::vector< Stomp::RadialBin >(std::vector< Stomp::RadialBin >::size_type,std::vector< Stomp::RadialBin >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_push_back" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RadialVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::RadialBin >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Stomp::RadialBin >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_front" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  {
    std::vector< Stomp::RadialBin >::value_type const &_result_ref = ((std::vector< Stomp::RadialBin > const *)arg1)->front();
    result = (std::vector< Stomp::RadialBin >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_back" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  {
    std::vector< Stomp::RadialBin >::value_type const &_result_ref = ((std::vector< Stomp::RadialBin > const *)arg1)->back();
    result = (std::vector< Stomp::RadialBin >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::size_type arg2 ;
  std::vector< Stomp::RadialBin >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RadialVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_assign" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialVector_assign" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::RadialBin >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RadialVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::RadialBin >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Stomp::RadialBin >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::size_type arg2 ;
  std::vector< Stomp::RadialBin >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RadialVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::RadialBin >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RadialVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::RadialBin >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Stomp::RadialBin >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RadialVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RadialVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RadialVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< Stomp::RadialBin > *,std::vector< Stomp::RadialBin >::size_type)\n"
    "    resize(std::vector< Stomp::RadialBin > *,std::vector< Stomp::RadialBin >::size_type,std::vector< Stomp::RadialBin >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::iterator arg2 ;
  std::vector< Stomp::RadialBin >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::RadialBin >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RadialVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RadialVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RadialVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RadialVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::RadialBin >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< Stomp::RadialBin >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::RadialBin >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::iterator arg2 ;
  std::vector< Stomp::RadialBin >::size_type arg3 ;
  std::vector< Stomp::RadialBin >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RadialVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RadialVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RadialVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RadialVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::RadialBin >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::RadialBin >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RadialVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RadialVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::RadialBin >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Stomp::RadialBin >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< Stomp::RadialBin >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RadialVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::RadialBin,std::allocator< Stomp::RadialBin > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::RadialBin >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RadialVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'RadialVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< Stomp::RadialBin > *,std::vector< Stomp::RadialBin >::iterator,std::vector< Stomp::RadialBin >::value_type const &)\n"
    "    insert(std::vector< Stomp::RadialBin > *,std::vector< Stomp::RadialBin >::iterator,std::vector< Stomp::RadialBin >::size_type,std::vector< Stomp::RadialBin >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  std::vector< Stomp::RadialBin >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RadialVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_reserve" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RadialVector_reserve" "', argument " "2"" of type '" "std::vector< Stomp::RadialBin >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::RadialBin >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RadialVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::RadialBin >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RadialVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RadialVector_capacity" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  result = ((std::vector< Stomp::RadialBin > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RadialVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::RadialBin > *arg1 = (std::vector< Stomp::RadialBin > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RadialVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RadialVector" "', argument " "1"" of type '" "std::vector< Stomp::RadialBin > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::RadialBin > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RadialVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_WAngularVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_iterator" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  result = (swig::PySwigIterator *)std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector___nonzero__" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  result = (bool)std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____nonzero__((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector___len__" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  result = std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____len__((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_pop" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  try {
    result = std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::WeightedAngularCoordinate >::value_type(static_cast< const std::vector< Stomp::WeightedAngularCoordinate >::value_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::WeightedAngularCoordinate >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WAngularVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector___getslice__" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WAngularVector___getslice__" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WAngularVector___getslice__" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::difference_type >(val3);
  try {
    result = (std::vector< Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > *)std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::WeightedAngularCoordinate >::difference_type arg3 ;
  std::vector< Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WAngularVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector___setslice__" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WAngularVector___setslice__" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WAngularVector___setslice__" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::difference_type >(val3);
  {
    std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > *ptr = (std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WAngularVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WAngularVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____setslice__(arg1,arg2,arg3,(std::vector< Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::WeightedAngularCoordinate >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WAngularVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector___delslice__" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WAngularVector___delslice__" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WAngularVector___delslice__" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::difference_type >(val3);
  try {
    std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WAngularVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector___delitem__" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WAngularVector___delitem__" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::difference_type >(val2);
  try {
    std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WAngularVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector___getitem__" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WAngularVector___getitem__" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::difference_type >(val2);
  try {
    {
      std::vector< Stomp::WeightedAngularCoordinate >::value_type const &_result_ref = std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____getitem__((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1,arg2);
      result = (std::vector< Stomp::WeightedAngularCoordinate >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WAngularVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector___setitem__" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WAngularVector___setitem__" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WAngularVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WAngularVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate >::value_type * >(argp3);
  try {
    std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg____setitem__(arg1,arg2,(Stomp::WeightedAngularCoordinate const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WAngularVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_append" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WAngularVector_append" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WAngularVector_append" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate >::value_type * >(argp2);
  std_vector_Sl_Stomp_WeightedAngularCoordinate_Sg__append(arg1,(Stomp::WeightedAngularCoordinate const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WAngularVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_WAngularVector")) SWIG_fail;
  result = (std::vector< Stomp::WeightedAngularCoordinate > *)new std::vector< Stomp::WeightedAngularCoordinate >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WAngularVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WAngularVector",&obj0)) SWIG_fail;
  {
    std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > *ptr = (std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_WAngularVector" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WAngularVector" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Stomp::WeightedAngularCoordinate > *)new std::vector< Stomp::WeightedAngularCoordinate >((std::vector< Stomp::WeightedAngularCoordinate > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_empty" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  result = (bool)((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_size" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_clear" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WAngularVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_swap" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WAngularVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WAngularVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< Stomp::WeightedAngularCoordinate > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_get_allocator" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::WeightedAngularCoordinate >::allocator_type(static_cast< const std::vector< Stomp::WeightedAngularCoordinate >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_begin" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::WeightedAngularCoordinate >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_end" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::WeightedAngularCoordinate >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_rbegin" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::WeightedAngularCoordinate >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_rend" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::WeightedAngularCoordinate >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WAngularVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_WAngularVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WAngularVector" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::size_type >(val1);
  result = (std::vector< Stomp::WeightedAngularCoordinate > *)new std::vector< Stomp::WeightedAngularCoordinate >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_pop_back" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WAngularVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WAngularVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WAngularVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "WAngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "WAngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::WeightedAngularCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::iterator arg2 ;
  std::vector< Stomp::WeightedAngularCoordinate >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WAngularVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "WAngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "WAngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "WAngularVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "WAngularVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::WeightedAngularCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_WAngularVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_WAngularVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'WAngularVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< Stomp::WeightedAngularCoordinate > *,std::vector< Stomp::WeightedAngularCoordinate >::iterator)\n"
    "    erase(std::vector< Stomp::WeightedAngularCoordinate > *,std::vector< Stomp::WeightedAngularCoordinate >::iterator,std::vector< Stomp::WeightedAngularCoordinate >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WAngularVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate >::size_type arg1 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_WAngularVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WAngularVector" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_WAngularVector" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_WAngularVector" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate >::value_type * >(argp2);
  result = (std::vector< Stomp::WeightedAngularCoordinate > *)new std::vector< Stomp::WeightedAngularCoordinate >(arg1,(std::vector< Stomp::WeightedAngularCoordinate >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_WAngularVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_WAngularVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_WAngularVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_WAngularVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_WAngularVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_WAngularVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Stomp::WeightedAngularCoordinate >()\n"
    "    std::vector< Stomp::WeightedAngularCoordinate >(std::vector< Stomp::WeightedAngularCoordinate > const &)\n"
    "    std::vector< Stomp::WeightedAngularCoordinate >(std::vector< Stomp::WeightedAngularCoordinate >::size_type)\n"
    "    std::vector< Stomp::WeightedAngularCoordinate >(std::vector< Stomp::WeightedAngularCoordinate >::size_type,std::vector< Stomp::WeightedAngularCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WAngularVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_push_back" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WAngularVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WAngularVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Stomp::WeightedAngularCoordinate >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_front" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  {
    std::vector< Stomp::WeightedAngularCoordinate >::value_type const &_result_ref = ((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1)->front();
    result = (std::vector< Stomp::WeightedAngularCoordinate >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_back" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  {
    std::vector< Stomp::WeightedAngularCoordinate >::value_type const &_result_ref = ((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1)->back();
    result = (std::vector< Stomp::WeightedAngularCoordinate >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::size_type arg2 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WAngularVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_assign" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WAngularVector_assign" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WAngularVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WAngularVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Stomp::WeightedAngularCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::size_type arg2 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WAngularVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WAngularVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WAngularVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WAngularVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Stomp::WeightedAngularCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_WAngularVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WAngularVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'WAngularVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< Stomp::WeightedAngularCoordinate > *,std::vector< Stomp::WeightedAngularCoordinate >::size_type)\n"
    "    resize(std::vector< Stomp::WeightedAngularCoordinate > *,std::vector< Stomp::WeightedAngularCoordinate >::size_type,std::vector< Stomp::WeightedAngularCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::iterator arg2 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:WAngularVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "WAngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "WAngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "WAngularVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WAngularVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< Stomp::WeightedAngularCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::WeightedAngularCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::iterator arg2 ;
  std::vector< Stomp::WeightedAngularCoordinate >::size_type arg3 ;
  std::vector< Stomp::WeightedAngularCoordinate >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:WAngularVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "WAngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "WAngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "WAngularVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "WAngularVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WAngularVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< Stomp::WeightedAngularCoordinate >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_WAngularVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::WeightedAngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_WAngularVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'WAngularVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< Stomp::WeightedAngularCoordinate > *,std::vector< Stomp::WeightedAngularCoordinate >::iterator,std::vector< Stomp::WeightedAngularCoordinate >::value_type const &)\n"
    "    insert(std::vector< Stomp::WeightedAngularCoordinate > *,std::vector< Stomp::WeightedAngularCoordinate >::iterator,std::vector< Stomp::WeightedAngularCoordinate >::size_type,std::vector< Stomp::WeightedAngularCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:WAngularVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_reserve" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "WAngularVector_reserve" "', argument " "2"" of type '" "std::vector< Stomp::WeightedAngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::WeightedAngularCoordinate >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_WAngularVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::WeightedAngularCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:WAngularVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WAngularVector_capacity" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::WeightedAngularCoordinate > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_WAngularVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::WeightedAngularCoordinate > *arg1 = (std::vector< Stomp::WeightedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_WAngularVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WAngularVector" "', argument " "1"" of type '" "std::vector< Stomp::WeightedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::WeightedAngularCoordinate > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *WAngularVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CosmoVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_iterator" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  result = (swig::PySwigIterator *)std_vector_Sl_Stomp_CosmoCoordinate_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector___nonzero__" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  result = (bool)std_vector_Sl_Stomp_CosmoCoordinate_Sg____nonzero__((std::vector< Stomp::CosmoCoordinate > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector___len__" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  result = std_vector_Sl_Stomp_CosmoCoordinate_Sg____len__((std::vector< Stomp::CosmoCoordinate > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_pop" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  try {
    result = std_vector_Sl_Stomp_CosmoCoordinate_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::CosmoCoordinate >::value_type(static_cast< const std::vector< Stomp::CosmoCoordinate >::value_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::difference_type arg2 ;
  std::vector< Stomp::CosmoCoordinate >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CosmoVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector___getslice__" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CosmoVector___getslice__" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::CosmoCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoVector___getslice__" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::CosmoCoordinate >::difference_type >(val3);
  try {
    result = (std::vector< Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > *)std_vector_Sl_Stomp_CosmoCoordinate_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::difference_type arg2 ;
  std::vector< Stomp::CosmoCoordinate >::difference_type arg3 ;
  std::vector< Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CosmoVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector___setslice__" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CosmoVector___setslice__" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::CosmoCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoVector___setslice__" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::CosmoCoordinate >::difference_type >(val3);
  {
    std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > *ptr = (std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CosmoVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Stomp_CosmoCoordinate_Sg____setslice__(arg1,arg2,arg3,(std::vector< Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::difference_type arg2 ;
  std::vector< Stomp::CosmoCoordinate >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CosmoVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector___delslice__" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CosmoVector___delslice__" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::CosmoCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoVector___delslice__" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::CosmoCoordinate >::difference_type >(val3);
  try {
    std_vector_Sl_Stomp_CosmoCoordinate_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector___delitem__" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CosmoVector___delitem__" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::CosmoCoordinate >::difference_type >(val2);
  try {
    std_vector_Sl_Stomp_CosmoCoordinate_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector___getitem__" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CosmoVector___getitem__" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::CosmoCoordinate >::difference_type >(val2);
  try {
    {
      std::vector< Stomp::CosmoCoordinate >::value_type const &_result_ref = std_vector_Sl_Stomp_CosmoCoordinate_Sg____getitem__((std::vector< Stomp::CosmoCoordinate > const *)arg1,arg2);
      result = (std::vector< Stomp::CosmoCoordinate >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::difference_type arg2 ;
  std::vector< Stomp::CosmoCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CosmoVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector___setitem__" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CosmoVector___setitem__" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::CosmoCoordinate >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate >::value_type * >(argp3);
  try {
    std_vector_Sl_Stomp_CosmoCoordinate_Sg____setitem__(arg1,arg2,(Stomp::CosmoCoordinate const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_append" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoVector_append" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoVector_append" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate >::value_type * >(argp2);
  std_vector_Sl_Stomp_CosmoCoordinate_Sg__append(arg1,(Stomp::CosmoCoordinate const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CosmoVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CosmoVector")) SWIG_fail;
  result = (std::vector< Stomp::CosmoCoordinate > *)new std::vector< Stomp::CosmoCoordinate >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CosmoVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CosmoVector",&obj0)) SWIG_fail;
  {
    std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > *ptr = (std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CosmoVector" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CosmoVector" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Stomp::CosmoCoordinate > *)new std::vector< Stomp::CosmoCoordinate >((std::vector< Stomp::CosmoCoordinate > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_empty" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  result = (bool)((std::vector< Stomp::CosmoCoordinate > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_size" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  result = ((std::vector< Stomp::CosmoCoordinate > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_clear" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_swap" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< Stomp::CosmoCoordinate > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_get_allocator" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  result = ((std::vector< Stomp::CosmoCoordinate > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::CosmoCoordinate >::allocator_type(static_cast< const std::vector< Stomp::CosmoCoordinate >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_begin" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  result = ((std::vector< Stomp::CosmoCoordinate > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::CosmoCoordinate >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_end" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  result = ((std::vector< Stomp::CosmoCoordinate > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::CosmoCoordinate >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_rbegin" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  result = ((std::vector< Stomp::CosmoCoordinate > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::CosmoCoordinate >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_rend" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  result = ((std::vector< Stomp::CosmoCoordinate > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::CosmoCoordinate >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CosmoVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CosmoVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CosmoVector" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::CosmoCoordinate >::size_type >(val1);
  result = (std::vector< Stomp::CosmoCoordinate > *)new std::vector< Stomp::CosmoCoordinate >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_pop_back" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CosmoVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::CosmoCoordinate >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CosmoVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CosmoVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::CosmoCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::iterator arg2 ;
  std::vector< Stomp::CosmoCoordinate >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CosmoVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CosmoVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CosmoVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CosmoVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CosmoVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::CosmoCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_CosmoVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_CosmoVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CosmoVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< Stomp::CosmoCoordinate > *,std::vector< Stomp::CosmoCoordinate >::iterator)\n"
    "    erase(std::vector< Stomp::CosmoCoordinate > *,std::vector< Stomp::CosmoCoordinate >::iterator,std::vector< Stomp::CosmoCoordinate >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CosmoVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate >::size_type arg1 ;
  std::vector< Stomp::CosmoCoordinate >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::CosmoCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CosmoVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CosmoVector" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::CosmoCoordinate >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CosmoVector" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CosmoVector" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate >::value_type * >(argp2);
  result = (std::vector< Stomp::CosmoCoordinate > *)new std::vector< Stomp::CosmoCoordinate >(arg1,(std::vector< Stomp::CosmoCoordinate >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CosmoVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CosmoVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CosmoVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CosmoVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CosmoVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_CosmoVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Stomp::CosmoCoordinate >()\n"
    "    std::vector< Stomp::CosmoCoordinate >(std::vector< Stomp::CosmoCoordinate > const &)\n"
    "    std::vector< Stomp::CosmoCoordinate >(std::vector< Stomp::CosmoCoordinate >::size_type)\n"
    "    std::vector< Stomp::CosmoCoordinate >(std::vector< Stomp::CosmoCoordinate >::size_type,std::vector< Stomp::CosmoCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_push_back" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CosmoVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Stomp::CosmoCoordinate >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_front" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  {
    std::vector< Stomp::CosmoCoordinate >::value_type const &_result_ref = ((std::vector< Stomp::CosmoCoordinate > const *)arg1)->front();
    result = (std::vector< Stomp::CosmoCoordinate >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_back" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  {
    std::vector< Stomp::CosmoCoordinate >::value_type const &_result_ref = ((std::vector< Stomp::CosmoCoordinate > const *)arg1)->back();
    result = (std::vector< Stomp::CosmoCoordinate >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::size_type arg2 ;
  std::vector< Stomp::CosmoCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CosmoVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_assign" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CosmoVector_assign" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::CosmoCoordinate >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Stomp::CosmoCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::size_type arg2 ;
  std::vector< Stomp::CosmoCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CosmoVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CosmoVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::CosmoCoordinate >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Stomp::CosmoCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CosmoVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CosmoVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CosmoVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< Stomp::CosmoCoordinate > *,std::vector< Stomp::CosmoCoordinate >::size_type)\n"
    "    resize(std::vector< Stomp::CosmoCoordinate > *,std::vector< Stomp::CosmoCoordinate >::size_type,std::vector< Stomp::CosmoCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::iterator arg2 ;
  std::vector< Stomp::CosmoCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CosmoVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CosmoVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CosmoVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CosmoVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< Stomp::CosmoCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::CosmoCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::iterator arg2 ;
  std::vector< Stomp::CosmoCoordinate >::size_type arg3 ;
  std::vector< Stomp::CosmoCoordinate >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CosmoVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CosmoVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CosmoVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CosmoVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::CosmoCoordinate >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::CosmoCoordinate >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CosmoVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CosmoVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::CosmoCoordinate >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< Stomp::CosmoCoordinate >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CosmoVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::CosmoCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CosmoVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CosmoVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< Stomp::CosmoCoordinate > *,std::vector< Stomp::CosmoCoordinate >::iterator,std::vector< Stomp::CosmoCoordinate >::value_type const &)\n"
    "    insert(std::vector< Stomp::CosmoCoordinate > *,std::vector< Stomp::CosmoCoordinate >::iterator,std::vector< Stomp::CosmoCoordinate >::size_type,std::vector< Stomp::CosmoCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  std::vector< Stomp::CosmoCoordinate >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CosmoVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_reserve" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CosmoVector_reserve" "', argument " "2"" of type '" "std::vector< Stomp::CosmoCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::CosmoCoordinate >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CosmoVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::CosmoCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CosmoVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CosmoVector_capacity" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  result = ((std::vector< Stomp::CosmoCoordinate > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CosmoVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::CosmoCoordinate > *arg1 = (std::vector< Stomp::CosmoCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CosmoVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CosmoVector" "', argument " "1"" of type '" "std::vector< Stomp::CosmoCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::CosmoCoordinate > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CosmoVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IAngularVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_iterator" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  result = (swig::PySwigIterator *)std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector___nonzero__" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  result = (bool)std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____nonzero__((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector___len__" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  result = std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____len__((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_pop" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  try {
    result = std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::IndexedAngularCoordinate >::value_type(static_cast< const std::vector< Stomp::IndexedAngularCoordinate >::value_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::IndexedAngularCoordinate >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IAngularVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector___getslice__" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAngularVector___getslice__" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAngularVector___getslice__" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::difference_type >(val3);
  try {
    result = (std::vector< Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > *)std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::IndexedAngularCoordinate >::difference_type arg3 ;
  std::vector< Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IAngularVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector___setslice__" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAngularVector___setslice__" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAngularVector___setslice__" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::difference_type >(val3);
  {
    std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > *ptr = (std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAngularVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAngularVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____setslice__(arg1,arg2,arg3,(std::vector< Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::IndexedAngularCoordinate >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IAngularVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector___delslice__" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAngularVector___delslice__" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAngularVector___delslice__" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::difference_type >(val3);
  try {
    std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IAngularVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector___delitem__" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAngularVector___delitem__" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::difference_type >(val2);
  try {
    std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IAngularVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector___getitem__" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAngularVector___getitem__" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::difference_type >(val2);
  try {
    {
      std::vector< Stomp::IndexedAngularCoordinate >::value_type const &_result_ref = std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____getitem__((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1,arg2);
      result = (std::vector< Stomp::IndexedAngularCoordinate >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::difference_type arg2 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IAngularVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector___setitem__" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAngularVector___setitem__" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IAngularVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAngularVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate >::value_type * >(argp3);
  try {
    std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg____setitem__(arg1,arg2,(Stomp::IndexedAngularCoordinate const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IAngularVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_append" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAngularVector_append" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAngularVector_append" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate >::value_type * >(argp2);
  std_vector_Sl_Stomp_IndexedAngularCoordinate_Sg__append(arg1,(Stomp::IndexedAngularCoordinate const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IAngularVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IAngularVector")) SWIG_fail;
  result = (std::vector< Stomp::IndexedAngularCoordinate > *)new std::vector< Stomp::IndexedAngularCoordinate >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IAngularVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IAngularVector",&obj0)) SWIG_fail;
  {
    std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > *ptr = (std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IAngularVector" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IAngularVector" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Stomp::IndexedAngularCoordinate > *)new std::vector< Stomp::IndexedAngularCoordinate >((std::vector< Stomp::IndexedAngularCoordinate > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_empty" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  result = (bool)((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_size" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_clear" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IAngularVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_swap" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAngularVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAngularVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< Stomp::IndexedAngularCoordinate > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_get_allocator" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::IndexedAngularCoordinate >::allocator_type(static_cast< const std::vector< Stomp::IndexedAngularCoordinate >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_begin" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::IndexedAngularCoordinate >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_end" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::IndexedAngularCoordinate >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_rbegin" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::IndexedAngularCoordinate >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_rend" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::IndexedAngularCoordinate >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IAngularVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IAngularVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IAngularVector" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::size_type >(val1);
  result = (std::vector< Stomp::IndexedAngularCoordinate > *)new std::vector< Stomp::IndexedAngularCoordinate >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_pop_back" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IAngularVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAngularVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IAngularVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IAngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IAngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::IndexedAngularCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::iterator arg2 ;
  std::vector< Stomp::IndexedAngularCoordinate >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IAngularVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IAngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IAngularVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IAngularVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IAngularVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::IndexedAngularCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_IAngularVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_IAngularVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IAngularVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< Stomp::IndexedAngularCoordinate > *,std::vector< Stomp::IndexedAngularCoordinate >::iterator)\n"
    "    erase(std::vector< Stomp::IndexedAngularCoordinate > *,std::vector< Stomp::IndexedAngularCoordinate >::iterator,std::vector< Stomp::IndexedAngularCoordinate >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IAngularVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate >::size_type arg1 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IAngularVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IAngularVector" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IAngularVector" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IAngularVector" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate >::value_type * >(argp2);
  result = (std::vector< Stomp::IndexedAngularCoordinate > *)new std::vector< Stomp::IndexedAngularCoordinate >(arg1,(std::vector< Stomp::IndexedAngularCoordinate >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IAngularVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IAngularVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IAngularVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IAngularVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IAngularVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_IAngularVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Stomp::IndexedAngularCoordinate >()\n"
    "    std::vector< Stomp::IndexedAngularCoordinate >(std::vector< Stomp::IndexedAngularCoordinate > const &)\n"
    "    std::vector< Stomp::IndexedAngularCoordinate >(std::vector< Stomp::IndexedAngularCoordinate >::size_type)\n"
    "    std::vector< Stomp::IndexedAngularCoordinate >(std::vector< Stomp::IndexedAngularCoordinate >::size_type,std::vector< Stomp::IndexedAngularCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IAngularVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_push_back" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IAngularVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAngularVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Stomp::IndexedAngularCoordinate >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_front" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  {
    std::vector< Stomp::IndexedAngularCoordinate >::value_type const &_result_ref = ((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1)->front();
    result = (std::vector< Stomp::IndexedAngularCoordinate >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_back" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  {
    std::vector< Stomp::IndexedAngularCoordinate >::value_type const &_result_ref = ((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1)->back();
    result = (std::vector< Stomp::IndexedAngularCoordinate >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::size_type arg2 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IAngularVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_assign" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAngularVector_assign" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IAngularVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAngularVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Stomp::IndexedAngularCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::size_type arg2 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IAngularVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAngularVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IAngularVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAngularVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Stomp::IndexedAngularCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IAngularVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IAngularVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IAngularVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< Stomp::IndexedAngularCoordinate > *,std::vector< Stomp::IndexedAngularCoordinate >::size_type)\n"
    "    resize(std::vector< Stomp::IndexedAngularCoordinate > *,std::vector< Stomp::IndexedAngularCoordinate >::size_type,std::vector< Stomp::IndexedAngularCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::iterator arg2 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IAngularVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IAngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IAngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IAngularVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAngularVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< Stomp::IndexedAngularCoordinate >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::IndexedAngularCoordinate >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::iterator arg2 ;
  std::vector< Stomp::IndexedAngularCoordinate >::size_type arg3 ;
  std::vector< Stomp::IndexedAngularCoordinate >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IAngularVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IAngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IAngularVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IAngularVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IAngularVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IAngularVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< Stomp::IndexedAngularCoordinate >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IAngularVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::IndexedAngularCoordinate >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IAngularVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IAngularVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< Stomp::IndexedAngularCoordinate > *,std::vector< Stomp::IndexedAngularCoordinate >::iterator,std::vector< Stomp::IndexedAngularCoordinate >::value_type const &)\n"
    "    insert(std::vector< Stomp::IndexedAngularCoordinate > *,std::vector< Stomp::IndexedAngularCoordinate >::iterator,std::vector< Stomp::IndexedAngularCoordinate >::size_type,std::vector< Stomp::IndexedAngularCoordinate >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IAngularVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_reserve" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IAngularVector_reserve" "', argument " "2"" of type '" "std::vector< Stomp::IndexedAngularCoordinate >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::IndexedAngularCoordinate >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IAngularVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::IndexedAngularCoordinate >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IAngularVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IAngularVector_capacity" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  result = ((std::vector< Stomp::IndexedAngularCoordinate > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IAngularVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::IndexedAngularCoordinate > *arg1 = (std::vector< Stomp::IndexedAngularCoordinate > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IAngularVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IAngularVector" "', argument " "1"" of type '" "std::vector< Stomp::IndexedAngularCoordinate > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::IndexedAngularCoordinate > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IAngularVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PixelVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_iterator" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  result = (swig::PySwigIterator *)std_vector_Sl_Stomp_Pixel_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector___nonzero__" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  result = (bool)std_vector_Sl_Stomp_Pixel_Sg____nonzero__((std::vector< Stomp::Pixel > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector___len__" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  result = std_vector_Sl_Stomp_Pixel_Sg____len__((std::vector< Stomp::Pixel > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_pop" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  try {
    result = std_vector_Sl_Stomp_Pixel_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::Pixel >::value_type(static_cast< const std::vector< Stomp::Pixel >::value_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::difference_type arg2 ;
  std::vector< Stomp::Pixel >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::Pixel,std::allocator< Stomp::Pixel > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PixelVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector___getslice__" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelVector___getslice__" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::Pixel >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PixelVector___getslice__" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::Pixel >::difference_type >(val3);
  try {
    result = (std::vector< Stomp::Pixel,std::allocator< Stomp::Pixel > > *)std_vector_Sl_Stomp_Pixel_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::difference_type arg2 ;
  std::vector< Stomp::Pixel >::difference_type arg3 ;
  std::vector< Stomp::Pixel,std::allocator< Stomp::Pixel > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PixelVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector___setslice__" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelVector___setslice__" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::Pixel >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PixelVector___setslice__" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::Pixel >::difference_type >(val3);
  {
    std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > > *ptr = (std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PixelVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::Pixel,std::allocator< Stomp::Pixel > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelVector___setslice__" "', argument " "4"" of type '" "std::vector< Stomp::Pixel,std::allocator< Stomp::Pixel > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_Stomp_Pixel_Sg____setslice__(arg1,arg2,arg3,(std::vector< Stomp::Pixel,std::allocator< Stomp::Pixel > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::difference_type arg2 ;
  std::vector< Stomp::Pixel >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PixelVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector___delslice__" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelVector___delslice__" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::Pixel >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PixelVector___delslice__" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::Pixel >::difference_type >(val3);
  try {
    std_vector_Sl_Stomp_Pixel_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector___delitem__" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelVector___delitem__" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::Pixel >::difference_type >(val2);
  try {
    std_vector_Sl_Stomp_Pixel_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::Pixel >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector___getitem__" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelVector___getitem__" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::Pixel >::difference_type >(val2);
  try {
    {
      std::vector< Stomp::Pixel >::value_type const &_result_ref = std_vector_Sl_Stomp_Pixel_Sg____getitem__((std::vector< Stomp::Pixel > const *)arg1,arg2);
      result = (std::vector< Stomp::Pixel >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::difference_type arg2 ;
  std::vector< Stomp::Pixel >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PixelVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector___setitem__" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelVector___setitem__" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::Pixel >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PixelVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelVector___setitem__" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::Pixel >::value_type * >(argp3);
  try {
    std_vector_Sl_Stomp_Pixel_Sg____setitem__(arg1,arg2,(Stomp::Pixel const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_append" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelVector_append" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelVector_append" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::Pixel >::value_type * >(argp2);
  std_vector_Sl_Stomp_Pixel_Sg__append(arg1,(Stomp::Pixel const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PixelVector")) SWIG_fail;
  result = (std::vector< Stomp::Pixel > *)new std::vector< Stomp::Pixel >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PixelVector",&obj0)) SWIG_fail;
  {
    std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > > *ptr = (std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PixelVector" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PixelVector" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< Stomp::Pixel > *)new std::vector< Stomp::Pixel >((std::vector< Stomp::Pixel > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_empty" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  result = (bool)((std::vector< Stomp::Pixel > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_size" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  result = ((std::vector< Stomp::Pixel > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_clear" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_swap" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::Pixel > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelVector_swap" "', argument " "2"" of type '" "std::vector< Stomp::Pixel > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< Stomp::Pixel > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_get_allocator" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  result = ((std::vector< Stomp::Pixel > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< Stomp::Pixel >::allocator_type(static_cast< const std::vector< Stomp::Pixel >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_begin" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  result = ((std::vector< Stomp::Pixel > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::Pixel >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_end" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  result = ((std::vector< Stomp::Pixel > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::Pixel >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_rbegin" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  result = ((std::vector< Stomp::Pixel > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::Pixel >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_rend" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  result = ((std::vector< Stomp::Pixel > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::Pixel >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PixelVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PixelVector" "', argument " "1"" of type '" "std::vector< Stomp::Pixel >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::Pixel >::size_type >(val1);
  result = (std::vector< Stomp::Pixel > *)new std::vector< Stomp::Pixel >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_pop_back" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::Pixel >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::Pixel >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PixelVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PixelVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::Pixel >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::iterator arg2 ;
  std::vector< Stomp::Pixel >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::Pixel >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PixelVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_erase" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PixelVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PixelVector_erase" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PixelVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PixelVector_erase" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::Pixel >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_PixelVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_PixelVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PixelVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< Stomp::Pixel > *,std::vector< Stomp::Pixel >::iterator)\n"
    "    erase(std::vector< Stomp::Pixel > *,std::vector< Stomp::Pixel >::iterator,std::vector< Stomp::Pixel >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel >::size_type arg1 ;
  std::vector< Stomp::Pixel >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< Stomp::Pixel > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PixelVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PixelVector" "', argument " "1"" of type '" "std::vector< Stomp::Pixel >::size_type""'");
  } 
  arg1 = static_cast< std::vector< Stomp::Pixel >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PixelVector" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PixelVector" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::Pixel >::value_type * >(argp2);
  result = (std::vector< Stomp::Pixel > *)new std::vector< Stomp::Pixel >(arg1,(std::vector< Stomp::Pixel >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PixelVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PixelVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_PixelVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PixelVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PixelVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_PixelVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< Stomp::Pixel >()\n"
    "    std::vector< Stomp::Pixel >(std::vector< Stomp::Pixel > const &)\n"
    "    std::vector< Stomp::Pixel >(std::vector< Stomp::Pixel >::size_type)\n"
    "    std::vector< Stomp::Pixel >(std::vector< Stomp::Pixel >::size_type,std::vector< Stomp::Pixel >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_push_back" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PixelVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelVector_push_back" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< Stomp::Pixel >::value_type * >(argp2);
  (arg1)->push_back((std::vector< Stomp::Pixel >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_front" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  {
    std::vector< Stomp::Pixel >::value_type const &_result_ref = ((std::vector< Stomp::Pixel > const *)arg1)->front();
    result = (std::vector< Stomp::Pixel >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_back" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  {
    std::vector< Stomp::Pixel >::value_type const &_result_ref = ((std::vector< Stomp::Pixel > const *)arg1)->back();
    result = (std::vector< Stomp::Pixel >::value_type *) &_result_ref;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::size_type arg2 ;
  std::vector< Stomp::Pixel >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PixelVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_assign" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelVector_assign" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::Pixel >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PixelVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelVector_assign" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::Pixel >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< Stomp::Pixel >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::size_type arg2 ;
  std::vector< Stomp::Pixel >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PixelVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_resize" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelVector_resize" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::Pixel >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PixelVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelVector_resize" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::Pixel >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< Stomp::Pixel >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_PixelVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PixelVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PixelVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< Stomp::Pixel > *,std::vector< Stomp::Pixel >::size_type)\n"
    "    resize(std::vector< Stomp::Pixel > *,std::vector< Stomp::Pixel >::size_type,std::vector< Stomp::Pixel >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::iterator arg2 ;
  std::vector< Stomp::Pixel >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< Stomp::Pixel >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PixelVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PixelVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PixelVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PixelVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< Stomp::Pixel >::value_type * >(argp3);
  result = (arg1)->insert(arg2,(std::vector< Stomp::Pixel >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< Stomp::Pixel >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::iterator arg2 ;
  std::vector< Stomp::Pixel >::size_type arg3 ;
  std::vector< Stomp::Pixel >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:PixelVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_insert" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PixelVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "PixelVector_insert" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PixelVector_insert" "', argument " "3"" of type '" "std::vector< Stomp::Pixel >::size_type""'");
  } 
  arg3 = static_cast< std::vector< Stomp::Pixel >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PixelVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PixelVector_insert" "', argument " "4"" of type '" "std::vector< Stomp::Pixel >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< Stomp::Pixel >::value_type * >(argp4);
  (arg1)->insert(arg2,arg3,(std::vector< Stomp::Pixel >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_PixelVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Stomp::Pixel,std::allocator< Stomp::Pixel > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< Stomp::Pixel >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_PixelVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PixelVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< Stomp::Pixel > *,std::vector< Stomp::Pixel >::iterator,std::vector< Stomp::Pixel >::value_type const &)\n"
    "    insert(std::vector< Stomp::Pixel > *,std::vector< Stomp::Pixel >::iterator,std::vector< Stomp::Pixel >::size_type,std::vector< Stomp::Pixel >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  std::vector< Stomp::Pixel >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PixelVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_reserve" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PixelVector_reserve" "', argument " "2"" of type '" "std::vector< Stomp::Pixel >::size_type""'");
  } 
  arg2 = static_cast< std::vector< Stomp::Pixel >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PixelVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< Stomp::Pixel >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PixelVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PixelVector_capacity" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  result = ((std::vector< Stomp::Pixel > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PixelVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::Pixel > *arg1 = (std::vector< Stomp::Pixel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PixelVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PixelVector" "', argument " "1"" of type '" "std::vector< Stomp::Pixel > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::Pixel > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PixelVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FieldDict__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FieldDict",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FieldDict" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FieldDict" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  result = (std::map< std::string,double > *)new std::map< std::string,double >((std::less< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_iterator" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = (swig::PySwigIterator *)std_map_Sl_std_string_Sc_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict___nonzero__" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_double_Sg____nonzero__((std::map< std::string,double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict___len__" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = std_map_Sl_std_string_Sc_double_Sg____len__((std::map< std::string,double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,double >::mapped_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldDict___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict___getitem__" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldDict___getitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldDict___getitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (std::map< std::string,double >::mapped_type)std_map_Sl_std_string_Sc_double_Sg____getitem__((std::map< std::string,double > const *)arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldDict___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict___delitem__" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldDict___delitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldDict___delitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_double_Sg____delitem__(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_has_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldDict_has_key",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_has_key" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldDict_has_key" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldDict_has_key" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_double_Sg__has_key((std::map< std::string,double > const *)arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_keys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_keys" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_double_Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_values(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_values",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_values" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_double_Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_items",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_items" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_double_Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldDict___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict___contains__" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldDict___contains__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldDict___contains__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_double_Sg____contains__(arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_key_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_key_iterator" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = (swig::PySwigIterator *)std_map_Sl_std_string_Sc_double_Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_value_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_value_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_value_iterator" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = (swig::PySwigIterator *)std_map_Sl_std_string_Sc_double_Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  std::map< std::string,double >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::map< std::string,double >::mapped_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FieldDict___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict___setitem__" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldDict___setitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldDict___setitem__" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FieldDict___setitem__" "', argument " "3"" of type '" "std::map< std::string,double >::mapped_type""'");
  } 
  temp3 = static_cast< std::map< std::string,double >::mapped_type >(val3);
  arg3 = &temp3;
  try {
    std_map_Sl_std_string_Sc_double_Sg____setitem__(arg1,(std::string const &)*arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldDict__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FieldDict")) SWIG_fail;
  result = (std::map< std::string,double > *)new std::map< std::string,double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldDict__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::map< std::string,double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FieldDict",&obj0)) SWIG_fail;
  {
    std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > > *ptr = (std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FieldDict" "', argument " "1"" of type '" "std::map< std::string,double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FieldDict" "', argument " "1"" of type '" "std::map< std::string,double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< std::string,double > *)new std::map< std::string,double >((std::map< std::string,double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldDict(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FieldDict__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FieldDict__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FieldDict__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_FieldDict'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,double >(std::less< std::string > const &)\n"
    "    std::map< std::string,double >()\n"
    "    std::map< std::string,double >(std::map< std::string,double > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_empty" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = (bool)((std::map< std::string,double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_size" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = ((std::map< std::string,double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_clear" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldDict_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_swap" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldDict_swap" "', argument " "2"" of type '" "std::map< std::string,double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldDict_swap" "', argument " "2"" of type '" "std::map< std::string,double > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< std::string const,double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_get_allocator" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = ((std::map< std::string,double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< std::string,double >::allocator_type(static_cast< const std::map< std::string,double >::allocator_type& >(result))), SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,double >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_begin" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = ((std::map< std::string,double > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,double >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_end" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = ((std::map< std::string,double > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,double >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_rbegin" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = ((std::map< std::string,double > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,double >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldDict_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_rend" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  result = ((std::map< std::string,double > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldDict_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_erase" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldDict_erase" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldDict_erase" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::map< std::string,double >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldDict_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_count" "', argument " "1"" of type '" "std::map< std::string,double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldDict_count" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldDict_count" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::map< std::string,double > const *)arg1)->count((std::map< std::string,double >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldDict_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_erase" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldDict_erase" "', argument " "2"" of type '" "std::map< std::string,double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::map< std::string,double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::map< std::string,double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldDict_erase" "', argument " "2"" of type '" "std::map< std::string,double >::iterator""'");
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::iterator arg2 ;
  std::map< std::string,double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FieldDict_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_erase" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldDict_erase" "', argument " "2"" of type '" "std::map< std::string,double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::map< std::string,double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::map< std::string,double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldDict_erase" "', argument " "2"" of type '" "std::map< std::string,double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldDict_erase" "', argument " "3"" of type '" "std::map< std::string,double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::map< std::string,double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::map< std::string,double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldDict_erase" "', argument " "3"" of type '" "std::map< std::string,double >::iterator""'");
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::map< std::string,double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_FieldDict_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FieldDict_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::map< std::string,double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::map< std::string,double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_FieldDict_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'FieldDict_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::map< std::string,double > *,std::map< std::string,double >::key_type const &)\n"
    "    erase(std::map< std::string,double > *,std::map< std::string,double >::iterator)\n"
    "    erase(std::map< std::string,double > *,std::map< std::string,double >::iterator,std::map< std::string,double >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldDict_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_find" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldDict_find" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldDict_find" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::map< std::string,double >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldDict_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_lower_bound" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldDict_lower_bound" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldDict_lower_bound" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::map< std::string,double >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldDict_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  std::map< std::string,double >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldDict_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldDict_upper_bound" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldDict_upper_bound" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldDict_upper_bound" "', argument " "2"" of type '" "std::map< std::string,double >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::map< std::string,double >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,double >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FieldDict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,double > *arg1 = (std::map< std::string,double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FieldDict",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FieldDict" "', argument " "1"" of type '" "std::map< std::string,double > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FieldDict_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FieldColumnDict__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,uint8_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FieldColumnDict",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FieldColumnDict" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FieldColumnDict" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  result = (std::map< std::string,uint8_t > *)new std::map< std::string,uint8_t >((std::less< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_iterator" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = (swig::PySwigIterator *)std_map_Sl_std_string_Sc_uint8_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict___nonzero__" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_uint8_t_Sg____nonzero__((std::map< std::string,unsigned char > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,unsigned char >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict___len__" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = std_map_Sl_std_string_Sc_uint8_t_Sg____len__((std::map< std::string,unsigned char > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,unsigned char >::mapped_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldColumnDict___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict___getitem__" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldColumnDict___getitem__" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldColumnDict___getitem__" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (std::map< std::string,unsigned char >::mapped_type)std_map_Sl_std_string_Sc_uint8_t_Sg____getitem__((std::map< std::string,unsigned char > const *)arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldColumnDict___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict___delitem__" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldColumnDict___delitem__" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldColumnDict___delitem__" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_uint8_t_Sg____delitem__(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_has_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldColumnDict_has_key",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_has_key" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldColumnDict_has_key" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldColumnDict_has_key" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_uint8_t_Sg__has_key((std::map< std::string,unsigned char > const *)arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_keys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_keys" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_uint8_t_Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_values(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_values",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_values" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_uint8_t_Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_items",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_items" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_uint8_t_Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldColumnDict___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict___contains__" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldColumnDict___contains__" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldColumnDict___contains__" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_uint8_t_Sg____contains__(arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_key_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_key_iterator" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = (swig::PySwigIterator *)std_map_Sl_std_string_Sc_uint8_t_Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_value_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_value_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_value_iterator" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = (swig::PySwigIterator *)std_map_Sl_std_string_Sc_uint8_t_Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  std::map< std::string,unsigned char >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::map< std::string,unsigned char >::mapped_type temp3 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FieldColumnDict___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict___setitem__" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldColumnDict___setitem__" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldColumnDict___setitem__" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FieldColumnDict___setitem__" "', argument " "3"" of type '" "std::map< std::string,unsigned char >::mapped_type""'");
  } 
  temp3 = static_cast< std::map< std::string,unsigned char >::mapped_type >(val3);
  arg3 = &temp3;
  try {
    std_map_Sl_std_string_Sc_uint8_t_Sg____setitem__(arg1,(std::string const &)*arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldColumnDict__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FieldColumnDict")) SWIG_fail;
  result = (std::map< std::string,uint8_t > *)new std::map< std::string,uint8_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldColumnDict__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::map< std::string,uint8_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_FieldColumnDict",&obj0)) SWIG_fail;
  {
    std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > > *ptr = (std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FieldColumnDict" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FieldColumnDict" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< std::string,uint8_t > *)new std::map< std::string,uint8_t >((std::map< std::string,uint8_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FieldColumnDict(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FieldColumnDict__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FieldColumnDict__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FieldColumnDict__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_FieldColumnDict'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,uint8_t >(std::less< std::string > const &)\n"
    "    std::map< std::string,uint8_t >()\n"
    "    std::map< std::string,uint8_t >(std::map< std::string,uint8_t > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_empty" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = (bool)((std::map< std::string,uint8_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,unsigned char >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_size" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = ((std::map< std::string,uint8_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_clear" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  std::map< std::string,uint8_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldColumnDict_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_swap" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldColumnDict_swap" "', argument " "2"" of type '" "std::map< std::string,uint8_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldColumnDict_swap" "', argument " "2"" of type '" "std::map< std::string,uint8_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< std::string const,unsigned char > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_get_allocator" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = ((std::map< std::string,uint8_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< std::string,unsigned char >::allocator_type(static_cast< const std::map< std::string,unsigned char >::allocator_type& >(result))), SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< std::string,unsigned char >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_begin" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = ((std::map< std::string,uint8_t > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,unsigned char >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< std::string,unsigned char >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_end" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = ((std::map< std::string,uint8_t > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,unsigned char >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< std::string,unsigned char >::const_reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_rbegin" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = ((std::map< std::string,uint8_t > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,unsigned char >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< std::string,unsigned char >::const_reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FieldColumnDict_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_rend" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  result = ((std::map< std::string,uint8_t > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,unsigned char >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,unsigned char >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldColumnDict_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_erase" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldColumnDict_erase" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldColumnDict_erase" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::map< std::string,unsigned char >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,unsigned char >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldColumnDict_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_count" "', argument " "1"" of type '" "std::map< std::string,uint8_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldColumnDict_count" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldColumnDict_count" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::map< std::string,uint8_t > const *)arg1)->count((std::map< std::string,unsigned char >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  SwigValueWrapper< std::map< std::string,unsigned char >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldColumnDict_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_erase" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldColumnDict_erase" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::map< std::string,unsigned char >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::map< std::string,unsigned char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldColumnDict_erase" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::iterator""'");
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  SwigValueWrapper< std::map< std::string,unsigned char >::iterator > arg2 ;
  SwigValueWrapper< std::map< std::string,unsigned char >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:FieldColumnDict_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_erase" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldColumnDict_erase" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::map< std::string,unsigned char >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::map< std::string,unsigned char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldColumnDict_erase" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldColumnDict_erase" "', argument " "3"" of type '" "std::map< std::string,unsigned char >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::map< std::string,unsigned char >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::map< std::string,unsigned char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FieldColumnDict_erase" "', argument " "3"" of type '" "std::map< std::string,unsigned char >::iterator""'");
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::map< std::string,unsigned char >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_FieldColumnDict_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FieldColumnDict_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::map< std::string,unsigned char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::map< std::string,unsigned char >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_FieldColumnDict_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'FieldColumnDict_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::map< std::string,uint8_t > *,std::map< std::string,unsigned char >::key_type const &)\n"
    "    erase(std::map< std::string,uint8_t > *,std::map< std::string,unsigned char >::iterator)\n"
    "    erase(std::map< std::string,uint8_t > *,std::map< std::string,unsigned char >::iterator,std::map< std::string,unsigned char >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::map< std::string,unsigned char >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldColumnDict_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_find" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldColumnDict_find" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldColumnDict_find" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::map< std::string,unsigned char >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,unsigned char >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::map< std::string,unsigned char >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldColumnDict_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_lower_bound" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldColumnDict_lower_bound" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldColumnDict_lower_bound" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::map< std::string,unsigned char >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,unsigned char >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FieldColumnDict_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  std::map< std::string,unsigned char >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::map< std::string,unsigned char >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:FieldColumnDict_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FieldColumnDict_upper_bound" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FieldColumnDict_upper_bound" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FieldColumnDict_upper_bound" "', argument " "2"" of type '" "std::map< std::string,unsigned char >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::map< std::string,unsigned char >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,unsigned char >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FieldColumnDict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,uint8_t > *arg1 = (std::map< std::string,uint8_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FieldColumnDict",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FieldColumnDict" "', argument " "1"" of type '" "std::map< std::string,uint8_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,uint8_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FieldColumnDict_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DoubleVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (swig::PySwigIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DoubleVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice__(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    {
      std::vector< double >::value_type const &_result_ref = std_vector_Sl_double_Sg____getitem__((std::vector< double > const *)arg1,arg2);
      result = (std::vector< double >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem__(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DoubleVector")) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_begin" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_end" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rbegin" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rend" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_DoubleVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_DoubleVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DoubleVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< double > *,std::vector< double >::iterator)\n"
    "    erase(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DoubleVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DoubleVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DoubleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >()\n"
    "    std::vector< double >(std::vector< double > const &)\n"
    "    std::vector< double >(std::vector< double >::size_type)\n"
    "    std::vector< double >(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    std::vector< double >::value_type const &_result_ref = ((std::vector< double > const *)arg1)->front();
    result = (std::vector< double >::value_type *) &_result_ref;
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    std::vector< double >::value_type const &_result_ref = ((std::vector< double > const *)arg1)->back();
    result = (std::vector< double >::value_type *) &_result_ref;
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DoubleVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< double > *,std::vector< double >::size_type)\n"
    "    resize(std::vector< double > *,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DoubleVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DoubleVector_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< double >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DoubleVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DoubleVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    insert(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DoubleVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IndexVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::PySwigIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_iterator" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (swig::PySwigIterator *)std_vector_Sl_uint32_t_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector___nonzero__" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (bool)std_vector_Sl_uint32_t_Sg____nonzero__((std::vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector___len__" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = std_vector_Sl_uint32_t_Sg____len__((std::vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_pop" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  try {
    result = (std::vector< unsigned int >::value_type)std_vector_Sl_uint32_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector___getslice__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector___getslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexVector___getslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  try {
    result = (std::vector< unsigned int,std::allocator< unsigned int > > *)std_vector_Sl_uint32_t_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector___setslice__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector___setslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexVector___setslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  {
    std::vector<unsigned int,std::allocator< unsigned int > > *ptr = (std::vector<unsigned int,std::allocator< unsigned int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IndexVector___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexVector___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_uint32_t_Sg____setslice__(arg1,arg2,arg3,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector___delslice__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector___delslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexVector___delslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  try {
    std_vector_Sl_uint32_t_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector___delitem__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector___delitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  try {
    std_vector_Sl_uint32_t_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector___getitem__" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector___getitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  try {
    {
      std::vector< unsigned int >::value_type const &_result_ref = std_vector_Sl_uint32_t_Sg____getitem__((std::vector< unsigned int > const *)arg1,arg2);
      result = (std::vector< unsigned int >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector___setitem__" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector___setitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexVector___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_uint32_t_Sg____setitem__(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_append" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector_append" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_uint32_t_Sg__append(arg1,(unsigned int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IndexVector")) SWIG_fail;
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IndexVector",&obj0)) SWIG_fail;
  {
    std::vector<unsigned int,std::allocator< unsigned int > > *ptr = (std::vector<unsigned int,std::allocator< unsigned int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IndexVector" "', argument " "1"" of type '" "std::vector< uint32_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IndexVector" "', argument " "1"" of type '" "std::vector< uint32_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >((std::vector< uint32_t > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_empty" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = (bool)((std::vector< uint32_t > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_size" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = ((std::vector< uint32_t > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_clear" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< uint32_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_swap" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IndexVector_swap" "', argument " "2"" of type '" "std::vector< uint32_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IndexVector_swap" "', argument " "2"" of type '" "std::vector< uint32_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< uint32_t > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< unsigned int > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_get_allocator" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = ((std::vector< uint32_t > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< unsigned int >::allocator_type(static_cast< const std::vector< unsigned int >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_begin" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = ((std::vector< uint32_t > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::const_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_end" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = ((std::vector< uint32_t > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::const_reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_rbegin" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = ((std::vector< uint32_t > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::const_reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_rend" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = ((std::vector< uint32_t > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IndexVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexVector" "', argument " "1"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned int >::size_type >(val1);
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_pop_back" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_resize" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector_resize" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_erase" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IndexVector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IndexVector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_erase" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IndexVector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IndexVector_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IndexVector_erase" "', argument " "3"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IndexVector_erase" "', argument " "3"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_IndexVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_IndexVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< uint32_t > *,std::vector< unsigned int >::iterator)\n"
    "    erase(std::vector< uint32_t > *,std::vector< unsigned int >::iterator,std::vector< unsigned int >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IndexVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IndexVector" "', argument " "1"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned int >::size_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IndexVector" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >(arg1,(std::vector< unsigned int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IndexVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IndexVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IndexVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IndexVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IndexVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_IndexVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< uint32_t >()\n"
    "    std::vector< uint32_t >(std::vector< uint32_t > const &)\n"
    "    std::vector< uint32_t >(std::vector< unsigned int >::size_type)\n"
    "    std::vector< uint32_t >(std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_push_back" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector_push_back" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_front" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  {
    std::vector< unsigned int >::value_type const &_result_ref = ((std::vector< uint32_t > const *)arg1)->front();
    result = (std::vector< unsigned int >::value_type *) &_result_ref;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_back" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  {
    std::vector< unsigned int >::value_type const &_result_ref = ((std::vector< uint32_t > const *)arg1)->back();
    result = (std::vector< unsigned int >::value_type *) &_result_ref;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_assign" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector_assign" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexVector_assign" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_resize" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector_resize" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexVector_resize" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IndexVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IndexVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< uint32_t > *,std::vector< unsigned int >::size_type)\n"
    "    resize(std::vector< uint32_t > *,std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IndexVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_insert" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IndexVector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IndexVector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexVector_insert" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  SwigValueWrapper< std::vector< unsigned int >::iterator > arg2 ;
  std::vector< unsigned int >::size_type arg3 ;
  std::vector< unsigned int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< unsigned int >::value_type temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IndexVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_insert" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IndexVector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IndexVector_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IndexVector_insert" "', argument " "3"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::size_type >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IndexVector_insert" "', argument " "4"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< unsigned int >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< unsigned int >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IndexVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IndexVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'IndexVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< uint32_t > *,std::vector< unsigned int >::iterator,std::vector< unsigned int >::value_type const &)\n"
    "    insert(std::vector< uint32_t > *,std::vector< unsigned int >::iterator,std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IndexVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_reserve" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IndexVector_reserve" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IndexVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< unsigned int >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IndexVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IndexVector_capacity" "', argument " "1"" of type '" "std::vector< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  result = ((std::vector< uint32_t > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IndexVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IndexVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IndexVector" "', argument " "1"" of type '" "std::vector< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IndexVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap__iter_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator *arg1 = (std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_iter_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__const_iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_iter_incr" "', argument " "1"" of type '" "std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator * >(argp1);
  _iter_incr(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__iter_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator *arg1 = (std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_iter_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t__const_iterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_iter_incr" "', argument " "1"" of type '" "std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator * >(argp1);
  _iter_incr(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__iter_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__const_iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__iter_incr__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t__const_iterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__iter_incr__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function '_iter_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    _iter_incr(std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator *)\n"
    "    _iter_incr(std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator *)\n");
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"delete_PySwigIterator", _wrap_delete_PySwigIterator, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_value", _wrap_PySwigIterator_value, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_incr", _wrap_PySwigIterator_incr, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_decr", _wrap_PySwigIterator_decr, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_distance", _wrap_PySwigIterator_distance, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_equal", _wrap_PySwigIterator_equal, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_copy", _wrap_PySwigIterator_copy, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_next", _wrap_PySwigIterator_next, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_previous", _wrap_PySwigIterator_previous, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_advance", _wrap_PySwigIterator_advance, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___eq__", _wrap_PySwigIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___ne__", _wrap_PySwigIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___iadd__", _wrap_PySwigIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___isub__", _wrap_PySwigIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___add__", _wrap_PySwigIterator___add__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___sub__", _wrap_PySwigIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_swigregister", PySwigIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"DoubleLT", _wrap_DoubleLT, METH_VARARGS, NULL},
	 { (char *)"DoubleLE", _wrap_DoubleLE, METH_VARARGS, NULL},
	 { (char *)"DoubleGT", _wrap_DoubleGT, METH_VARARGS, NULL},
	 { (char *)"DoubleGE", _wrap_DoubleGE, METH_VARARGS, NULL},
	 { (char *)"DoubleEQ", _wrap_DoubleEQ, METH_VARARGS, NULL},
	 { (char *)"MostSignificantBit", _wrap_MostSignificantBit, METH_VARARGS, NULL},
	 { (char *)"delete_AngularBin", _wrap_delete_AngularBin, METH_VARARGS, NULL},
	 { (char *)"new_AngularBin", _wrap_new_AngularBin, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ClearRegions", _wrap_AngularBin_ClearRegions, METH_VARARGS, NULL},
	 { (char *)"AngularBin_InitializeRegions", _wrap_AngularBin_InitializeRegions, METH_VARARGS, NULL},
	 { (char *)"AngularBin_SetResolution", _wrap_AngularBin_SetResolution, METH_VARARGS, NULL},
	 { (char *)"AngularBin_CalculateResolution", _wrap_AngularBin_CalculateResolution, METH_VARARGS, NULL},
	 { (char *)"AngularBin_SetThetaMin", _wrap_AngularBin_SetThetaMin, METH_VARARGS, NULL},
	 { (char *)"AngularBin_SetThetaMax", _wrap_AngularBin_SetThetaMax, METH_VARARGS, NULL},
	 { (char *)"AngularBin_SetTheta", _wrap_AngularBin_SetTheta, METH_VARARGS, NULL},
	 { (char *)"AngularBin_WithinBounds", _wrap_AngularBin_WithinBounds, METH_VARARGS, NULL},
	 { (char *)"AngularBin_WithinSin2Bounds", _wrap_AngularBin_WithinSin2Bounds, METH_VARARGS, NULL},
	 { (char *)"AngularBin_WithinCosBounds", _wrap_AngularBin_WithinCosBounds, METH_VARARGS, NULL},
	 { (char *)"AngularBin_Area", _wrap_AngularBin_Area, METH_VARARGS, NULL},
	 { (char *)"AngularBin_PoissonNoise", _wrap_AngularBin_PoissonNoise, METH_VARARGS, NULL},
	 { (char *)"AngularBin_AddToPixelWtheta", _wrap_AngularBin_AddToPixelWtheta, METH_VARARGS, NULL},
	 { (char *)"AngularBin_AddToWeight", _wrap_AngularBin_AddToWeight, METH_VARARGS, NULL},
	 { (char *)"AngularBin_AddToCounter", _wrap_AngularBin_AddToCounter, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MoveWeightToGalGal", _wrap_AngularBin_MoveWeightToGalGal, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MoveWeightToGalRand", _wrap_AngularBin_MoveWeightToGalRand, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MoveWeightToRandGal", _wrap_AngularBin_MoveWeightToRandGal, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MoveWeightToRandRand", _wrap_AngularBin_MoveWeightToRandRand, METH_VARARGS, NULL},
	 { (char *)"AngularBin_RescaleGalGal", _wrap_AngularBin_RescaleGalGal, METH_VARARGS, NULL},
	 { (char *)"AngularBin_RescaleGalRand", _wrap_AngularBin_RescaleGalRand, METH_VARARGS, NULL},
	 { (char *)"AngularBin_RescaleRandGal", _wrap_AngularBin_RescaleRandGal, METH_VARARGS, NULL},
	 { (char *)"AngularBin_RescaleRandRand", _wrap_AngularBin_RescaleRandRand, METH_VARARGS, NULL},
	 { (char *)"AngularBin_Reset", _wrap_AngularBin_Reset, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ResetPixelWtheta", _wrap_AngularBin_ResetPixelWtheta, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ResetWeight", _wrap_AngularBin_ResetWeight, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ResetCounter", _wrap_AngularBin_ResetCounter, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ResetGalGal", _wrap_AngularBin_ResetGalGal, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ResetGalRand", _wrap_AngularBin_ResetGalRand, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ResetRandGal", _wrap_AngularBin_ResetRandGal, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ResetRandRand", _wrap_AngularBin_ResetRandRand, METH_VARARGS, NULL},
	 { (char *)"AngularBin_Resolution", _wrap_AngularBin_Resolution, METH_VARARGS, NULL},
	 { (char *)"AngularBin_NRegion", _wrap_AngularBin_NRegion, METH_VARARGS, NULL},
	 { (char *)"AngularBin_Theta", _wrap_AngularBin_Theta, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ThetaMin", _wrap_AngularBin_ThetaMin, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ThetaMax", _wrap_AngularBin_ThetaMax, METH_VARARGS, NULL},
	 { (char *)"AngularBin_Sin2ThetaMin", _wrap_AngularBin_Sin2ThetaMin, METH_VARARGS, NULL},
	 { (char *)"AngularBin_Sin2ThetaMax", _wrap_AngularBin_Sin2ThetaMax, METH_VARARGS, NULL},
	 { (char *)"AngularBin_CosThetaMin", _wrap_AngularBin_CosThetaMin, METH_VARARGS, NULL},
	 { (char *)"AngularBin_CosThetaMax", _wrap_AngularBin_CosThetaMax, METH_VARARGS, NULL},
	 { (char *)"AngularBin_Wtheta", _wrap_AngularBin_Wtheta, METH_VARARGS, NULL},
	 { (char *)"AngularBin_WthetaError", _wrap_AngularBin_WthetaError, METH_VARARGS, NULL},
	 { (char *)"AngularBin_WeightedCrossCorrelation", _wrap_AngularBin_WeightedCrossCorrelation, METH_VARARGS, NULL},
	 { (char *)"AngularBin_PixelWtheta", _wrap_AngularBin_PixelWtheta, METH_VARARGS, NULL},
	 { (char *)"AngularBin_PixelWeight", _wrap_AngularBin_PixelWeight, METH_VARARGS, NULL},
	 { (char *)"AngularBin_Weight", _wrap_AngularBin_Weight, METH_VARARGS, NULL},
	 { (char *)"AngularBin_Counter", _wrap_AngularBin_Counter, METH_VARARGS, NULL},
	 { (char *)"AngularBin_GalGal", _wrap_AngularBin_GalGal, METH_VARARGS, NULL},
	 { (char *)"AngularBin_GalRand", _wrap_AngularBin_GalRand, METH_VARARGS, NULL},
	 { (char *)"AngularBin_RandGal", _wrap_AngularBin_RandGal, METH_VARARGS, NULL},
	 { (char *)"AngularBin_RandRand", _wrap_AngularBin_RandRand, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MeanWtheta", _wrap_AngularBin_MeanWtheta, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MeanWthetaError", _wrap_AngularBin_MeanWthetaError, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MeanWeightedCrossCorrelation", _wrap_AngularBin_MeanWeightedCrossCorrelation, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MeanWeightedCrossCorrelationError", _wrap_AngularBin_MeanWeightedCrossCorrelationError, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MeanWeight", _wrap_AngularBin_MeanWeight, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MeanCounter", _wrap_AngularBin_MeanCounter, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MeanGalGal", _wrap_AngularBin_MeanGalGal, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MeanGalRand", _wrap_AngularBin_MeanGalRand, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MeanRandGal", _wrap_AngularBin_MeanRandGal, METH_VARARGS, NULL},
	 { (char *)"AngularBin_MeanRandRand", _wrap_AngularBin_MeanRandRand, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ThetaOrder", _wrap_AngularBin_ThetaOrder, METH_VARARGS, NULL},
	 { (char *)"AngularBin_SinThetaOrder", _wrap_AngularBin_SinThetaOrder, METH_VARARGS, NULL},
	 { (char *)"AngularBin_ReverseResolutionOrder", _wrap_AngularBin_ReverseResolutionOrder, METH_VARARGS, NULL},
	 { (char *)"AngularBin_swigregister", AngularBin_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_RadialBin", _wrap_delete_RadialBin, METH_VARARGS, NULL},
	 { (char *)"new_RadialBin", _wrap_new_RadialBin, METH_VARARGS, NULL},
	 { (char *)"RadialBin_SetRadiusMin", _wrap_RadialBin_SetRadiusMin, METH_VARARGS, NULL},
	 { (char *)"RadialBin_SetRadiusMax", _wrap_RadialBin_SetRadiusMax, METH_VARARGS, NULL},
	 { (char *)"RadialBin_SetRadius", _wrap_RadialBin_SetRadius, METH_VARARGS, NULL},
	 { (char *)"RadialBin_SetRedshift", _wrap_RadialBin_SetRedshift, METH_VARARGS, NULL},
	 { (char *)"RadialBin_WithinRadialBounds", _wrap_RadialBin_WithinRadialBounds, METH_VARARGS, NULL},
	 { (char *)"RadialBin_Radius", _wrap_RadialBin_Radius, METH_VARARGS, NULL},
	 { (char *)"RadialBin_RadiusMin", _wrap_RadialBin_RadiusMin, METH_VARARGS, NULL},
	 { (char *)"RadialBin_RadiusMax", _wrap_RadialBin_RadiusMax, METH_VARARGS, NULL},
	 { (char *)"RadialBin_Redshift", _wrap_RadialBin_Redshift, METH_VARARGS, NULL},
	 { (char *)"RadialBin_RadialOrder", _wrap_RadialBin_RadialOrder, METH_VARARGS, NULL},
	 { (char *)"RadialBin_ReverseResolutionOrder", _wrap_RadialBin_ReverseResolutionOrder, METH_VARARGS, NULL},
	 { (char *)"RadialBin_swigregister", RadialBin_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AngularCorrelation", _wrap_new_AngularCorrelation, METH_VARARGS, NULL},
	 { (char *)"delete_AngularCorrelation", _wrap_delete_AngularCorrelation, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_AssignBinResolutions", _wrap_AngularCorrelation_AssignBinResolutions, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_SetMaxResolution", _wrap_AngularCorrelation_SetMaxResolution, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_SetMinResolution", _wrap_AngularCorrelation_SetMinResolution, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_AutoMaxResolution", _wrap_AngularCorrelation_AutoMaxResolution, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_InitializeRegions", _wrap_AngularCorrelation_InitializeRegions, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_ClearRegions", _wrap_AngularCorrelation_ClearRegions, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_NRegion", _wrap_AngularCorrelation_NRegion, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_FindAutoCorrelation", _wrap_AngularCorrelation_FindAutoCorrelation, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_FindCrossCorrelation", _wrap_AngularCorrelation_FindCrossCorrelation, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_FindAutoCorrelationWithRegions", _wrap_AngularCorrelation_FindAutoCorrelationWithRegions, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_FindCrossCorrelationWithRegions", _wrap_AngularCorrelation_FindCrossCorrelationWithRegions, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_FindPixelAutoCorrelation", _wrap_AngularCorrelation_FindPixelAutoCorrelation, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_FindPixelCrossCorrelation", _wrap_AngularCorrelation_FindPixelCrossCorrelation, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_FindPairAutoCorrelation", _wrap_AngularCorrelation_FindPairAutoCorrelation, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_FindPairCrossCorrelation", _wrap_AngularCorrelation_FindPairCrossCorrelation, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_Write", _wrap_AngularCorrelation_Write, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_UseOnlyPixels", _wrap_AngularCorrelation_UseOnlyPixels, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_UseOnlyPairs", _wrap_AngularCorrelation_UseOnlyPairs, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_ThetaMin", _wrap_AngularCorrelation_ThetaMin, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_ThetaMax", _wrap_AngularCorrelation_ThetaMax, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_Sin2ThetaMin", _wrap_AngularCorrelation_Sin2ThetaMin, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_Sin2ThetaMax", _wrap_AngularCorrelation_Sin2ThetaMax, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_Begin", _wrap_AngularCorrelation_Begin, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_End", _wrap_AngularCorrelation_End, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_Find", _wrap_AngularCorrelation_Find, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_BinIterator", _wrap_AngularCorrelation_BinIterator, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_NBins", _wrap_AngularCorrelation_NBins, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_MinResolution", _wrap_AngularCorrelation_MinResolution, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_MaxResolution", _wrap_AngularCorrelation_MaxResolution, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_Covariance", _wrap_AngularCorrelation_Covariance, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_WriteCovariance", _wrap_AngularCorrelation_WriteCovariance, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation__begin_Bins", _wrap_AngularCorrelation__begin_Bins, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation__deref_Bins", _wrap_AngularCorrelation__deref_Bins, METH_VARARGS, NULL},
	 { (char *)"AngularCorrelation_swigregister", AngularCorrelation_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Pixel", _wrap_new_Pixel, METH_VARARGS, NULL},
	 { (char *)"delete_Pixel", _wrap_delete_Pixel, METH_VARARGS, NULL},
	 { (char *)"Pixel___lt__", _wrap_Pixel___lt__, METH_VARARGS, NULL},
	 { (char *)"Pixel___eq__", _wrap_Pixel___eq__, METH_VARARGS, NULL},
	 { (char *)"Pixel___ne__", _wrap_Pixel___ne__, METH_VARARGS, NULL},
	 { (char *)"Pixel_SetPixnumFromAng", _wrap_Pixel_SetPixnumFromAng, METH_VARARGS, NULL},
	 { (char *)"Pixel_SetResolution", _wrap_Pixel_SetResolution, METH_VARARGS, NULL},
	 { (char *)"Pixel_SetLevel", _wrap_Pixel_SetLevel, METH_VARARGS, NULL},
	 { (char *)"Pixel_SetPixnumFromXY", _wrap_Pixel_SetPixnumFromXY, METH_VARARGS, NULL},
	 { (char *)"Pixel_SetWeight", _wrap_Pixel_SetWeight, METH_VARARGS, NULL},
	 { (char *)"Pixel_Level", _wrap_Pixel_Level, METH_VARARGS, NULL},
	 { (char *)"Pixel_Resolution", _wrap_Pixel_Resolution, METH_VARARGS, NULL},
	 { (char *)"Pixel_PixelX", _wrap_Pixel_PixelX, METH_VARARGS, NULL},
	 { (char *)"Pixel_PixelY", _wrap_Pixel_PixelY, METH_VARARGS, NULL},
	 { (char *)"Pixel_Weight", _wrap_Pixel_Weight, METH_VARARGS, NULL},
	 { (char *)"Pixel_ReverseWeight", _wrap_Pixel_ReverseWeight, METH_VARARGS, NULL},
	 { (char *)"Pixel_InvertWeight", _wrap_Pixel_InvertWeight, METH_VARARGS, NULL},
	 { (char *)"Pixel_SetToSuperPix", _wrap_Pixel_SetToSuperPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_SetToLevel", _wrap_Pixel_SetToLevel, METH_VARARGS, NULL},
	 { (char *)"Pixel_SubPix", _wrap_Pixel_SubPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_FirstCohort", _wrap_Pixel_FirstCohort, METH_VARARGS, NULL},
	 { (char *)"Pixel_Area", _wrap_Pixel_Area, METH_VARARGS, NULL},
	 { (char *)"Pixel_Superpixnum", _wrap_Pixel_Superpixnum, METH_VARARGS, NULL},
	 { (char *)"Pixel_HPixnum", _wrap_Pixel_HPixnum, METH_VARARGS, NULL},
	 { (char *)"Pixel_Pixnum", _wrap_Pixel_Pixnum, METH_VARARGS, NULL},
	 { (char *)"Pixel_Contains", _wrap_Pixel_Contains, METH_VARARGS, NULL},
	 { (char *)"Pixel_WithinBounds", _wrap_Pixel_WithinBounds, METH_VARARGS, NULL},
	 { (char *)"Pixel_IntersectsBounds", _wrap_Pixel_IntersectsBounds, METH_VARARGS, NULL},
	 { (char *)"Pixel_WithinRadius", _wrap_Pixel_WithinRadius, METH_VARARGS, NULL},
	 { (char *)"Pixel_WithinAnnulus", _wrap_Pixel_WithinAnnulus, METH_VARARGS, NULL},
	 { (char *)"Pixel_BoundingRadius", _wrap_Pixel_BoundingRadius, METH_VARARGS, NULL},
	 { (char *)"Pixel_XYBounds", _wrap_Pixel_XYBounds, METH_VARARGS, NULL},
	 { (char *)"Pixel_EtaStep", _wrap_Pixel_EtaStep, METH_VARARGS, NULL},
	 { (char *)"Pixel_NearEdgeDistance", _wrap_Pixel_NearEdgeDistance, METH_VARARGS, NULL},
	 { (char *)"Pixel_FarEdgeDistance", _wrap_Pixel_FarEdgeDistance, METH_VARARGS, NULL},
	 { (char *)"Pixel_NearCornerDistance", _wrap_Pixel_NearCornerDistance, METH_VARARGS, NULL},
	 { (char *)"Pixel_FarCornerDistance", _wrap_Pixel_FarCornerDistance, METH_VARARGS, NULL},
	 { (char *)"Pixel_EdgeDistances", _wrap_Pixel_EdgeDistances, METH_VARARGS, NULL},
	 { (char *)"Pixel_IsWithinRadius", _wrap_Pixel_IsWithinRadius, METH_VARARGS, NULL},
	 { (char *)"Pixel_IsWithinAnnulus", _wrap_Pixel_IsWithinAnnulus, METH_VARARGS, NULL},
	 { (char *)"Pixel_IntersectsAnnulus", _wrap_Pixel_IntersectsAnnulus, METH_VARARGS, NULL},
	 { (char *)"Pixel_Stripe", _wrap_Pixel_Stripe, METH_VARARGS, NULL},
	 { (char *)"Pixel_RA", _wrap_Pixel_RA, METH_VARARGS, NULL},
	 { (char *)"Pixel_DEC", _wrap_Pixel_DEC, METH_VARARGS, NULL},
	 { (char *)"Pixel_GalLon", _wrap_Pixel_GalLon, METH_VARARGS, NULL},
	 { (char *)"Pixel_GalLat", _wrap_Pixel_GalLat, METH_VARARGS, NULL},
	 { (char *)"Pixel_Ang", _wrap_Pixel_Ang, METH_VARARGS, NULL},
	 { (char *)"Pixel_Lambda", _wrap_Pixel_Lambda, METH_VARARGS, NULL},
	 { (char *)"Pixel_Eta", _wrap_Pixel_Eta, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereX", _wrap_Pixel_UnitSphereX, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereY", _wrap_Pixel_UnitSphereY, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereZ", _wrap_Pixel_UnitSphereZ, METH_VARARGS, NULL},
	 { (char *)"Pixel_LambdaMin", _wrap_Pixel_LambdaMin, METH_VARARGS, NULL},
	 { (char *)"Pixel_LambdaMax", _wrap_Pixel_LambdaMax, METH_VARARGS, NULL},
	 { (char *)"Pixel_EtaMin", _wrap_Pixel_EtaMin, METH_VARARGS, NULL},
	 { (char *)"Pixel_EtaMax", _wrap_Pixel_EtaMax, METH_VARARGS, NULL},
	 { (char *)"Pixel_EtaMaxContinuous", _wrap_Pixel_EtaMaxContinuous, METH_VARARGS, NULL},
	 { (char *)"Pixel_SurveyContinuous", _wrap_Pixel_SurveyContinuous, METH_VARARGS, NULL},
	 { (char *)"Pixel_DECMin", _wrap_Pixel_DECMin, METH_VARARGS, NULL},
	 { (char *)"Pixel_DECMax", _wrap_Pixel_DECMax, METH_VARARGS, NULL},
	 { (char *)"Pixel_RAMin", _wrap_Pixel_RAMin, METH_VARARGS, NULL},
	 { (char *)"Pixel_RAMax", _wrap_Pixel_RAMax, METH_VARARGS, NULL},
	 { (char *)"Pixel_RAMaxContinuous", _wrap_Pixel_RAMaxContinuous, METH_VARARGS, NULL},
	 { (char *)"Pixel_EquatorialContinuous", _wrap_Pixel_EquatorialContinuous, METH_VARARGS, NULL},
	 { (char *)"Pixel_GalLatMin", _wrap_Pixel_GalLatMin, METH_VARARGS, NULL},
	 { (char *)"Pixel_GalLatMax", _wrap_Pixel_GalLatMax, METH_VARARGS, NULL},
	 { (char *)"Pixel_GalLonMin", _wrap_Pixel_GalLonMin, METH_VARARGS, NULL},
	 { (char *)"Pixel_GalLonMax", _wrap_Pixel_GalLonMax, METH_VARARGS, NULL},
	 { (char *)"Pixel_GalLonMaxContinuous", _wrap_Pixel_GalLonMaxContinuous, METH_VARARGS, NULL},
	 { (char *)"Pixel_GalacticContinuous", _wrap_Pixel_GalacticContinuous, METH_VARARGS, NULL},
	 { (char *)"Pixel_ContinuousBounds", _wrap_Pixel_ContinuousBounds, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereX_UL", _wrap_Pixel_UnitSphereX_UL, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereY_UL", _wrap_Pixel_UnitSphereY_UL, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereZ_UL", _wrap_Pixel_UnitSphereZ_UL, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereX_UR", _wrap_Pixel_UnitSphereX_UR, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereY_UR", _wrap_Pixel_UnitSphereY_UR, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereZ_UR", _wrap_Pixel_UnitSphereZ_UR, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereX_LL", _wrap_Pixel_UnitSphereX_LL, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereY_LL", _wrap_Pixel_UnitSphereY_LL, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereZ_LL", _wrap_Pixel_UnitSphereZ_LL, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereX_LR", _wrap_Pixel_UnitSphereX_LR, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereY_LR", _wrap_Pixel_UnitSphereY_LR, METH_VARARGS, NULL},
	 { (char *)"Pixel_UnitSphereZ_LR", _wrap_Pixel_UnitSphereZ_LR, METH_VARARGS, NULL},
	 { (char *)"Pixel_Iterate", _wrap_Pixel_Iterate, METH_VARARGS, NULL},
	 { (char *)"Pixel_PixelX0", _wrap_Pixel_PixelX0, METH_VARARGS, NULL},
	 { (char *)"Pixel_PixelY0", _wrap_Pixel_PixelY0, METH_VARARGS, NULL},
	 { (char *)"Pixel_PixelX1", _wrap_Pixel_PixelX1, METH_VARARGS, NULL},
	 { (char *)"Pixel_PixelY1", _wrap_Pixel_PixelY1, METH_VARARGS, NULL},
	 { (char *)"Pixel_GenerateRandomPoints", _wrap_Pixel_GenerateRandomPoints, METH_VARARGS, NULL},
	 { (char *)"Pixel_ResolutionToLevel", _wrap_Pixel_ResolutionToLevel, METH_VARARGS, NULL},
	 { (char *)"Pixel_LevelToResolution", _wrap_Pixel_LevelToResolution, METH_VARARGS, NULL},
	 { (char *)"Pixel_Ang2Pix", _wrap_Pixel_Ang2Pix, METH_VARARGS, NULL},
	 { (char *)"Pixel_Pix2Ang", _wrap_Pixel_Pix2Ang, METH_VARARGS, NULL},
	 { (char *)"Pixel_Pix2HPix", _wrap_Pixel_Pix2HPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_HPix2Pix", _wrap_Pixel_HPix2Pix, METH_VARARGS, NULL},
	 { (char *)"Pixel_SuperPix", _wrap_Pixel_SuperPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_SubPixels", _wrap_Pixel_SubPixels, METH_VARARGS, NULL},
	 { (char *)"Pixel_NextSubPix", _wrap_Pixel_NextSubPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_AreaIndex", _wrap_Pixel_AreaIndex, METH_VARARGS, NULL},
	 { (char *)"Pixel_PixelBound", _wrap_Pixel_PixelBound, METH_VARARGS, NULL},
	 { (char *)"Pixel_CohortPix", _wrap_Pixel_CohortPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_PixelArea", _wrap_Pixel_PixelArea, METH_VARARGS, NULL},
	 { (char *)"Pixel_Pix2EtaStep", _wrap_Pixel_Pix2EtaStep, METH_VARARGS, NULL},
	 { (char *)"Pixel_Ang2HPix", _wrap_Pixel_Ang2HPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_HPix2Ang", _wrap_Pixel_HPix2Ang, METH_VARARGS, NULL},
	 { (char *)"Pixel_XY2HPix", _wrap_Pixel_XY2HPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_HPix2XY", _wrap_Pixel_HPix2XY, METH_VARARGS, NULL},
	 { (char *)"Pixel_SuperHPix", _wrap_Pixel_SuperHPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_NextSubHPix", _wrap_Pixel_NextSubHPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_SubHPix", _wrap_Pixel_SubHPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_HPixelBound", _wrap_Pixel_HPixelBound, METH_VARARGS, NULL},
	 { (char *)"Pixel_CohortHPix", _wrap_Pixel_CohortHPix, METH_VARARGS, NULL},
	 { (char *)"Pixel_HPixelArea", _wrap_Pixel_HPixelArea, METH_VARARGS, NULL},
	 { (char *)"Pixel_HPix2EtaStep", _wrap_Pixel_HPix2EtaStep, METH_VARARGS, NULL},
	 { (char *)"Pixel_XY2Pix", _wrap_Pixel_XY2Pix, METH_VARARGS, NULL},
	 { (char *)"Pixel_Pix2XY", _wrap_Pixel_Pix2XY, METH_VARARGS, NULL},
	 { (char *)"Pixel_LocalOrder", _wrap_Pixel_LocalOrder, METH_VARARGS, NULL},
	 { (char *)"Pixel_SuperPixelBasedOrder", _wrap_Pixel_SuperPixelBasedOrder, METH_VARARGS, NULL},
	 { (char *)"Pixel_SuperPixelOrder", _wrap_Pixel_SuperPixelOrder, METH_VARARGS, NULL},
	 { (char *)"Pixel_WeightedOrder", _wrap_Pixel_WeightedOrder, METH_VARARGS, NULL},
	 { (char *)"Pixel_WeightMatch", _wrap_Pixel_WeightMatch, METH_VARARGS, NULL},
	 { (char *)"Pixel_WeightedPixelMatch", _wrap_Pixel_WeightedPixelMatch, METH_VARARGS, NULL},
	 { (char *)"Pixel_PixelMatch", _wrap_Pixel_PixelMatch, METH_VARARGS, NULL},
	 { (char *)"Pixel_ResolveSuperPixel", _wrap_Pixel_ResolveSuperPixel, METH_VARARGS, NULL},
	 { (char *)"Pixel_ResolvePixel", _wrap_Pixel_ResolvePixel, METH_VARARGS, NULL},
	 { (char *)"Pixel_FindUniquePixels", _wrap_Pixel_FindUniquePixels, METH_VARARGS, NULL},
	 { (char *)"Pixel_swigregister", Pixel_swigregister, METH_VARARGS, NULL},
	 { (char *)"PixelOrdering___call__", _wrap_PixelOrdering___call__, METH_VARARGS, NULL},
	 { (char *)"new_PixelOrdering", _wrap_new_PixelOrdering, METH_VARARGS, NULL},
	 { (char *)"delete_PixelOrdering", _wrap_delete_PixelOrdering, METH_VARARGS, NULL},
	 { (char *)"PixelOrdering_swigregister", PixelOrdering_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScalarPixel", _wrap_new_ScalarPixel, METH_VARARGS, NULL},
	 { (char *)"delete_ScalarPixel", _wrap_delete_ScalarPixel, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_SetIntensity", _wrap_ScalarPixel_SetIntensity, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_SetNPoints", _wrap_ScalarPixel_SetNPoints, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_Intensity", _wrap_ScalarPixel_Intensity, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_NPoints", _wrap_ScalarPixel_NPoints, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_MeanIntensity", _wrap_ScalarPixel_MeanIntensity, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_AddToIntensity", _wrap_ScalarPixel_AddToIntensity, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_ScaleIntensity", _wrap_ScalarPixel_ScaleIntensity, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_NormalizeIntensity", _wrap_ScalarPixel_NormalizeIntensity, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_ConvertToOverDensity", _wrap_ScalarPixel_ConvertToOverDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_ConvertToFractionalOverDensity", _wrap_ScalarPixel_ConvertToFractionalOverDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_ConvertFromOverDensity", _wrap_ScalarPixel_ConvertFromOverDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_ConvertFromFractionalOverDensity", _wrap_ScalarPixel_ConvertFromFractionalOverDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_UnitSphereX", _wrap_ScalarPixel_UnitSphereX, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_UnitSphereY", _wrap_ScalarPixel_UnitSphereY, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_UnitSphereZ", _wrap_ScalarPixel_UnitSphereZ, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel__WithinAnnulus", _wrap_ScalarPixel__WithinAnnulus, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_IsOverDensity", _wrap_ScalarPixel_IsOverDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarPixel_swigregister", ScalarPixel_swigregister, METH_VARARGS, NULL},
	 { (char *)"section_min_stripe_set", _wrap_section_min_stripe_set, METH_VARARGS, NULL},
	 { (char *)"section_min_stripe_get", _wrap_section_min_stripe_get, METH_VARARGS, NULL},
	 { (char *)"section_max_stripe_set", _wrap_section_max_stripe_set, METH_VARARGS, NULL},
	 { (char *)"section_max_stripe_get", _wrap_section_max_stripe_get, METH_VARARGS, NULL},
	 { (char *)"new_section", _wrap_new_section, METH_VARARGS, NULL},
	 { (char *)"delete_section", _wrap_delete_section, METH_VARARGS, NULL},
	 { (char *)"section_swigregister", section_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RegionBound", _wrap_new_RegionBound, METH_VARARGS, NULL},
	 { (char *)"delete_RegionBound", _wrap_delete_RegionBound, METH_VARARGS, NULL},
	 { (char *)"RegionBound_SetGeometricBound", _wrap_RegionBound_SetGeometricBound, METH_VARARGS, NULL},
	 { (char *)"RegionBound_SetNRegion", _wrap_RegionBound_SetNRegion, METH_VARARGS, NULL},
	 { (char *)"RegionBound_NRegion", _wrap_RegionBound_NRegion, METH_VARARGS, NULL},
	 { (char *)"RegionBound_CheckPixel", _wrap_RegionBound_CheckPixel, METH_VARARGS, NULL},
	 { (char *)"RegionBound_ScorePixel", _wrap_RegionBound_ScorePixel, METH_VARARGS, NULL},
	 { (char *)"RegionBound_AddPixel", _wrap_RegionBound_AddPixel, METH_VARARGS, NULL},
	 { (char *)"RegionBound_RemovePixel", _wrap_RegionBound_RemovePixel, METH_VARARGS, NULL},
	 { (char *)"RegionBound_ClearPixels", _wrap_RegionBound_ClearPixels, METH_VARARGS, NULL},
	 { (char *)"RegionBound_Coverage", _wrap_RegionBound_Coverage, METH_VARARGS, NULL},
	 { (char *)"RegionBound_CoveragePixels", _wrap_RegionBound_CoveragePixels, METH_VARARGS, NULL},
	 { (char *)"RegionBound_CoverageArea", _wrap_RegionBound_CoverageArea, METH_VARARGS, NULL},
	 { (char *)"RegionBound_BoundArea", _wrap_RegionBound_BoundArea, METH_VARARGS, NULL},
	 { (char *)"RegionBound_swigregister", RegionBound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RegionMap", _wrap_new_RegionMap, METH_VARARGS, NULL},
	 { (char *)"delete_RegionMap", _wrap_delete_RegionMap, METH_VARARGS, NULL},
	 { (char *)"RegionMap_InitializeRegions", _wrap_RegionMap_InitializeRegions, METH_VARARGS, NULL},
	 { (char *)"RegionMap__FindRegionResolution", _wrap_RegionMap__FindRegionResolution, METH_VARARGS, NULL},
	 { (char *)"RegionMap__FindUniqueStripes", _wrap_RegionMap__FindUniqueStripes, METH_VARARGS, NULL},
	 { (char *)"RegionMap__FindSections", _wrap_RegionMap__FindSections, METH_VARARGS, NULL},
	 { (char *)"RegionMap__Regionate", _wrap_RegionMap__Regionate, METH_VARARGS, NULL},
	 { (char *)"RegionMap__VerifyRegionation", _wrap_RegionMap__VerifyRegionation, METH_VARARGS, NULL},
	 { (char *)"RegionMap_FindRegion", _wrap_RegionMap_FindRegion, METH_VARARGS, NULL},
	 { (char *)"RegionMap_ClearRegions", _wrap_RegionMap_ClearRegions, METH_VARARGS, NULL},
	 { (char *)"RegionMap_Region", _wrap_RegionMap_Region, METH_VARARGS, NULL},
	 { (char *)"RegionMap_RegionArea", _wrap_RegionMap_RegionArea, METH_VARARGS, NULL},
	 { (char *)"RegionMap_NRegion", _wrap_RegionMap_NRegion, METH_VARARGS, NULL},
	 { (char *)"RegionMap_Resolution", _wrap_RegionMap_Resolution, METH_VARARGS, NULL},
	 { (char *)"RegionMap_Initialized", _wrap_RegionMap_Initialized, METH_VARARGS, NULL},
	 { (char *)"RegionMap_Begin", _wrap_RegionMap_Begin, METH_VARARGS, NULL},
	 { (char *)"RegionMap_End", _wrap_RegionMap_End, METH_VARARGS, NULL},
	 { (char *)"RegionMap_swigregister", RegionMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BaseMap", _wrap_new_BaseMap, METH_VARARGS, NULL},
	 { (char *)"delete_BaseMap", _wrap_delete_BaseMap, METH_VARARGS, NULL},
	 { (char *)"BaseMap_Coverage", _wrap_BaseMap_Coverage, METH_VARARGS, NULL},
	 { (char *)"BaseMap_FindUnmaskedFraction", _wrap_BaseMap_FindUnmaskedFraction, METH_VARARGS, NULL},
	 { (char *)"BaseMap_FindUnmaskedStatus", _wrap_BaseMap_FindUnmaskedStatus, METH_VARARGS, NULL},
	 { (char *)"BaseMap_Empty", _wrap_BaseMap_Empty, METH_VARARGS, NULL},
	 { (char *)"BaseMap_Clear", _wrap_BaseMap_Clear, METH_VARARGS, NULL},
	 { (char *)"BaseMap_Size", _wrap_BaseMap_Size, METH_VARARGS, NULL},
	 { (char *)"BaseMap_Area", _wrap_BaseMap_Area, METH_VARARGS, NULL},
	 { (char *)"BaseMap_MinResolution", _wrap_BaseMap_MinResolution, METH_VARARGS, NULL},
	 { (char *)"BaseMap_MaxResolution", _wrap_BaseMap_MaxResolution, METH_VARARGS, NULL},
	 { (char *)"BaseMap_MinLevel", _wrap_BaseMap_MinLevel, METH_VARARGS, NULL},
	 { (char *)"BaseMap_MaxLevel", _wrap_BaseMap_MaxLevel, METH_VARARGS, NULL},
	 { (char *)"BaseMap_InitializeRegions", _wrap_BaseMap_InitializeRegions, METH_VARARGS, NULL},
	 { (char *)"BaseMap_FindRegion", _wrap_BaseMap_FindRegion, METH_VARARGS, NULL},
	 { (char *)"BaseMap_ClearRegions", _wrap_BaseMap_ClearRegions, METH_VARARGS, NULL},
	 { (char *)"BaseMap_Region", _wrap_BaseMap_Region, METH_VARARGS, NULL},
	 { (char *)"BaseMap_RegionArea", _wrap_BaseMap_RegionArea, METH_VARARGS, NULL},
	 { (char *)"BaseMap_NRegion", _wrap_BaseMap_NRegion, METH_VARARGS, NULL},
	 { (char *)"BaseMap_RegionResolution", _wrap_BaseMap_RegionResolution, METH_VARARGS, NULL},
	 { (char *)"BaseMap_RegionsInitialized", _wrap_BaseMap_RegionsInitialized, METH_VARARGS, NULL},
	 { (char *)"BaseMap_RegionBegin", _wrap_BaseMap_RegionBegin, METH_VARARGS, NULL},
	 { (char *)"BaseMap_RegionEnd", _wrap_BaseMap_RegionEnd, METH_VARARGS, NULL},
	 { (char *)"BaseMap_swigregister", BaseMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SubMap", _wrap_new_SubMap, METH_VARARGS, NULL},
	 { (char *)"delete_SubMap", _wrap_delete_SubMap, METH_VARARGS, NULL},
	 { (char *)"SubMap_AddPixel", _wrap_SubMap_AddPixel, METH_VARARGS, NULL},
	 { (char *)"SubMap_Resolve", _wrap_SubMap_Resolve, METH_VARARGS, NULL},
	 { (char *)"SubMap_SetMinimumWeight", _wrap_SubMap_SetMinimumWeight, METH_VARARGS, NULL},
	 { (char *)"SubMap_SetMaximumWeight", _wrap_SubMap_SetMaximumWeight, METH_VARARGS, NULL},
	 { (char *)"SubMap_SetMaximumResolution", _wrap_SubMap_SetMaximumResolution, METH_VARARGS, NULL},
	 { (char *)"SubMap_FindLocation", _wrap_SubMap_FindLocation, METH_VARARGS, NULL},
	 { (char *)"SubMap_FindUnmaskedFraction", _wrap_SubMap_FindUnmaskedFraction, METH_VARARGS, NULL},
	 { (char *)"SubMap_FindUnmaskedStatus", _wrap_SubMap_FindUnmaskedStatus, METH_VARARGS, NULL},
	 { (char *)"SubMap_FindAverageWeight", _wrap_SubMap_FindAverageWeight, METH_VARARGS, NULL},
	 { (char *)"SubMap_FindMatchingPixels", _wrap_SubMap_FindMatchingPixels, METH_VARARGS, NULL},
	 { (char *)"SubMap_AverageWeight", _wrap_SubMap_AverageWeight, METH_VARARGS, NULL},
	 { (char *)"SubMap_Soften", _wrap_SubMap_Soften, METH_VARARGS, NULL},
	 { (char *)"SubMap_Add", _wrap_SubMap_Add, METH_VARARGS, NULL},
	 { (char *)"SubMap_Multiply", _wrap_SubMap_Multiply, METH_VARARGS, NULL},
	 { (char *)"SubMap_Exclude", _wrap_SubMap_Exclude, METH_VARARGS, NULL},
	 { (char *)"SubMap_ScaleWeight", _wrap_SubMap_ScaleWeight, METH_VARARGS, NULL},
	 { (char *)"SubMap_AddConstantWeight", _wrap_SubMap_AddConstantWeight, METH_VARARGS, NULL},
	 { (char *)"SubMap_InvertWeight", _wrap_SubMap_InvertWeight, METH_VARARGS, NULL},
	 { (char *)"SubMap_Pixels", _wrap_SubMap_Pixels, METH_VARARGS, NULL},
	 { (char *)"SubMap_Clear", _wrap_SubMap_Clear, METH_VARARGS, NULL},
	 { (char *)"SubMap_Superpixnum", _wrap_SubMap_Superpixnum, METH_VARARGS, NULL},
	 { (char *)"SubMap_Begin", _wrap_SubMap_Begin, METH_VARARGS, NULL},
	 { (char *)"SubMap_End", _wrap_SubMap_End, METH_VARARGS, NULL},
	 { (char *)"SubMap_Area", _wrap_SubMap_Area, METH_VARARGS, NULL},
	 { (char *)"SubMap_Initialized", _wrap_SubMap_Initialized, METH_VARARGS, NULL},
	 { (char *)"SubMap_Unsorted", _wrap_SubMap_Unsorted, METH_VARARGS, NULL},
	 { (char *)"SubMap_SetUnsorted", _wrap_SubMap_SetUnsorted, METH_VARARGS, NULL},
	 { (char *)"SubMap_MinResolution", _wrap_SubMap_MinResolution, METH_VARARGS, NULL},
	 { (char *)"SubMap_MaxResolution", _wrap_SubMap_MaxResolution, METH_VARARGS, NULL},
	 { (char *)"SubMap_MinLevel", _wrap_SubMap_MinLevel, METH_VARARGS, NULL},
	 { (char *)"SubMap_MaxLevel", _wrap_SubMap_MaxLevel, METH_VARARGS, NULL},
	 { (char *)"SubMap_MinWeight", _wrap_SubMap_MinWeight, METH_VARARGS, NULL},
	 { (char *)"SubMap_MaxWeight", _wrap_SubMap_MaxWeight, METH_VARARGS, NULL},
	 { (char *)"SubMap_LambdaMin", _wrap_SubMap_LambdaMin, METH_VARARGS, NULL},
	 { (char *)"SubMap_LambdaMax", _wrap_SubMap_LambdaMax, METH_VARARGS, NULL},
	 { (char *)"SubMap_EtaMin", _wrap_SubMap_EtaMin, METH_VARARGS, NULL},
	 { (char *)"SubMap_EtaMax", _wrap_SubMap_EtaMax, METH_VARARGS, NULL},
	 { (char *)"SubMap_ZMin", _wrap_SubMap_ZMin, METH_VARARGS, NULL},
	 { (char *)"SubMap_ZMax", _wrap_SubMap_ZMax, METH_VARARGS, NULL},
	 { (char *)"SubMap_Size", _wrap_SubMap_Size, METH_VARARGS, NULL},
	 { (char *)"SubMap_PixelCount", _wrap_SubMap_PixelCount, METH_VARARGS, NULL},
	 { (char *)"SubMap_swigregister", SubMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Map", _wrap_new_Map, METH_VARARGS, NULL},
	 { (char *)"delete_Map", _wrap_delete_Map, METH_VARARGS, NULL},
	 { (char *)"Map_Initialize", _wrap_Map_Initialize, METH_VARARGS, NULL},
	 { (char *)"Map_AddPixel", _wrap_Map_AddPixel, METH_VARARGS, NULL},
	 { (char *)"Map_FindLocation", _wrap_Map_FindLocation, METH_VARARGS, NULL},
	 { (char *)"Map_FindLocationWeight", _wrap_Map_FindLocationWeight, METH_VARARGS, NULL},
	 { (char *)"Map_FindUnmaskedStatus", _wrap_Map_FindUnmaskedStatus, METH_VARARGS, NULL},
	 { (char *)"Map_FindAverageWeight", _wrap_Map_FindAverageWeight, METH_VARARGS, NULL},
	 { (char *)"Map_AverageWeight", _wrap_Map_AverageWeight, METH_VARARGS, NULL},
	 { (char *)"Map_FindMatchingPixels", _wrap_Map_FindMatchingPixels, METH_VARARGS, NULL},
	 { (char *)"Map_Coverage", _wrap_Map_Coverage, METH_VARARGS, NULL},
	 { (char *)"Map_Covering", _wrap_Map_Covering, METH_VARARGS, NULL},
	 { (char *)"Map_Soften", _wrap_Map_Soften, METH_VARARGS, NULL},
	 { (char *)"Map_SetMinimumWeight", _wrap_Map_SetMinimumWeight, METH_VARARGS, NULL},
	 { (char *)"Map_SetMaximumWeight", _wrap_Map_SetMaximumWeight, METH_VARARGS, NULL},
	 { (char *)"Map_RegionOnlyMap", _wrap_Map_RegionOnlyMap, METH_VARARGS, NULL},
	 { (char *)"Map_RegionExcludedMap", _wrap_Map_RegionExcludedMap, METH_VARARGS, NULL},
	 { (char *)"Map_GenerateRandomPoints", _wrap_Map_GenerateRandomPoints, METH_VARARGS, NULL},
	 { (char *)"Map_GenerateRandomEq", _wrap_Map_GenerateRandomEq, METH_VARARGS, NULL},
	 { (char *)"Map_GenerateRandomSurvey", _wrap_Map_GenerateRandomSurvey, METH_VARARGS, NULL},
	 { (char *)"Map_GenerateRandomGal", _wrap_Map_GenerateRandomGal, METH_VARARGS, NULL},
	 { (char *)"Map_INSIDE_MAP_get", _wrap_Map_INSIDE_MAP_get, METH_VARARGS, NULL},
	 { (char *)"Map_INSIDE_MAP_set", _wrap_Map_INSIDE_MAP_set, METH_VARARGS, NULL},
	 { (char *)"Map_FIRST_QUADRANT_OK_get", _wrap_Map_FIRST_QUADRANT_OK_get, METH_VARARGS, NULL},
	 { (char *)"Map_FIRST_QUADRANT_OK_set", _wrap_Map_FIRST_QUADRANT_OK_set, METH_VARARGS, NULL},
	 { (char *)"Map_SECOND_QUADRANT_OK_get", _wrap_Map_SECOND_QUADRANT_OK_get, METH_VARARGS, NULL},
	 { (char *)"Map_SECOND_QUADRANT_OK_set", _wrap_Map_SECOND_QUADRANT_OK_set, METH_VARARGS, NULL},
	 { (char *)"Map_THIRD_QUADRANT_OK_get", _wrap_Map_THIRD_QUADRANT_OK_get, METH_VARARGS, NULL},
	 { (char *)"Map_THIRD_QUADRANT_OK_set", _wrap_Map_THIRD_QUADRANT_OK_set, METH_VARARGS, NULL},
	 { (char *)"Map_FOURTH_QUADRANT_OK_get", _wrap_Map_FOURTH_QUADRANT_OK_get, METH_VARARGS, NULL},
	 { (char *)"Map_FOURTH_QUADRANT_OK_set", _wrap_Map_FOURTH_QUADRANT_OK_set, METH_VARARGS, NULL},
	 { (char *)"Map_QuadrantsContainedMC", _wrap_Map_QuadrantsContainedMC, METH_VARARGS, NULL},
	 { (char *)"Map_QuadrantContainedMC", _wrap_Map_QuadrantContainedMC, METH_VARARGS, NULL},
	 { (char *)"Map_Contains", _wrap_Map_Contains, METH_VARARGS, NULL},
	 { (char *)"Map_FindUnmaskedFraction", _wrap_Map_FindUnmaskedFraction, METH_VARARGS, NULL},
	 { (char *)"Map_Write", _wrap_Map_Write, METH_VARARGS, NULL},
	 { (char *)"Map_Read", _wrap_Map_Read, METH_VARARGS, NULL},
	 { (char *)"Map_PixelizeBound", _wrap_Map_PixelizeBound, METH_VARARGS, NULL},
	 { (char *)"Map__FindStartingResolutionLevel", _wrap_Map__FindStartingResolutionLevel, METH_VARARGS, NULL},
	 { (char *)"Map__FindXYBounds", _wrap_Map__FindXYBounds, METH_VARARGS, NULL},
	 { (char *)"Map_ScaleWeight", _wrap_Map_ScaleWeight, METH_VARARGS, NULL},
	 { (char *)"Map_AddConstantWeight", _wrap_Map_AddConstantWeight, METH_VARARGS, NULL},
	 { (char *)"Map_InvertWeight", _wrap_Map_InvertWeight, METH_VARARGS, NULL},
	 { (char *)"Map_IngestMap", _wrap_Map_IngestMap, METH_VARARGS, NULL},
	 { (char *)"Map_IntersectMap", _wrap_Map_IntersectMap, METH_VARARGS, NULL},
	 { (char *)"Map_ExcludeMap", _wrap_Map_ExcludeMap, METH_VARARGS, NULL},
	 { (char *)"Map_AddMap", _wrap_Map_AddMap, METH_VARARGS, NULL},
	 { (char *)"Map_MultiplyMap", _wrap_Map_MultiplyMap, METH_VARARGS, NULL},
	 { (char *)"Map_ImprintMap", _wrap_Map_ImprintMap, METH_VARARGS, NULL},
	 { (char *)"Map_Pixels", _wrap_Map_Pixels, METH_VARARGS, NULL},
	 { (char *)"Map_Begin", _wrap_Map_Begin, METH_VARARGS, NULL},
	 { (char *)"Map_End", _wrap_Map_End, METH_VARARGS, NULL},
	 { (char *)"Map_Iterate", _wrap_Map_Iterate, METH_VARARGS, NULL},
	 { (char *)"Map_Clear", _wrap_Map_Clear, METH_VARARGS, NULL},
	 { (char *)"Map_ContainsSuperpixel", _wrap_Map_ContainsSuperpixel, METH_VARARGS, NULL},
	 { (char *)"Map_Area", _wrap_Map_Area, METH_VARARGS, NULL},
	 { (char *)"Map_MinResolution", _wrap_Map_MinResolution, METH_VARARGS, NULL},
	 { (char *)"Map_MaxResolution", _wrap_Map_MaxResolution, METH_VARARGS, NULL},
	 { (char *)"Map_MinLevel", _wrap_Map_MinLevel, METH_VARARGS, NULL},
	 { (char *)"Map_MaxLevel", _wrap_Map_MaxLevel, METH_VARARGS, NULL},
	 { (char *)"Map_MinWeight", _wrap_Map_MinWeight, METH_VARARGS, NULL},
	 { (char *)"Map_MaxWeight", _wrap_Map_MaxWeight, METH_VARARGS, NULL},
	 { (char *)"Map_Size", _wrap_Map_Size, METH_VARARGS, NULL},
	 { (char *)"Map_Empty", _wrap_Map_Empty, METH_VARARGS, NULL},
	 { (char *)"Map_PixelCount", _wrap_Map_PixelCount, METH_VARARGS, NULL},
	 { (char *)"Map_swigregister", Map_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ScalarMap", _wrap_new_ScalarMap, METH_VARARGS, NULL},
	 { (char *)"delete_ScalarMap", _wrap_delete_ScalarMap, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_SetResolution", _wrap_ScalarMap_SetResolution, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_InitializeFromMap", _wrap_ScalarMap_InitializeFromMap, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_InitializeFromScalarMap", _wrap_ScalarMap_InitializeFromScalarMap, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_InitializeFromScalarPixels", _wrap_ScalarMap_InitializeFromScalarPixels, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_AddToMap", _wrap_ScalarMap_AddToMap, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Coverage", _wrap_ScalarMap_Coverage, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Covering", _wrap_ScalarMap_Covering, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_FindUnmaskedFraction", _wrap_ScalarMap_FindUnmaskedFraction, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_FindUnmaskedStatus", _wrap_ScalarMap_FindUnmaskedStatus, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Resample", _wrap_ScalarMap_Resample, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_FindIntensity", _wrap_ScalarMap_FindIntensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_FindDensity", _wrap_ScalarMap_FindDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_FindPointDensity", _wrap_ScalarMap_FindPointDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_FindLocalArea", _wrap_ScalarMap_FindLocalArea, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_FindLocalIntensity", _wrap_ScalarMap_FindLocalIntensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_FindLocalDensity", _wrap_ScalarMap_FindLocalDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_FindLocalPointDensity", _wrap_ScalarMap_FindLocalPointDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_CalculateMeanIntensity", _wrap_ScalarMap_CalculateMeanIntensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_ConvertToOverDensity", _wrap_ScalarMap_ConvertToOverDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_ConvertFromOverDensity", _wrap_ScalarMap_ConvertFromOverDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_UseLocalMeanIntensity", _wrap_ScalarMap_UseLocalMeanIntensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_UsingLocalMeanIntensity", _wrap_ScalarMap_UsingLocalMeanIntensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_ImprintMap", _wrap_ScalarMap_ImprintMap, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_AutoCorrelate", _wrap_ScalarMap_AutoCorrelate, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_AutoCorrelateWithRegions", _wrap_ScalarMap_AutoCorrelateWithRegions, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_CrossCorrelate", _wrap_ScalarMap_CrossCorrelate, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_CrossCorrelateWithRegions", _wrap_ScalarMap_CrossCorrelateWithRegions, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Variance", _wrap_ScalarMap_Variance, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Covariance", _wrap_ScalarMap_Covariance, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_VarianceWithErrors", _wrap_ScalarMap_VarianceWithErrors, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_CovarianceWithErrors", _wrap_ScalarMap_CovarianceWithErrors, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Resolution", _wrap_ScalarMap_Resolution, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Intensity", _wrap_ScalarMap_Intensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_NPoints", _wrap_ScalarMap_NPoints, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Density", _wrap_ScalarMap_Density, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_PointDensity", _wrap_ScalarMap_PointDensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Begin", _wrap_ScalarMap_Begin, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_End", _wrap_ScalarMap_End, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_MeanIntensity", _wrap_ScalarMap_MeanIntensity, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_IsOverDensityMap", _wrap_ScalarMap_IsOverDensityMap, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_MapType", _wrap_ScalarMap_MapType, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Area", _wrap_ScalarMap_Area, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Size", _wrap_ScalarMap_Size, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_MinResolution", _wrap_ScalarMap_MinResolution, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_MaxResolution", _wrap_ScalarMap_MaxResolution, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_MinLevel", _wrap_ScalarMap_MinLevel, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_MaxLevel", _wrap_ScalarMap_MaxLevel, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Empty", _wrap_ScalarMap_Empty, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_Clear", _wrap_ScalarMap_Clear, METH_VARARGS, NULL},
	 { (char *)"ScalarMap_swigregister", ScalarMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GeometricBound", _wrap_new_GeometricBound, METH_VARARGS, NULL},
	 { (char *)"delete_GeometricBound", _wrap_delete_GeometricBound, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_CheckPoint", _wrap_GeometricBound_CheckPoint, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_FindAngularBounds", _wrap_GeometricBound_FindAngularBounds, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_FindArea", _wrap_GeometricBound_FindArea, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_CheckPixel", _wrap_GeometricBound_CheckPixel, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_ScorePixel", _wrap_GeometricBound_ScorePixel, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_SetArea", _wrap_GeometricBound_SetArea, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_SetAngularBounds", _wrap_GeometricBound_SetAngularBounds, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_SetContinuousBounds", _wrap_GeometricBound_SetContinuousBounds, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_Area", _wrap_GeometricBound_Area, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_LambdaMin", _wrap_GeometricBound_LambdaMin, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_LambdaMax", _wrap_GeometricBound_LambdaMax, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_EtaMin", _wrap_GeometricBound_EtaMin, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_EtaMax", _wrap_GeometricBound_EtaMax, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_ContinuousBounds", _wrap_GeometricBound_ContinuousBounds, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_GenerateRandomPoint", _wrap_GeometricBound_GenerateRandomPoint, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_GenerateRandomPoints", _wrap_GeometricBound_GenerateRandomPoints, METH_VARARGS, NULL},
	 { (char *)"GeometricBound_swigregister", GeometricBound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CircleBound", _wrap_new_CircleBound, METH_VARARGS, NULL},
	 { (char *)"delete_CircleBound", _wrap_delete_CircleBound, METH_VARARGS, NULL},
	 { (char *)"CircleBound_CheckPoint", _wrap_CircleBound_CheckPoint, METH_VARARGS, NULL},
	 { (char *)"CircleBound_FindAngularBounds", _wrap_CircleBound_FindAngularBounds, METH_VARARGS, NULL},
	 { (char *)"CircleBound_FindArea", _wrap_CircleBound_FindArea, METH_VARARGS, NULL},
	 { (char *)"CircleBound_swigregister", CircleBound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AnnulusBound", _wrap_new_AnnulusBound, METH_VARARGS, NULL},
	 { (char *)"delete_AnnulusBound", _wrap_delete_AnnulusBound, METH_VARARGS, NULL},
	 { (char *)"AnnulusBound_CheckPoint", _wrap_AnnulusBound_CheckPoint, METH_VARARGS, NULL},
	 { (char *)"AnnulusBound_FindAngularBounds", _wrap_AnnulusBound_FindAngularBounds, METH_VARARGS, NULL},
	 { (char *)"AnnulusBound_FindArea", _wrap_AnnulusBound_FindArea, METH_VARARGS, NULL},
	 { (char *)"AnnulusBound_swigregister", AnnulusBound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WedgeBound", _wrap_new_WedgeBound, METH_VARARGS, NULL},
	 { (char *)"delete_WedgeBound", _wrap_delete_WedgeBound, METH_VARARGS, NULL},
	 { (char *)"WedgeBound_CheckPoint", _wrap_WedgeBound_CheckPoint, METH_VARARGS, NULL},
	 { (char *)"WedgeBound_FindAngularBounds", _wrap_WedgeBound_FindAngularBounds, METH_VARARGS, NULL},
	 { (char *)"WedgeBound_FindArea", _wrap_WedgeBound_FindArea, METH_VARARGS, NULL},
	 { (char *)"WedgeBound_swigregister", WedgeBound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PolygonBound", _wrap_new_PolygonBound, METH_VARARGS, NULL},
	 { (char *)"delete_PolygonBound", _wrap_delete_PolygonBound, METH_VARARGS, NULL},
	 { (char *)"PolygonBound_CheckPoint", _wrap_PolygonBound_CheckPoint, METH_VARARGS, NULL},
	 { (char *)"PolygonBound_FindAngularBounds", _wrap_PolygonBound_FindAngularBounds, METH_VARARGS, NULL},
	 { (char *)"PolygonBound_FindArea", _wrap_PolygonBound_FindArea, METH_VARARGS, NULL},
	 { (char *)"PolygonBound_swigregister", PolygonBound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LongitudeBound", _wrap_new_LongitudeBound, METH_VARARGS, NULL},
	 { (char *)"delete_LongitudeBound", _wrap_delete_LongitudeBound, METH_VARARGS, NULL},
	 { (char *)"LongitudeBound_CheckPoint", _wrap_LongitudeBound_CheckPoint, METH_VARARGS, NULL},
	 { (char *)"LongitudeBound_FindAngularBounds", _wrap_LongitudeBound_FindAngularBounds, METH_VARARGS, NULL},
	 { (char *)"LongitudeBound_FindArea", _wrap_LongitudeBound_FindArea, METH_VARARGS, NULL},
	 { (char *)"LongitudeBound_LongitudeMin", _wrap_LongitudeBound_LongitudeMin, METH_VARARGS, NULL},
	 { (char *)"LongitudeBound_LongitudeMax", _wrap_LongitudeBound_LongitudeMax, METH_VARARGS, NULL},
	 { (char *)"LongitudeBound_Sphere", _wrap_LongitudeBound_Sphere, METH_VARARGS, NULL},
	 { (char *)"LongitudeBound_swigregister", LongitudeBound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LatitudeBound", _wrap_new_LatitudeBound, METH_VARARGS, NULL},
	 { (char *)"delete_LatitudeBound", _wrap_delete_LatitudeBound, METH_VARARGS, NULL},
	 { (char *)"LatitudeBound_CheckPoint", _wrap_LatitudeBound_CheckPoint, METH_VARARGS, NULL},
	 { (char *)"LatitudeBound_FindAngularBounds", _wrap_LatitudeBound_FindAngularBounds, METH_VARARGS, NULL},
	 { (char *)"LatitudeBound_FindArea", _wrap_LatitudeBound_FindArea, METH_VARARGS, NULL},
	 { (char *)"LatitudeBound_LatitudeMin", _wrap_LatitudeBound_LatitudeMin, METH_VARARGS, NULL},
	 { (char *)"LatitudeBound_LatitudeMax", _wrap_LatitudeBound_LatitudeMax, METH_VARARGS, NULL},
	 { (char *)"LatitudeBound_Sphere", _wrap_LatitudeBound_Sphere, METH_VARARGS, NULL},
	 { (char *)"LatitudeBound_swigregister", LatitudeBound_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LatLonBound", _wrap_new_LatLonBound, METH_VARARGS, NULL},
	 { (char *)"delete_LatLonBound", _wrap_delete_LatLonBound, METH_VARARGS, NULL},
	 { (char *)"LatLonBound_CheckPoint", _wrap_LatLonBound_CheckPoint, METH_VARARGS, NULL},
	 { (char *)"LatLonBound_FindAngularBounds", _wrap_LatLonBound_FindAngularBounds, METH_VARARGS, NULL},
	 { (char *)"LatLonBound_FindArea", _wrap_LatLonBound_FindArea, METH_VARARGS, NULL},
	 { (char *)"LatLonBound_LongitudeMin", _wrap_LatLonBound_LongitudeMin, METH_VARARGS, NULL},
	 { (char *)"LatLonBound_LongitudeMax", _wrap_LatLonBound_LongitudeMax, METH_VARARGS, NULL},
	 { (char *)"LatLonBound_LatitudeMin", _wrap_LatLonBound_LatitudeMin, METH_VARARGS, NULL},
	 { (char *)"LatLonBound_LatitudeMax", _wrap_LatLonBound_LatitudeMax, METH_VARARGS, NULL},
	 { (char *)"LatLonBound_Sphere", _wrap_LatLonBound_Sphere, METH_VARARGS, NULL},
	 { (char *)"LatLonBound_swigregister", LatLonBound_swigregister, METH_VARARGS, NULL},
	 { (char *)"Cosmology_omega_m_get", _wrap_Cosmology_omega_m_get, METH_VARARGS, NULL},
	 { (char *)"Cosmology_omega_m_set", _wrap_Cosmology_omega_m_set, METH_VARARGS, NULL},
	 { (char *)"Cosmology_h_get", _wrap_Cosmology_h_get, METH_VARARGS, NULL},
	 { (char *)"Cosmology_h_set", _wrap_Cosmology_h_set, METH_VARARGS, NULL},
	 { (char *)"Cosmology_a__get", _wrap_Cosmology_a__get, METH_VARARGS, NULL},
	 { (char *)"Cosmology_a__set", _wrap_Cosmology_a__set, METH_VARARGS, NULL},
	 { (char *)"Cosmology_b__get", _wrap_Cosmology_b__get, METH_VARARGS, NULL},
	 { (char *)"Cosmology_b__set", _wrap_Cosmology_b__set, METH_VARARGS, NULL},
	 { (char *)"Cosmology_OmegaM", _wrap_Cosmology_OmegaM, METH_VARARGS, NULL},
	 { (char *)"Cosmology_HubbleConstant", _wrap_Cosmology_HubbleConstant, METH_VARARGS, NULL},
	 { (char *)"Cosmology_HubbleDistance", _wrap_Cosmology_HubbleDistance, METH_VARARGS, NULL},
	 { (char *)"Cosmology_OmegaL", _wrap_Cosmology_OmegaL, METH_VARARGS, NULL},
	 { (char *)"Cosmology_SetOmegaM", _wrap_Cosmology_SetOmegaM, METH_VARARGS, NULL},
	 { (char *)"Cosmology_SetHubbleConstant", _wrap_Cosmology_SetHubbleConstant, METH_VARARGS, NULL},
	 { (char *)"Cosmology_SetOmegaL", _wrap_Cosmology_SetOmegaL, METH_VARARGS, NULL},
	 { (char *)"Cosmology_ComovingDistance", _wrap_Cosmology_ComovingDistance, METH_VARARGS, NULL},
	 { (char *)"Cosmology_AngularDiameterDistance", _wrap_Cosmology_AngularDiameterDistance, METH_VARARGS, NULL},
	 { (char *)"Cosmology_LuminosityDistance", _wrap_Cosmology_LuminosityDistance, METH_VARARGS, NULL},
	 { (char *)"Cosmology_ProjectedDistance", _wrap_Cosmology_ProjectedDistance, METH_VARARGS, NULL},
	 { (char *)"Cosmology_ProjectedAngle", _wrap_Cosmology_ProjectedAngle, METH_VARARGS, NULL},
	 { (char *)"new_Cosmology", _wrap_new_Cosmology, METH_VARARGS, NULL},
	 { (char *)"delete_Cosmology", _wrap_delete_Cosmology, METH_VARARGS, NULL},
	 { (char *)"Cosmology_swigregister", Cosmology_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StompWatch", _wrap_new_StompWatch, METH_VARARGS, NULL},
	 { (char *)"StompWatch_StartTimer", _wrap_StompWatch_StartTimer, METH_VARARGS, NULL},
	 { (char *)"StompWatch_StopTimer", _wrap_StompWatch_StopTimer, METH_VARARGS, NULL},
	 { (char *)"StompWatch_ElapsedTime", _wrap_StompWatch_ElapsedTime, METH_VARARGS, NULL},
	 { (char *)"delete_StompWatch", _wrap_delete_StompWatch, METH_VARARGS, NULL},
	 { (char *)"StompWatch_swigregister", StompWatch_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HistogramBin", _wrap_new_HistogramBin, METH_VARARGS, NULL},
	 { (char *)"delete_HistogramBin", _wrap_delete_HistogramBin, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_SetBounds", _wrap_HistogramBin_SetBounds, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_AddToBin", _wrap_HistogramBin_AddToBin, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_BinMinimum", _wrap_HistogramBin_BinMinimum, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_BinMaximum", _wrap_HistogramBin_BinMaximum, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_BinCenter", _wrap_HistogramBin_BinCenter, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_BinLogCenter", _wrap_HistogramBin_BinLogCenter, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_BinWeightedCenter", _wrap_HistogramBin_BinWeightedCenter, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_BinAveragedCenter", _wrap_HistogramBin_BinAveragedCenter, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_WithinBin", _wrap_HistogramBin_WithinBin, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_BinWeight", _wrap_HistogramBin_BinWeight, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_BinItems", _wrap_HistogramBin_BinItems, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_BinMeanWeight", _wrap_HistogramBin_BinMeanWeight, METH_VARARGS, NULL},
	 { (char *)"HistogramBin_swigregister", HistogramBin_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Histogram", _wrap_new_Histogram, METH_VARARGS, NULL},
	 { (char *)"delete_Histogram", _wrap_delete_Histogram, METH_VARARGS, NULL},
	 { (char *)"Histogram_SetBounds", _wrap_Histogram_SetBounds, METH_VARARGS, NULL},
	 { (char *)"Histogram_SetNBins", _wrap_Histogram_SetNBins, METH_VARARGS, NULL},
	 { (char *)"Histogram_SetLogBinning", _wrap_Histogram_SetLogBinning, METH_VARARGS, NULL},
	 { (char *)"Histogram_AssignBins", _wrap_Histogram_AssignBins, METH_VARARGS, NULL},
	 { (char *)"Histogram_AddToBin", _wrap_Histogram_AddToBin, METH_VARARGS, NULL},
	 { (char *)"Histogram_Begin", _wrap_Histogram_Begin, METH_VARARGS, NULL},
	 { (char *)"Histogram_End", _wrap_Histogram_End, METH_VARARGS, NULL},
	 { (char *)"Histogram_BoundMin", _wrap_Histogram_BoundMin, METH_VARARGS, NULL},
	 { (char *)"Histogram_BoundMax", _wrap_Histogram_BoundMax, METH_VARARGS, NULL},
	 { (char *)"Histogram_NBins", _wrap_Histogram_NBins, METH_VARARGS, NULL},
	 { (char *)"Histogram_LogBinning", _wrap_Histogram_LogBinning, METH_VARARGS, NULL},
	 { (char *)"Histogram_TotalItems", _wrap_Histogram_TotalItems, METH_VARARGS, NULL},
	 { (char *)"Histogram_TotalWeight", _wrap_Histogram_TotalWeight, METH_VARARGS, NULL},
	 { (char *)"Histogram_MeanItemWeight", _wrap_Histogram_MeanItemWeight, METH_VARARGS, NULL},
	 { (char *)"Histogram_MeanBinValue", _wrap_Histogram_MeanBinValue, METH_VARARGS, NULL},
	 { (char *)"Histogram_MeanWeightedBinValue", _wrap_Histogram_MeanWeightedBinValue, METH_VARARGS, NULL},
	 { (char *)"Histogram__begin_Bins", _wrap_Histogram__begin_Bins, METH_VARARGS, NULL},
	 { (char *)"Histogram__deref_Bins", _wrap_Histogram__deref_Bins, METH_VARARGS, NULL},
	 { (char *)"Histogram_swigregister", Histogram_swigregister, METH_VARARGS, NULL},
	 { (char *)"Tokenize", _wrap_Tokenize, METH_VARARGS, NULL},
	 { (char *)"new_AngularCoordinate", _wrap_new_AngularCoordinate, METH_VARARGS, NULL},
	 { (char *)"delete_AngularCoordinate", _wrap_delete_AngularCoordinate, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_SetSurveyCoordinates", _wrap_AngularCoordinate_SetSurveyCoordinates, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_SetEquatorialCoordinates", _wrap_AngularCoordinate_SetEquatorialCoordinates, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_SetGalacticCoordinates", _wrap_AngularCoordinate_SetGalacticCoordinates, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_SetUnitSphereCoordinates", _wrap_AngularCoordinate_SetUnitSphereCoordinates, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_Set", _wrap_AngularCoordinate_Set, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_Lambda", _wrap_AngularCoordinate_Lambda, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_Eta", _wrap_AngularCoordinate_Eta, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_LambdaRadians", _wrap_AngularCoordinate_LambdaRadians, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_EtaRadians", _wrap_AngularCoordinate_EtaRadians, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_RA", _wrap_AngularCoordinate_RA, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_DEC", _wrap_AngularCoordinate_DEC, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_RARadians", _wrap_AngularCoordinate_RARadians, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_DECRadians", _wrap_AngularCoordinate_DECRadians, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_GalLon", _wrap_AngularCoordinate_GalLon, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_GalLat", _wrap_AngularCoordinate_GalLat, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_GalLonRadians", _wrap_AngularCoordinate_GalLonRadians, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_GalLatRadians", _wrap_AngularCoordinate_GalLatRadians, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_UnitSphereX", _wrap_AngularCoordinate_UnitSphereX, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_UnitSphereY", _wrap_AngularCoordinate_UnitSphereY, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_UnitSphereZ", _wrap_AngularCoordinate_UnitSphereZ, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_AngularDistance", _wrap_AngularCoordinate_AngularDistance, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_DotProduct", _wrap_AngularCoordinate_DotProduct, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_CrossProduct", _wrap_AngularCoordinate_CrossProduct, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_GreatCircle", _wrap_AngularCoordinate_GreatCircle, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_PositionAngle", _wrap_AngularCoordinate_PositionAngle, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_CosPositionAngle", _wrap_AngularCoordinate_CosPositionAngle, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_SinPositionAngle", _wrap_AngularCoordinate_SinPositionAngle, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_Rotate", _wrap_AngularCoordinate_Rotate, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_SurveyToGalactic", _wrap_AngularCoordinate_SurveyToGalactic, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_SurveyToEquatorial", _wrap_AngularCoordinate_SurveyToEquatorial, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_EquatorialToSurvey", _wrap_AngularCoordinate_EquatorialToSurvey, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_EquatorialToGalactic", _wrap_AngularCoordinate_EquatorialToGalactic, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_GalacticToSurvey", _wrap_AngularCoordinate_GalacticToSurvey, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_GalacticToEquatorial", _wrap_AngularCoordinate_GalacticToEquatorial, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_SurveyToXYZ", _wrap_AngularCoordinate_SurveyToXYZ, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_EquatorialToXYZ", _wrap_AngularCoordinate_EquatorialToXYZ, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_GalacticToXYZ", _wrap_AngularCoordinate_GalacticToXYZ, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_EtaMultiplier", _wrap_AngularCoordinate_EtaMultiplier, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_RAMultiplier", _wrap_AngularCoordinate_RAMultiplier, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_GalLonMultiplier", _wrap_AngularCoordinate_GalLonMultiplier, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_ToAngularVector", _wrap_AngularCoordinate_ToAngularVector, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_FromAngularVector", _wrap_AngularCoordinate_FromAngularVector, METH_VARARGS, NULL},
	 { (char *)"AngularCoordinate_swigregister", AngularCoordinate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_WeightedAngularCoordinate", _wrap_new_WeightedAngularCoordinate, METH_VARARGS, NULL},
	 { (char *)"delete_WeightedAngularCoordinate", _wrap_delete_WeightedAngularCoordinate, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_SetWeight", _wrap_WeightedAngularCoordinate_SetWeight, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_Weight", _wrap_WeightedAngularCoordinate_Weight, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_SetField", _wrap_WeightedAngularCoordinate_SetField, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_Field", _wrap_WeightedAngularCoordinate_Field, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_NFields", _wrap_WeightedAngularCoordinate_NFields, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_HasFields", _wrap_WeightedAngularCoordinate_HasFields, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_FieldNames", _wrap_WeightedAngularCoordinate_FieldNames, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_CopyFields", _wrap_WeightedAngularCoordinate_CopyFields, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_CopyFieldToWeight", _wrap_WeightedAngularCoordinate_CopyFieldToWeight, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_RestoreOriginalWeight", _wrap_WeightedAngularCoordinate_RestoreOriginalWeight, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_ToWAngularVector", _wrap_WeightedAngularCoordinate_ToWAngularVector, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_FromWAngularVector", _wrap_WeightedAngularCoordinate_FromWAngularVector, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_AddField", _wrap_WeightedAngularCoordinate_AddField, METH_VARARGS, NULL},
	 { (char *)"WeightedAngularCoordinate_swigregister", WeightedAngularCoordinate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CosmoCoordinate", _wrap_new_CosmoCoordinate, METH_VARARGS, NULL},
	 { (char *)"delete_CosmoCoordinate", _wrap_delete_CosmoCoordinate, METH_VARARGS, NULL},
	 { (char *)"CosmoCoordinate_ProjectedRadius", _wrap_CosmoCoordinate_ProjectedRadius, METH_VARARGS, NULL},
	 { (char *)"CosmoCoordinate_DotProduct", _wrap_CosmoCoordinate_DotProduct, METH_VARARGS, NULL},
	 { (char *)"CosmoCoordinate_ComovingDistance", _wrap_CosmoCoordinate_ComovingDistance, METH_VARARGS, NULL},
	 { (char *)"CosmoCoordinate_AngularDiameterDistance", _wrap_CosmoCoordinate_AngularDiameterDistance, METH_VARARGS, NULL},
	 { (char *)"CosmoCoordinate_LuminosityDistance", _wrap_CosmoCoordinate_LuminosityDistance, METH_VARARGS, NULL},
	 { (char *)"CosmoCoordinate_Redshift", _wrap_CosmoCoordinate_Redshift, METH_VARARGS, NULL},
	 { (char *)"CosmoCoordinate_SetRedshift", _wrap_CosmoCoordinate_SetRedshift, METH_VARARGS, NULL},
	 { (char *)"CosmoCoordinate_ToCosmoVector", _wrap_CosmoCoordinate_ToCosmoVector, METH_VARARGS, NULL},
	 { (char *)"CosmoCoordinate_FromCosmoVector", _wrap_CosmoCoordinate_FromCosmoVector, METH_VARARGS, NULL},
	 { (char *)"CosmoCoordinate_swigregister", CosmoCoordinate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IndexedAngularCoordinate", _wrap_new_IndexedAngularCoordinate, METH_VARARGS, NULL},
	 { (char *)"delete_IndexedAngularCoordinate", _wrap_delete_IndexedAngularCoordinate, METH_VARARGS, NULL},
	 { (char *)"IndexedAngularCoordinate_SetIndex", _wrap_IndexedAngularCoordinate_SetIndex, METH_VARARGS, NULL},
	 { (char *)"IndexedAngularCoordinate_Index", _wrap_IndexedAngularCoordinate_Index, METH_VARARGS, NULL},
	 { (char *)"IndexedAngularCoordinate_ToIAngularVector", _wrap_IndexedAngularCoordinate_ToIAngularVector, METH_VARARGS, NULL},
	 { (char *)"IndexedAngularCoordinate_FromIAngularVector", _wrap_IndexedAngularCoordinate_FromIAngularVector, METH_VARARGS, NULL},
	 { (char *)"IndexedAngularCoordinate_swigregister", IndexedAngularCoordinate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreePixel", _wrap_new_TreePixel, METH_VARARGS, NULL},
	 { (char *)"delete_TreePixel", _wrap_delete_TreePixel, METH_VARARGS, NULL},
	 { (char *)"TreePixel__InitializeSubPixels", _wrap_TreePixel__InitializeSubPixels, METH_VARARGS, NULL},
	 { (char *)"TreePixel_DirectPairCount", _wrap_TreePixel_DirectPairCount, METH_VARARGS, NULL},
	 { (char *)"TreePixel_FindPairs", _wrap_TreePixel_FindPairs, METH_VARARGS, NULL},
	 { (char *)"TreePixel_DirectWeightedPairs", _wrap_TreePixel_DirectWeightedPairs, METH_VARARGS, NULL},
	 { (char *)"TreePixel_FindWeightedPairs", _wrap_TreePixel_FindWeightedPairs, METH_VARARGS, NULL},
	 { (char *)"TreePixel_FindKNearestNeighbors", _wrap_TreePixel_FindKNearestNeighbors, METH_VARARGS, NULL},
	 { (char *)"TreePixel_FindNearestNeighbor", _wrap_TreePixel_FindNearestNeighbor, METH_VARARGS, NULL},
	 { (char *)"TreePixel_KNearestNeighborDistance", _wrap_TreePixel_KNearestNeighborDistance, METH_VARARGS, NULL},
	 { (char *)"TreePixel_NearestNeighborDistance", _wrap_TreePixel_NearestNeighborDistance, METH_VARARGS, NULL},
	 { (char *)"TreePixel_ClosestMatch", _wrap_TreePixel_ClosestMatch, METH_VARARGS, NULL},
	 { (char *)"TreePixel_InitializeCorners", _wrap_TreePixel_InitializeCorners, METH_VARARGS, NULL},
	 { (char *)"TreePixel_AddPoint", _wrap_TreePixel_AddPoint, METH_VARARGS, NULL},
	 { (char *)"TreePixel_NPoints", _wrap_TreePixel_NPoints, METH_VARARGS, NULL},
	 { (char *)"TreePixel_PixelWeight", _wrap_TreePixel_PixelWeight, METH_VARARGS, NULL},
	 { (char *)"TreePixel_Coverage", _wrap_TreePixel_Coverage, METH_VARARGS, NULL},
	 { (char *)"TreePixel_Points", _wrap_TreePixel_Points, METH_VARARGS, NULL},
	 { (char *)"TreePixel_Nodes", _wrap_TreePixel_Nodes, METH_VARARGS, NULL},
	 { (char *)"TreePixel_AddToWeight", _wrap_TreePixel_AddToWeight, METH_VARARGS, NULL},
	 { (char *)"TreePixel_FieldTotal", _wrap_TreePixel_FieldTotal, METH_VARARGS, NULL},
	 { (char *)"TreePixel_AddToField", _wrap_TreePixel_AddToField, METH_VARARGS, NULL},
	 { (char *)"TreePixel_NField", _wrap_TreePixel_NField, METH_VARARGS, NULL},
	 { (char *)"TreePixel_HasFields", _wrap_TreePixel_HasFields, METH_VARARGS, NULL},
	 { (char *)"TreePixel_FieldNames", _wrap_TreePixel_FieldNames, METH_VARARGS, NULL},
	 { (char *)"TreePixel_SetPixelCapacity", _wrap_TreePixel_SetPixelCapacity, METH_VARARGS, NULL},
	 { (char *)"TreePixel_PixelCapacity", _wrap_TreePixel_PixelCapacity, METH_VARARGS, NULL},
	 { (char *)"TreePixel_HasPoints", _wrap_TreePixel_HasPoints, METH_VARARGS, NULL},
	 { (char *)"TreePixel_HasNodes", _wrap_TreePixel_HasNodes, METH_VARARGS, NULL},
	 { (char *)"TreePixel_Clear", _wrap_TreePixel_Clear, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereX", _wrap_TreePixel_UnitSphereX, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereY", _wrap_TreePixel_UnitSphereY, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereZ", _wrap_TreePixel_UnitSphereZ, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereX_UL", _wrap_TreePixel_UnitSphereX_UL, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereY_UL", _wrap_TreePixel_UnitSphereY_UL, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereZ_UL", _wrap_TreePixel_UnitSphereZ_UL, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereX_UR", _wrap_TreePixel_UnitSphereX_UR, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereY_UR", _wrap_TreePixel_UnitSphereY_UR, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereZ_UR", _wrap_TreePixel_UnitSphereZ_UR, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereX_LL", _wrap_TreePixel_UnitSphereX_LL, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereY_LL", _wrap_TreePixel_UnitSphereY_LL, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereZ_LL", _wrap_TreePixel_UnitSphereZ_LL, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereX_LR", _wrap_TreePixel_UnitSphereX_LR, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereY_LR", _wrap_TreePixel_UnitSphereY_LR, METH_VARARGS, NULL},
	 { (char *)"TreePixel_UnitSphereZ_LR", _wrap_TreePixel_UnitSphereZ_LR, METH_VARARGS, NULL},
	 { (char *)"TreePixel_WithinAnnulus", _wrap_TreePixel_WithinAnnulus, METH_VARARGS, NULL},
	 { (char *)"TreePixel_swigregister", TreePixel_swigregister, METH_VARARGS, NULL},
	 { (char *)"NearestNeighborPixel___call__", _wrap_NearestNeighborPixel___call__, METH_VARARGS, NULL},
	 { (char *)"new_NearestNeighborPixel", _wrap_new_NearestNeighborPixel, METH_VARARGS, NULL},
	 { (char *)"delete_NearestNeighborPixel", _wrap_delete_NearestNeighborPixel, METH_VARARGS, NULL},
	 { (char *)"NearestNeighborPixel_swigregister", NearestNeighborPixel_swigregister, METH_VARARGS, NULL},
	 { (char *)"NearestNeighborPoint___call__", _wrap_NearestNeighborPoint___call__, METH_VARARGS, NULL},
	 { (char *)"new_NearestNeighborPoint", _wrap_new_NearestNeighborPoint, METH_VARARGS, NULL},
	 { (char *)"delete_NearestNeighborPoint", _wrap_delete_NearestNeighborPoint, METH_VARARGS, NULL},
	 { (char *)"NearestNeighborPoint_swigregister", NearestNeighborPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreeNeighbor", _wrap_new_TreeNeighbor, METH_VARARGS, NULL},
	 { (char *)"delete_TreeNeighbor", _wrap_delete_TreeNeighbor, METH_VARARGS, NULL},
	 { (char *)"TreeNeighbor_NearestNeighbors", _wrap_TreeNeighbor_NearestNeighbors, METH_VARARGS, NULL},
	 { (char *)"TreeNeighbor_Neighbors", _wrap_TreeNeighbor_Neighbors, METH_VARARGS, NULL},
	 { (char *)"TreeNeighbor_MaxNeighbors", _wrap_TreeNeighbor_MaxNeighbors, METH_VARARGS, NULL},
	 { (char *)"TreeNeighbor_TestPoint", _wrap_TreeNeighbor_TestPoint, METH_VARARGS, NULL},
	 { (char *)"TreeNeighbor_MaxDistance", _wrap_TreeNeighbor_MaxDistance, METH_VARARGS, NULL},
	 { (char *)"TreeNeighbor_MaxAngularDistance", _wrap_TreeNeighbor_MaxAngularDistance, METH_VARARGS, NULL},
	 { (char *)"TreeNeighbor_NodesVisited", _wrap_TreeNeighbor_NodesVisited, METH_VARARGS, NULL},
	 { (char *)"TreeNeighbor_AddNode", _wrap_TreeNeighbor_AddNode, METH_VARARGS, NULL},
	 { (char *)"TreeNeighbor_swigregister", TreeNeighbor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IndexedTreePixel", _wrap_new_IndexedTreePixel, METH_VARARGS, NULL},
	 { (char *)"delete_IndexedTreePixel", _wrap_delete_IndexedTreePixel, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_FindPairs", _wrap_IndexedTreePixel_FindPairs, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_FindKNearestNeighbors", _wrap_IndexedTreePixel_FindKNearestNeighbors, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_FindNearestNeighbor", _wrap_IndexedTreePixel_FindNearestNeighbor, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_KNearestNeighborDistance", _wrap_IndexedTreePixel_KNearestNeighborDistance, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_NearestNeighborDistance", _wrap_IndexedTreePixel_NearestNeighborDistance, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_ClosestMatch", _wrap_IndexedTreePixel_ClosestMatch, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_InitializeCorners", _wrap_IndexedTreePixel_InitializeCorners, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_AddPoint", _wrap_IndexedTreePixel_AddPoint, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_NPoints", _wrap_IndexedTreePixel_NPoints, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_Indices", _wrap_IndexedTreePixel_Indices, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_Coverage", _wrap_IndexedTreePixel_Coverage, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_Points", _wrap_IndexedTreePixel_Points, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_Nodes", _wrap_IndexedTreePixel_Nodes, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_SetPixelCapacity", _wrap_IndexedTreePixel_SetPixelCapacity, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_PixelCapacity", _wrap_IndexedTreePixel_PixelCapacity, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_HasPoints", _wrap_IndexedTreePixel_HasPoints, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_HasNodes", _wrap_IndexedTreePixel_HasNodes, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_Clear", _wrap_IndexedTreePixel_Clear, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereX", _wrap_IndexedTreePixel_UnitSphereX, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereY", _wrap_IndexedTreePixel_UnitSphereY, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereZ", _wrap_IndexedTreePixel_UnitSphereZ, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereX_UL", _wrap_IndexedTreePixel_UnitSphereX_UL, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereY_UL", _wrap_IndexedTreePixel_UnitSphereY_UL, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereZ_UL", _wrap_IndexedTreePixel_UnitSphereZ_UL, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereX_UR", _wrap_IndexedTreePixel_UnitSphereX_UR, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereY_UR", _wrap_IndexedTreePixel_UnitSphereY_UR, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereZ_UR", _wrap_IndexedTreePixel_UnitSphereZ_UR, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereX_LL", _wrap_IndexedTreePixel_UnitSphereX_LL, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereY_LL", _wrap_IndexedTreePixel_UnitSphereY_LL, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereZ_LL", _wrap_IndexedTreePixel_UnitSphereZ_LL, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereX_LR", _wrap_IndexedTreePixel_UnitSphereX_LR, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereY_LR", _wrap_IndexedTreePixel_UnitSphereY_LR, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_UnitSphereZ_LR", _wrap_IndexedTreePixel_UnitSphereZ_LR, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_WithinAnnulus", _wrap_IndexedTreePixel_WithinAnnulus, METH_VARARGS, NULL},
	 { (char *)"IndexedTreePixel_swigregister", IndexedTreePixel_swigregister, METH_VARARGS, NULL},
	 { (char *)"NearestNeighborIndexedPixel___call__", _wrap_NearestNeighborIndexedPixel___call__, METH_VARARGS, NULL},
	 { (char *)"new_NearestNeighborIndexedPixel", _wrap_new_NearestNeighborIndexedPixel, METH_VARARGS, NULL},
	 { (char *)"delete_NearestNeighborIndexedPixel", _wrap_delete_NearestNeighborIndexedPixel, METH_VARARGS, NULL},
	 { (char *)"NearestNeighborIndexedPixel_swigregister", NearestNeighborIndexedPixel_swigregister, METH_VARARGS, NULL},
	 { (char *)"NearestNeighborIndexedPoint___call__", _wrap_NearestNeighborIndexedPoint___call__, METH_VARARGS, NULL},
	 { (char *)"new_NearestNeighborIndexedPoint", _wrap_new_NearestNeighborIndexedPoint, METH_VARARGS, NULL},
	 { (char *)"delete_NearestNeighborIndexedPoint", _wrap_delete_NearestNeighborIndexedPoint, METH_VARARGS, NULL},
	 { (char *)"NearestNeighborIndexedPoint_swigregister", NearestNeighborIndexedPoint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IndexedTreeNeighbor", _wrap_new_IndexedTreeNeighbor, METH_VARARGS, NULL},
	 { (char *)"delete_IndexedTreeNeighbor", _wrap_delete_IndexedTreeNeighbor, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeNeighbor_NearestNeighbors", _wrap_IndexedTreeNeighbor_NearestNeighbors, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeNeighbor_Neighbors", _wrap_IndexedTreeNeighbor_Neighbors, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeNeighbor_MaxNeighbors", _wrap_IndexedTreeNeighbor_MaxNeighbors, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeNeighbor_TestPoint", _wrap_IndexedTreeNeighbor_TestPoint, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeNeighbor_MaxDistance", _wrap_IndexedTreeNeighbor_MaxDistance, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeNeighbor_MaxAngularDistance", _wrap_IndexedTreeNeighbor_MaxAngularDistance, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeNeighbor_NodesVisited", _wrap_IndexedTreeNeighbor_NodesVisited, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeNeighbor_AddNode", _wrap_IndexedTreeNeighbor_AddNode, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeNeighbor_swigregister", IndexedTreeNeighbor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TreeMap", _wrap_new_TreeMap, METH_VARARGS, NULL},
	 { (char *)"delete_TreeMap", _wrap_delete_TreeMap, METH_VARARGS, NULL},
	 { (char *)"TreeMap_FindPairs", _wrap_TreeMap_FindPairs, METH_VARARGS, NULL},
	 { (char *)"TreeMap_FindWeightedPairs", _wrap_TreeMap_FindWeightedPairs, METH_VARARGS, NULL},
	 { (char *)"TreeMap_FindPairsWithRegions", _wrap_TreeMap_FindPairsWithRegions, METH_VARARGS, NULL},
	 { (char *)"TreeMap_FindWeightedPairsWithRegions", _wrap_TreeMap_FindWeightedPairsWithRegions, METH_VARARGS, NULL},
	 { (char *)"TreeMap_FindKNearestNeighbors", _wrap_TreeMap_FindKNearestNeighbors, METH_VARARGS, NULL},
	 { (char *)"TreeMap_FindNearestNeighbor", _wrap_TreeMap_FindNearestNeighbor, METH_VARARGS, NULL},
	 { (char *)"TreeMap_KNearestNeighborDistance", _wrap_TreeMap_KNearestNeighborDistance, METH_VARARGS, NULL},
	 { (char *)"TreeMap_NearestNeighborDistance", _wrap_TreeMap_NearestNeighborDistance, METH_VARARGS, NULL},
	 { (char *)"TreeMap_ClosestMatch", _wrap_TreeMap_ClosestMatch, METH_VARARGS, NULL},
	 { (char *)"TreeMap_AddPoint", _wrap_TreeMap_AddPoint, METH_VARARGS, NULL},
	 { (char *)"TreeMap_Read", _wrap_TreeMap_Read, METH_VARARGS, NULL},
	 { (char *)"TreeMap_Coverage", _wrap_TreeMap_Coverage, METH_VARARGS, NULL},
	 { (char *)"TreeMap_Covering", _wrap_TreeMap_Covering, METH_VARARGS, NULL},
	 { (char *)"TreeMap_FindUnmaskedFraction", _wrap_TreeMap_FindUnmaskedFraction, METH_VARARGS, NULL},
	 { (char *)"TreeMap_FindUnmaskedStatus", _wrap_TreeMap_FindUnmaskedStatus, METH_VARARGS, NULL},
	 { (char *)"TreeMap_NodeMap", _wrap_TreeMap_NodeMap, METH_VARARGS, NULL},
	 { (char *)"TreeMap_Resolution", _wrap_TreeMap_Resolution, METH_VARARGS, NULL},
	 { (char *)"TreeMap_PixelCapacity", _wrap_TreeMap_PixelCapacity, METH_VARARGS, NULL},
	 { (char *)"TreeMap_SetResolution", _wrap_TreeMap_SetResolution, METH_VARARGS, NULL},
	 { (char *)"TreeMap_SetPixelCapacity", _wrap_TreeMap_SetPixelCapacity, METH_VARARGS, NULL},
	 { (char *)"TreeMap_NPoints", _wrap_TreeMap_NPoints, METH_VARARGS, NULL},
	 { (char *)"TreeMap_Points", _wrap_TreeMap_Points, METH_VARARGS, NULL},
	 { (char *)"TreeMap_Weight", _wrap_TreeMap_Weight, METH_VARARGS, NULL},
	 { (char *)"TreeMap_FieldTotal", _wrap_TreeMap_FieldTotal, METH_VARARGS, NULL},
	 { (char *)"TreeMap_NField", _wrap_TreeMap_NField, METH_VARARGS, NULL},
	 { (char *)"TreeMap_HasFields", _wrap_TreeMap_HasFields, METH_VARARGS, NULL},
	 { (char *)"TreeMap_FieldNames", _wrap_TreeMap_FieldNames, METH_VARARGS, NULL},
	 { (char *)"TreeMap_BaseNodes", _wrap_TreeMap_BaseNodes, METH_VARARGS, NULL},
	 { (char *)"TreeMap_Nodes", _wrap_TreeMap_Nodes, METH_VARARGS, NULL},
	 { (char *)"TreeMap_Size", _wrap_TreeMap_Size, METH_VARARGS, NULL},
	 { (char *)"TreeMap_Area", _wrap_TreeMap_Area, METH_VARARGS, NULL},
	 { (char *)"TreeMap_CalculateArea", _wrap_TreeMap_CalculateArea, METH_VARARGS, NULL},
	 { (char *)"TreeMap_MinResolution", _wrap_TreeMap_MinResolution, METH_VARARGS, NULL},
	 { (char *)"TreeMap_MaxResolution", _wrap_TreeMap_MaxResolution, METH_VARARGS, NULL},
	 { (char *)"TreeMap_MinLevel", _wrap_TreeMap_MinLevel, METH_VARARGS, NULL},
	 { (char *)"TreeMap_MaxLevel", _wrap_TreeMap_MaxLevel, METH_VARARGS, NULL},
	 { (char *)"TreeMap_Empty", _wrap_TreeMap_Empty, METH_VARARGS, NULL},
	 { (char *)"TreeMap_Clear", _wrap_TreeMap_Clear, METH_VARARGS, NULL},
	 { (char *)"TreeMap_swigregister", TreeMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IndexedTreeMap", _wrap_new_IndexedTreeMap, METH_VARARGS, NULL},
	 { (char *)"delete_IndexedTreeMap", _wrap_delete_IndexedTreeMap, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_FindPairs", _wrap_IndexedTreeMap_FindPairs, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_FindKNearestNeighbors", _wrap_IndexedTreeMap_FindKNearestNeighbors, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_FindNearestNeighbor", _wrap_IndexedTreeMap_FindNearestNeighbor, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_KNearestNeighborDistance", _wrap_IndexedTreeMap_KNearestNeighborDistance, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_NearestNeighborDistance", _wrap_IndexedTreeMap_NearestNeighborDistance, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_ClosestMatch", _wrap_IndexedTreeMap_ClosestMatch, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_AddPoint", _wrap_IndexedTreeMap_AddPoint, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_Read", _wrap_IndexedTreeMap_Read, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_Coverage", _wrap_IndexedTreeMap_Coverage, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_Covering", _wrap_IndexedTreeMap_Covering, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_FindUnmaskedFraction", _wrap_IndexedTreeMap_FindUnmaskedFraction, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_FindUnmaskedStatus", _wrap_IndexedTreeMap_FindUnmaskedStatus, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_NodeMap", _wrap_IndexedTreeMap_NodeMap, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_Resolution", _wrap_IndexedTreeMap_Resolution, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_PixelCapacity", _wrap_IndexedTreeMap_PixelCapacity, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_SetResolution", _wrap_IndexedTreeMap_SetResolution, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_SetPixelCapacity", _wrap_IndexedTreeMap_SetPixelCapacity, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_NPoints", _wrap_IndexedTreeMap_NPoints, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_Points", _wrap_IndexedTreeMap_Points, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_Indices", _wrap_IndexedTreeMap_Indices, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_BaseNodes", _wrap_IndexedTreeMap_BaseNodes, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_Nodes", _wrap_IndexedTreeMap_Nodes, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_Size", _wrap_IndexedTreeMap_Size, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_Area", _wrap_IndexedTreeMap_Area, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_CalculateArea", _wrap_IndexedTreeMap_CalculateArea, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_MinResolution", _wrap_IndexedTreeMap_MinResolution, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_MaxResolution", _wrap_IndexedTreeMap_MaxResolution, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_MinLevel", _wrap_IndexedTreeMap_MinLevel, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_MaxLevel", _wrap_IndexedTreeMap_MaxLevel, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_Empty", _wrap_IndexedTreeMap_Empty, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_Clear", _wrap_IndexedTreeMap_Clear, METH_VARARGS, NULL},
	 { (char *)"IndexedTreeMap_swigregister", IndexedTreeMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"AngularVector_iterator", _wrap_AngularVector_iterator, METH_VARARGS, NULL},
	 { (char *)"AngularVector___nonzero__", _wrap_AngularVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"AngularVector___len__", _wrap_AngularVector___len__, METH_VARARGS, NULL},
	 { (char *)"AngularVector_pop", _wrap_AngularVector_pop, METH_VARARGS, NULL},
	 { (char *)"AngularVector___getslice__", _wrap_AngularVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"AngularVector___setslice__", _wrap_AngularVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"AngularVector___delslice__", _wrap_AngularVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"AngularVector___delitem__", _wrap_AngularVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"AngularVector___getitem__", _wrap_AngularVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"AngularVector___setitem__", _wrap_AngularVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"AngularVector_append", _wrap_AngularVector_append, METH_VARARGS, NULL},
	 { (char *)"AngularVector_empty", _wrap_AngularVector_empty, METH_VARARGS, NULL},
	 { (char *)"AngularVector_size", _wrap_AngularVector_size, METH_VARARGS, NULL},
	 { (char *)"AngularVector_clear", _wrap_AngularVector_clear, METH_VARARGS, NULL},
	 { (char *)"AngularVector_swap", _wrap_AngularVector_swap, METH_VARARGS, NULL},
	 { (char *)"AngularVector_get_allocator", _wrap_AngularVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"AngularVector_begin", _wrap_AngularVector_begin, METH_VARARGS, NULL},
	 { (char *)"AngularVector_end", _wrap_AngularVector_end, METH_VARARGS, NULL},
	 { (char *)"AngularVector_rbegin", _wrap_AngularVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"AngularVector_rend", _wrap_AngularVector_rend, METH_VARARGS, NULL},
	 { (char *)"AngularVector_pop_back", _wrap_AngularVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"AngularVector_erase", _wrap_AngularVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_AngularVector", _wrap_new_AngularVector, METH_VARARGS, NULL},
	 { (char *)"AngularVector_push_back", _wrap_AngularVector_push_back, METH_VARARGS, NULL},
	 { (char *)"AngularVector_front", _wrap_AngularVector_front, METH_VARARGS, NULL},
	 { (char *)"AngularVector_back", _wrap_AngularVector_back, METH_VARARGS, NULL},
	 { (char *)"AngularVector_assign", _wrap_AngularVector_assign, METH_VARARGS, NULL},
	 { (char *)"AngularVector_resize", _wrap_AngularVector_resize, METH_VARARGS, NULL},
	 { (char *)"AngularVector_insert", _wrap_AngularVector_insert, METH_VARARGS, NULL},
	 { (char *)"AngularVector_reserve", _wrap_AngularVector_reserve, METH_VARARGS, NULL},
	 { (char *)"AngularVector_capacity", _wrap_AngularVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_AngularVector", _wrap_delete_AngularVector, METH_VARARGS, NULL},
	 { (char *)"AngularVector_swigregister", AngularVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_iterator", _wrap_ThetaVector_iterator, METH_VARARGS, NULL},
	 { (char *)"ThetaVector___nonzero__", _wrap_ThetaVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ThetaVector___len__", _wrap_ThetaVector___len__, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_pop", _wrap_ThetaVector_pop, METH_VARARGS, NULL},
	 { (char *)"ThetaVector___getslice__", _wrap_ThetaVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"ThetaVector___setslice__", _wrap_ThetaVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"ThetaVector___delslice__", _wrap_ThetaVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"ThetaVector___delitem__", _wrap_ThetaVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"ThetaVector___getitem__", _wrap_ThetaVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"ThetaVector___setitem__", _wrap_ThetaVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_append", _wrap_ThetaVector_append, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_empty", _wrap_ThetaVector_empty, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_size", _wrap_ThetaVector_size, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_clear", _wrap_ThetaVector_clear, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_swap", _wrap_ThetaVector_swap, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_get_allocator", _wrap_ThetaVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_begin", _wrap_ThetaVector_begin, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_end", _wrap_ThetaVector_end, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_rbegin", _wrap_ThetaVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_rend", _wrap_ThetaVector_rend, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_pop_back", _wrap_ThetaVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_erase", _wrap_ThetaVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_ThetaVector", _wrap_new_ThetaVector, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_push_back", _wrap_ThetaVector_push_back, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_front", _wrap_ThetaVector_front, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_back", _wrap_ThetaVector_back, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_assign", _wrap_ThetaVector_assign, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_resize", _wrap_ThetaVector_resize, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_insert", _wrap_ThetaVector_insert, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_reserve", _wrap_ThetaVector_reserve, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_capacity", _wrap_ThetaVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_ThetaVector", _wrap_delete_ThetaVector, METH_VARARGS, NULL},
	 { (char *)"ThetaVector_swigregister", ThetaVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"RadialVector_iterator", _wrap_RadialVector_iterator, METH_VARARGS, NULL},
	 { (char *)"RadialVector___nonzero__", _wrap_RadialVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"RadialVector___len__", _wrap_RadialVector___len__, METH_VARARGS, NULL},
	 { (char *)"RadialVector_pop", _wrap_RadialVector_pop, METH_VARARGS, NULL},
	 { (char *)"RadialVector___getslice__", _wrap_RadialVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"RadialVector___setslice__", _wrap_RadialVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"RadialVector___delslice__", _wrap_RadialVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"RadialVector___delitem__", _wrap_RadialVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"RadialVector___getitem__", _wrap_RadialVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"RadialVector___setitem__", _wrap_RadialVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"RadialVector_append", _wrap_RadialVector_append, METH_VARARGS, NULL},
	 { (char *)"RadialVector_empty", _wrap_RadialVector_empty, METH_VARARGS, NULL},
	 { (char *)"RadialVector_size", _wrap_RadialVector_size, METH_VARARGS, NULL},
	 { (char *)"RadialVector_clear", _wrap_RadialVector_clear, METH_VARARGS, NULL},
	 { (char *)"RadialVector_swap", _wrap_RadialVector_swap, METH_VARARGS, NULL},
	 { (char *)"RadialVector_get_allocator", _wrap_RadialVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"RadialVector_begin", _wrap_RadialVector_begin, METH_VARARGS, NULL},
	 { (char *)"RadialVector_end", _wrap_RadialVector_end, METH_VARARGS, NULL},
	 { (char *)"RadialVector_rbegin", _wrap_RadialVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"RadialVector_rend", _wrap_RadialVector_rend, METH_VARARGS, NULL},
	 { (char *)"RadialVector_pop_back", _wrap_RadialVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"RadialVector_erase", _wrap_RadialVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_RadialVector", _wrap_new_RadialVector, METH_VARARGS, NULL},
	 { (char *)"RadialVector_push_back", _wrap_RadialVector_push_back, METH_VARARGS, NULL},
	 { (char *)"RadialVector_front", _wrap_RadialVector_front, METH_VARARGS, NULL},
	 { (char *)"RadialVector_back", _wrap_RadialVector_back, METH_VARARGS, NULL},
	 { (char *)"RadialVector_assign", _wrap_RadialVector_assign, METH_VARARGS, NULL},
	 { (char *)"RadialVector_resize", _wrap_RadialVector_resize, METH_VARARGS, NULL},
	 { (char *)"RadialVector_insert", _wrap_RadialVector_insert, METH_VARARGS, NULL},
	 { (char *)"RadialVector_reserve", _wrap_RadialVector_reserve, METH_VARARGS, NULL},
	 { (char *)"RadialVector_capacity", _wrap_RadialVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_RadialVector", _wrap_delete_RadialVector, METH_VARARGS, NULL},
	 { (char *)"RadialVector_swigregister", RadialVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_iterator", _wrap_WAngularVector_iterator, METH_VARARGS, NULL},
	 { (char *)"WAngularVector___nonzero__", _wrap_WAngularVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"WAngularVector___len__", _wrap_WAngularVector___len__, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_pop", _wrap_WAngularVector_pop, METH_VARARGS, NULL},
	 { (char *)"WAngularVector___getslice__", _wrap_WAngularVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"WAngularVector___setslice__", _wrap_WAngularVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"WAngularVector___delslice__", _wrap_WAngularVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"WAngularVector___delitem__", _wrap_WAngularVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"WAngularVector___getitem__", _wrap_WAngularVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"WAngularVector___setitem__", _wrap_WAngularVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_append", _wrap_WAngularVector_append, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_empty", _wrap_WAngularVector_empty, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_size", _wrap_WAngularVector_size, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_clear", _wrap_WAngularVector_clear, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_swap", _wrap_WAngularVector_swap, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_get_allocator", _wrap_WAngularVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_begin", _wrap_WAngularVector_begin, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_end", _wrap_WAngularVector_end, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_rbegin", _wrap_WAngularVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_rend", _wrap_WAngularVector_rend, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_pop_back", _wrap_WAngularVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_erase", _wrap_WAngularVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_WAngularVector", _wrap_new_WAngularVector, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_push_back", _wrap_WAngularVector_push_back, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_front", _wrap_WAngularVector_front, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_back", _wrap_WAngularVector_back, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_assign", _wrap_WAngularVector_assign, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_resize", _wrap_WAngularVector_resize, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_insert", _wrap_WAngularVector_insert, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_reserve", _wrap_WAngularVector_reserve, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_capacity", _wrap_WAngularVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_WAngularVector", _wrap_delete_WAngularVector, METH_VARARGS, NULL},
	 { (char *)"WAngularVector_swigregister", WAngularVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_iterator", _wrap_CosmoVector_iterator, METH_VARARGS, NULL},
	 { (char *)"CosmoVector___nonzero__", _wrap_CosmoVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"CosmoVector___len__", _wrap_CosmoVector___len__, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_pop", _wrap_CosmoVector_pop, METH_VARARGS, NULL},
	 { (char *)"CosmoVector___getslice__", _wrap_CosmoVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"CosmoVector___setslice__", _wrap_CosmoVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"CosmoVector___delslice__", _wrap_CosmoVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"CosmoVector___delitem__", _wrap_CosmoVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"CosmoVector___getitem__", _wrap_CosmoVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"CosmoVector___setitem__", _wrap_CosmoVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_append", _wrap_CosmoVector_append, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_empty", _wrap_CosmoVector_empty, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_size", _wrap_CosmoVector_size, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_clear", _wrap_CosmoVector_clear, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_swap", _wrap_CosmoVector_swap, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_get_allocator", _wrap_CosmoVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_begin", _wrap_CosmoVector_begin, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_end", _wrap_CosmoVector_end, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_rbegin", _wrap_CosmoVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_rend", _wrap_CosmoVector_rend, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_pop_back", _wrap_CosmoVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_erase", _wrap_CosmoVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_CosmoVector", _wrap_new_CosmoVector, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_push_back", _wrap_CosmoVector_push_back, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_front", _wrap_CosmoVector_front, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_back", _wrap_CosmoVector_back, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_assign", _wrap_CosmoVector_assign, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_resize", _wrap_CosmoVector_resize, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_insert", _wrap_CosmoVector_insert, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_reserve", _wrap_CosmoVector_reserve, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_capacity", _wrap_CosmoVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_CosmoVector", _wrap_delete_CosmoVector, METH_VARARGS, NULL},
	 { (char *)"CosmoVector_swigregister", CosmoVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_iterator", _wrap_IAngularVector_iterator, METH_VARARGS, NULL},
	 { (char *)"IAngularVector___nonzero__", _wrap_IAngularVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"IAngularVector___len__", _wrap_IAngularVector___len__, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_pop", _wrap_IAngularVector_pop, METH_VARARGS, NULL},
	 { (char *)"IAngularVector___getslice__", _wrap_IAngularVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"IAngularVector___setslice__", _wrap_IAngularVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"IAngularVector___delslice__", _wrap_IAngularVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"IAngularVector___delitem__", _wrap_IAngularVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"IAngularVector___getitem__", _wrap_IAngularVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"IAngularVector___setitem__", _wrap_IAngularVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_append", _wrap_IAngularVector_append, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_empty", _wrap_IAngularVector_empty, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_size", _wrap_IAngularVector_size, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_clear", _wrap_IAngularVector_clear, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_swap", _wrap_IAngularVector_swap, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_get_allocator", _wrap_IAngularVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_begin", _wrap_IAngularVector_begin, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_end", _wrap_IAngularVector_end, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_rbegin", _wrap_IAngularVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_rend", _wrap_IAngularVector_rend, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_pop_back", _wrap_IAngularVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_erase", _wrap_IAngularVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_IAngularVector", _wrap_new_IAngularVector, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_push_back", _wrap_IAngularVector_push_back, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_front", _wrap_IAngularVector_front, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_back", _wrap_IAngularVector_back, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_assign", _wrap_IAngularVector_assign, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_resize", _wrap_IAngularVector_resize, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_insert", _wrap_IAngularVector_insert, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_reserve", _wrap_IAngularVector_reserve, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_capacity", _wrap_IAngularVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_IAngularVector", _wrap_delete_IAngularVector, METH_VARARGS, NULL},
	 { (char *)"IAngularVector_swigregister", IAngularVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"PixelVector_iterator", _wrap_PixelVector_iterator, METH_VARARGS, NULL},
	 { (char *)"PixelVector___nonzero__", _wrap_PixelVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"PixelVector___len__", _wrap_PixelVector___len__, METH_VARARGS, NULL},
	 { (char *)"PixelVector_pop", _wrap_PixelVector_pop, METH_VARARGS, NULL},
	 { (char *)"PixelVector___getslice__", _wrap_PixelVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"PixelVector___setslice__", _wrap_PixelVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"PixelVector___delslice__", _wrap_PixelVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"PixelVector___delitem__", _wrap_PixelVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"PixelVector___getitem__", _wrap_PixelVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"PixelVector___setitem__", _wrap_PixelVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"PixelVector_append", _wrap_PixelVector_append, METH_VARARGS, NULL},
	 { (char *)"PixelVector_empty", _wrap_PixelVector_empty, METH_VARARGS, NULL},
	 { (char *)"PixelVector_size", _wrap_PixelVector_size, METH_VARARGS, NULL},
	 { (char *)"PixelVector_clear", _wrap_PixelVector_clear, METH_VARARGS, NULL},
	 { (char *)"PixelVector_swap", _wrap_PixelVector_swap, METH_VARARGS, NULL},
	 { (char *)"PixelVector_get_allocator", _wrap_PixelVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"PixelVector_begin", _wrap_PixelVector_begin, METH_VARARGS, NULL},
	 { (char *)"PixelVector_end", _wrap_PixelVector_end, METH_VARARGS, NULL},
	 { (char *)"PixelVector_rbegin", _wrap_PixelVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"PixelVector_rend", _wrap_PixelVector_rend, METH_VARARGS, NULL},
	 { (char *)"PixelVector_pop_back", _wrap_PixelVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"PixelVector_erase", _wrap_PixelVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_PixelVector", _wrap_new_PixelVector, METH_VARARGS, NULL},
	 { (char *)"PixelVector_push_back", _wrap_PixelVector_push_back, METH_VARARGS, NULL},
	 { (char *)"PixelVector_front", _wrap_PixelVector_front, METH_VARARGS, NULL},
	 { (char *)"PixelVector_back", _wrap_PixelVector_back, METH_VARARGS, NULL},
	 { (char *)"PixelVector_assign", _wrap_PixelVector_assign, METH_VARARGS, NULL},
	 { (char *)"PixelVector_resize", _wrap_PixelVector_resize, METH_VARARGS, NULL},
	 { (char *)"PixelVector_insert", _wrap_PixelVector_insert, METH_VARARGS, NULL},
	 { (char *)"PixelVector_reserve", _wrap_PixelVector_reserve, METH_VARARGS, NULL},
	 { (char *)"PixelVector_capacity", _wrap_PixelVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_PixelVector", _wrap_delete_PixelVector, METH_VARARGS, NULL},
	 { (char *)"PixelVector_swigregister", PixelVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"FieldDict_iterator", _wrap_FieldDict_iterator, METH_VARARGS, NULL},
	 { (char *)"FieldDict___nonzero__", _wrap_FieldDict___nonzero__, METH_VARARGS, NULL},
	 { (char *)"FieldDict___len__", _wrap_FieldDict___len__, METH_VARARGS, NULL},
	 { (char *)"FieldDict___getitem__", _wrap_FieldDict___getitem__, METH_VARARGS, NULL},
	 { (char *)"FieldDict___delitem__", _wrap_FieldDict___delitem__, METH_VARARGS, NULL},
	 { (char *)"FieldDict_has_key", _wrap_FieldDict_has_key, METH_VARARGS, NULL},
	 { (char *)"FieldDict_keys", _wrap_FieldDict_keys, METH_VARARGS, NULL},
	 { (char *)"FieldDict_values", _wrap_FieldDict_values, METH_VARARGS, NULL},
	 { (char *)"FieldDict_items", _wrap_FieldDict_items, METH_VARARGS, NULL},
	 { (char *)"FieldDict___contains__", _wrap_FieldDict___contains__, METH_VARARGS, NULL},
	 { (char *)"FieldDict_key_iterator", _wrap_FieldDict_key_iterator, METH_VARARGS, NULL},
	 { (char *)"FieldDict_value_iterator", _wrap_FieldDict_value_iterator, METH_VARARGS, NULL},
	 { (char *)"FieldDict___setitem__", _wrap_FieldDict___setitem__, METH_VARARGS, NULL},
	 { (char *)"new_FieldDict", _wrap_new_FieldDict, METH_VARARGS, NULL},
	 { (char *)"FieldDict_empty", _wrap_FieldDict_empty, METH_VARARGS, NULL},
	 { (char *)"FieldDict_size", _wrap_FieldDict_size, METH_VARARGS, NULL},
	 { (char *)"FieldDict_clear", _wrap_FieldDict_clear, METH_VARARGS, NULL},
	 { (char *)"FieldDict_swap", _wrap_FieldDict_swap, METH_VARARGS, NULL},
	 { (char *)"FieldDict_get_allocator", _wrap_FieldDict_get_allocator, METH_VARARGS, NULL},
	 { (char *)"FieldDict_begin", _wrap_FieldDict_begin, METH_VARARGS, NULL},
	 { (char *)"FieldDict_end", _wrap_FieldDict_end, METH_VARARGS, NULL},
	 { (char *)"FieldDict_rbegin", _wrap_FieldDict_rbegin, METH_VARARGS, NULL},
	 { (char *)"FieldDict_rend", _wrap_FieldDict_rend, METH_VARARGS, NULL},
	 { (char *)"FieldDict_count", _wrap_FieldDict_count, METH_VARARGS, NULL},
	 { (char *)"FieldDict_erase", _wrap_FieldDict_erase, METH_VARARGS, NULL},
	 { (char *)"FieldDict_find", _wrap_FieldDict_find, METH_VARARGS, NULL},
	 { (char *)"FieldDict_lower_bound", _wrap_FieldDict_lower_bound, METH_VARARGS, NULL},
	 { (char *)"FieldDict_upper_bound", _wrap_FieldDict_upper_bound, METH_VARARGS, NULL},
	 { (char *)"delete_FieldDict", _wrap_delete_FieldDict, METH_VARARGS, NULL},
	 { (char *)"FieldDict_swigregister", FieldDict_swigregister, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_iterator", _wrap_FieldColumnDict_iterator, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict___nonzero__", _wrap_FieldColumnDict___nonzero__, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict___len__", _wrap_FieldColumnDict___len__, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict___getitem__", _wrap_FieldColumnDict___getitem__, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict___delitem__", _wrap_FieldColumnDict___delitem__, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_has_key", _wrap_FieldColumnDict_has_key, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_keys", _wrap_FieldColumnDict_keys, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_values", _wrap_FieldColumnDict_values, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_items", _wrap_FieldColumnDict_items, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict___contains__", _wrap_FieldColumnDict___contains__, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_key_iterator", _wrap_FieldColumnDict_key_iterator, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_value_iterator", _wrap_FieldColumnDict_value_iterator, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict___setitem__", _wrap_FieldColumnDict___setitem__, METH_VARARGS, NULL},
	 { (char *)"new_FieldColumnDict", _wrap_new_FieldColumnDict, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_empty", _wrap_FieldColumnDict_empty, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_size", _wrap_FieldColumnDict_size, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_clear", _wrap_FieldColumnDict_clear, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_swap", _wrap_FieldColumnDict_swap, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_get_allocator", _wrap_FieldColumnDict_get_allocator, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_begin", _wrap_FieldColumnDict_begin, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_end", _wrap_FieldColumnDict_end, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_rbegin", _wrap_FieldColumnDict_rbegin, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_rend", _wrap_FieldColumnDict_rend, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_count", _wrap_FieldColumnDict_count, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_erase", _wrap_FieldColumnDict_erase, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_find", _wrap_FieldColumnDict_find, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_lower_bound", _wrap_FieldColumnDict_lower_bound, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_upper_bound", _wrap_FieldColumnDict_upper_bound, METH_VARARGS, NULL},
	 { (char *)"delete_FieldColumnDict", _wrap_delete_FieldColumnDict, METH_VARARGS, NULL},
	 { (char *)"FieldColumnDict_swigregister", FieldColumnDict_swigregister, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_iterator", _wrap_DoubleVector_iterator, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___nonzero__", _wrap_DoubleVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___len__", _wrap_DoubleVector___len__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_pop", _wrap_DoubleVector_pop, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___getslice__", _wrap_DoubleVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___setslice__", _wrap_DoubleVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___delslice__", _wrap_DoubleVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___delitem__", _wrap_DoubleVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___getitem__", _wrap_DoubleVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector___setitem__", _wrap_DoubleVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_append", _wrap_DoubleVector_append, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_empty", _wrap_DoubleVector_empty, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_size", _wrap_DoubleVector_size, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_clear", _wrap_DoubleVector_clear, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_swap", _wrap_DoubleVector_swap, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_get_allocator", _wrap_DoubleVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_begin", _wrap_DoubleVector_begin, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_end", _wrap_DoubleVector_end, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_rbegin", _wrap_DoubleVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_rend", _wrap_DoubleVector_rend, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_pop_back", _wrap_DoubleVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_erase", _wrap_DoubleVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_DoubleVector", _wrap_new_DoubleVector, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_push_back", _wrap_DoubleVector_push_back, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_front", _wrap_DoubleVector_front, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_back", _wrap_DoubleVector_back, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_assign", _wrap_DoubleVector_assign, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_resize", _wrap_DoubleVector_resize, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_insert", _wrap_DoubleVector_insert, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_reserve", _wrap_DoubleVector_reserve, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_capacity", _wrap_DoubleVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_DoubleVector", _wrap_delete_DoubleVector, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_swigregister", DoubleVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"IndexVector_iterator", _wrap_IndexVector_iterator, METH_VARARGS, NULL},
	 { (char *)"IndexVector___nonzero__", _wrap_IndexVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"IndexVector___len__", _wrap_IndexVector___len__, METH_VARARGS, NULL},
	 { (char *)"IndexVector_pop", _wrap_IndexVector_pop, METH_VARARGS, NULL},
	 { (char *)"IndexVector___getslice__", _wrap_IndexVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"IndexVector___setslice__", _wrap_IndexVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"IndexVector___delslice__", _wrap_IndexVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"IndexVector___delitem__", _wrap_IndexVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"IndexVector___getitem__", _wrap_IndexVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"IndexVector___setitem__", _wrap_IndexVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"IndexVector_append", _wrap_IndexVector_append, METH_VARARGS, NULL},
	 { (char *)"IndexVector_empty", _wrap_IndexVector_empty, METH_VARARGS, NULL},
	 { (char *)"IndexVector_size", _wrap_IndexVector_size, METH_VARARGS, NULL},
	 { (char *)"IndexVector_clear", _wrap_IndexVector_clear, METH_VARARGS, NULL},
	 { (char *)"IndexVector_swap", _wrap_IndexVector_swap, METH_VARARGS, NULL},
	 { (char *)"IndexVector_get_allocator", _wrap_IndexVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"IndexVector_begin", _wrap_IndexVector_begin, METH_VARARGS, NULL},
	 { (char *)"IndexVector_end", _wrap_IndexVector_end, METH_VARARGS, NULL},
	 { (char *)"IndexVector_rbegin", _wrap_IndexVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"IndexVector_rend", _wrap_IndexVector_rend, METH_VARARGS, NULL},
	 { (char *)"IndexVector_pop_back", _wrap_IndexVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"IndexVector_erase", _wrap_IndexVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_IndexVector", _wrap_new_IndexVector, METH_VARARGS, NULL},
	 { (char *)"IndexVector_push_back", _wrap_IndexVector_push_back, METH_VARARGS, NULL},
	 { (char *)"IndexVector_front", _wrap_IndexVector_front, METH_VARARGS, NULL},
	 { (char *)"IndexVector_back", _wrap_IndexVector_back, METH_VARARGS, NULL},
	 { (char *)"IndexVector_assign", _wrap_IndexVector_assign, METH_VARARGS, NULL},
	 { (char *)"IndexVector_resize", _wrap_IndexVector_resize, METH_VARARGS, NULL},
	 { (char *)"IndexVector_insert", _wrap_IndexVector_insert, METH_VARARGS, NULL},
	 { (char *)"IndexVector_reserve", _wrap_IndexVector_reserve, METH_VARARGS, NULL},
	 { (char *)"IndexVector_capacity", _wrap_IndexVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_IndexVector", _wrap_delete_IndexVector, METH_VARARGS, NULL},
	 { (char *)"IndexVector_swigregister", IndexVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"_iter_incr", _wrap__iter_incr, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Stomp__MapTo_p_Stomp__BaseMap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::BaseMap *)  ((Stomp::Map *) x));
}
static void *_p_Stomp__ScalarMapTo_p_Stomp__BaseMap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::BaseMap *)  ((Stomp::ScalarMap *) x));
}
static void *_p_Stomp__TreeMapTo_p_Stomp__BaseMap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::BaseMap *)  ((Stomp::TreeMap *) x));
}
static void *_p_Stomp__IndexedTreeMapTo_p_Stomp__BaseMap(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::BaseMap *)  ((Stomp::IndexedTreeMap *) x));
}
static void *_p_Stomp__CosmoCoordinateTo_p_Stomp__WeightedAngularCoordinate(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::WeightedAngularCoordinate *)  ((Stomp::CosmoCoordinate *) x));
}
static void *_p_Stomp__WeightedAngularCoordinateTo_p_Stomp__AngularCoordinate(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::AngularCoordinate *)  ((Stomp::WeightedAngularCoordinate *) x));
}
static void *_p_Stomp__CosmoCoordinateTo_p_Stomp__AngularCoordinate(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::AngularCoordinate *) (Stomp::WeightedAngularCoordinate *) ((Stomp::CosmoCoordinate *) x));
}
static void *_p_Stomp__IndexedAngularCoordinateTo_p_Stomp__AngularCoordinate(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::AngularCoordinate *)  ((Stomp::IndexedAngularCoordinate *) x));
}
static void *_p_Stomp__RadialBinTo_p_Stomp__AngularBin(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::AngularBin *)  ((Stomp::RadialBin *) x));
}
static void *_p_Stomp__PolygonBoundTo_p_Stomp__GeometricBound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::GeometricBound *)  ((Stomp::PolygonBound *) x));
}
static void *_p_Stomp__LatLonBoundTo_p_Stomp__GeometricBound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::GeometricBound *)  ((Stomp::LatLonBound *) x));
}
static void *_p_Stomp__AnnulusBoundTo_p_Stomp__GeometricBound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::GeometricBound *)  ((Stomp::AnnulusBound *) x));
}
static void *_p_Stomp__WedgeBoundTo_p_Stomp__GeometricBound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::GeometricBound *)  ((Stomp::WedgeBound *) x));
}
static void *_p_Stomp__CircleBoundTo_p_Stomp__GeometricBound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::GeometricBound *)  ((Stomp::CircleBound *) x));
}
static void *_p_Stomp__LongitudeBoundTo_p_Stomp__GeometricBound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::GeometricBound *)  ((Stomp::LongitudeBound *) x));
}
static void *_p_Stomp__LatitudeBoundTo_p_Stomp__GeometricBound(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::GeometricBound *)  ((Stomp::LatitudeBound *) x));
}
static void *_p_Stomp__ScalarPixelTo_p_Stomp__Pixel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::Pixel *)  ((Stomp::ScalarPixel *) x));
}
static void *_p_Stomp__TreePixelTo_p_Stomp__Pixel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::Pixel *)  ((Stomp::TreePixel *) x));
}
static void *_p_Stomp__IndexedTreePixelTo_p_Stomp__Pixel(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Stomp::Pixel *)  ((Stomp::IndexedTreePixel *) x));
}
static swig_type_info _swigt__p_Stomp__AngularBin = {"_p_Stomp__AngularBin", "Stomp::AngularBin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__AngularCoordinate = {"_p_Stomp__AngularCoordinate", "Stomp::AngularCoordinate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__AngularCorrelation = {"_p_Stomp__AngularCorrelation", "Stomp::AngularCorrelation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__AngularPtrVector__iterator = {"_p_Stomp__AngularPtrVector__iterator", "Stomp::AngularPtrVector::iterator *|Stomp::AngularPtrIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__AngularVector__iterator = {"_p_Stomp__AngularVector__iterator", "Stomp::AngularVector::iterator *|Stomp::AngularIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__AnnulusBound = {"_p_Stomp__AnnulusBound", "Stomp::AnnulusBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__AnnulusVector__iterator = {"_p_Stomp__AnnulusVector__iterator", "Stomp::AnnulusVector::iterator *|Stomp::AnnulusIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__BaseMap = {"_p_Stomp__BaseMap", "Stomp::BaseMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__BinVector__iterator = {"_p_Stomp__BinVector__iterator", "Stomp::BinVector::iterator *|Stomp::BinIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__CircleBound = {"_p_Stomp__CircleBound", "Stomp::CircleBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__CircleVector__iterator = {"_p_Stomp__CircleVector__iterator", "Stomp::CircleVector::iterator *|Stomp::CircleIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__CosmoCoordinate = {"_p_Stomp__CosmoCoordinate", "Stomp::CosmoCoordinate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__CosmoPtrVector__iterator = {"_p_Stomp__CosmoPtrVector__iterator", "Stomp::CosmoPtrVector::iterator *|Stomp::CosmoPtrIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__CosmoVector__iterator = {"_p_Stomp__CosmoVector__iterator", "Stomp::CosmoVector::iterator *|Stomp::CosmoIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__Cosmology = {"_p_Stomp__Cosmology", "Stomp::Cosmology *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__CoverageDict__iterator = {"_p_Stomp__CoverageDict__iterator", "Stomp::CoverageDict::iterator *|Stomp::CoverageIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__FieldColumnDict__iterator = {"_p_Stomp__FieldColumnDict__iterator", "Stomp::FieldColumnDict::iterator *|Stomp::FieldColumnIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__FieldDict__iterator = {"_p_Stomp__FieldDict__iterator", "Stomp::FieldDict::iterator *|Stomp::FieldIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__GeometricBound = {"_p_Stomp__GeometricBound", "Stomp::GeometricBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__Histogram = {"_p_Stomp__Histogram", "Stomp::Histogram *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__HistogramBin = {"_p_Stomp__HistogramBin", "Stomp::HistogramBin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__IAngularPtrVector__iterator = {"_p_Stomp__IAngularPtrVector__iterator", "Stomp::IAngularPtrVector::iterator *|Stomp::IAngularPtrIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__IAngularVector__iterator = {"_p_Stomp__IAngularVector__iterator", "Stomp::IAngularVector::iterator *|Stomp::IAngularIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__IndexVector__iterator = {"_p_Stomp__IndexVector__iterator", "Stomp::IndexVector::iterator *|Stomp::IndexIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__IndexedAngularCoordinate = {"_p_Stomp__IndexedAngularCoordinate", "Stomp::IndexedAngularCoordinate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__IndexedTreeMap = {"_p_Stomp__IndexedTreeMap", "Stomp::IndexedTreeMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__IndexedTreeNeighbor = {"_p_Stomp__IndexedTreeNeighbor", "Stomp::IndexedTreeNeighbor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__IndexedTreePixel = {"_p_Stomp__IndexedTreePixel", "Stomp::IndexedTreePixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__LatLonBound = {"_p_Stomp__LatLonBound", "Stomp::LatLonBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__LatLonVector__iterator = {"_p_Stomp__LatLonVector__iterator", "Stomp::LatLonVector::iterator *|Stomp::LatLonIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__LatitudeBound = {"_p_Stomp__LatitudeBound", "Stomp::LatitudeBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__LatitudeVector__iterator = {"_p_Stomp__LatitudeVector__iterator", "Stomp::LatitudeVector::iterator *|Stomp::LatitudeIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__LongitudeBound = {"_p_Stomp__LongitudeBound", "Stomp::LongitudeBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__LongitudeVector__iterator = {"_p_Stomp__LongitudeVector__iterator", "Stomp::LongitudeVector::iterator *|Stomp::LongitudeIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__Map = {"_p_Stomp__Map", "Stomp::Map *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__NearestNeighborIndexedPixel = {"_p_Stomp__NearestNeighborIndexedPixel", "Stomp::NearestNeighborIndexedPixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__NearestNeighborIndexedPoint = {"_p_Stomp__NearestNeighborIndexedPoint", "Stomp::NearestNeighborIndexedPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__NearestNeighborPixel = {"_p_Stomp__NearestNeighborPixel", "Stomp::NearestNeighborPixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__NearestNeighborPoint = {"_p_Stomp__NearestNeighborPoint", "Stomp::NearestNeighborPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__Pixel = {"_p_Stomp__Pixel", "Stomp::Pixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__PixelOrdering = {"_p_Stomp__PixelOrdering", "Stomp::PixelOrdering *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__PixelPtrVector__iterator = {"_p_Stomp__PixelPtrVector__iterator", "Stomp::PixelPtrVector::iterator *|Stomp::PixelPtrIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__PixelVector__iterator = {"_p_Stomp__PixelVector__iterator", "Stomp::PixelVector::iterator *|Stomp::PixelIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__PolygonBound = {"_p_Stomp__PolygonBound", "Stomp::PolygonBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__PolygonVector__iterator = {"_p_Stomp__PolygonVector__iterator", "Stomp::PolygonVector::iterator *|Stomp::PolygonIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__RadialBin = {"_p_Stomp__RadialBin", "Stomp::RadialBin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__RadialPtrVector__iterator = {"_p_Stomp__RadialPtrVector__iterator", "Stomp::RadialPtrVector::iterator *|Stomp::RadialPtrIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__RadialVector__iterator = {"_p_Stomp__RadialVector__iterator", "Stomp::RadialVector::iterator *|Stomp::RadialIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__RegionAreaDict__iterator = {"_p_Stomp__RegionAreaDict__iterator", "Stomp::RegionAreaDict::iterator *|Stomp::RegionAreaIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__RegionBound = {"_p_Stomp__RegionBound", "Stomp::RegionBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__RegionBoundVector__iterator = {"_p_Stomp__RegionBoundVector__iterator", "Stomp::RegionBoundVector::iterator *|Stomp::RegionBoundIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__RegionDict__iterator = {"_p_Stomp__RegionDict__iterator", "Stomp::RegionDict::iterator *|Stomp::RegionIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__RegionMap = {"_p_Stomp__RegionMap", "Stomp::RegionMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__ResolutionDict__iterator = {"_p_Stomp__ResolutionDict__iterator", "Stomp::ResolutionDict::iterator *|Stomp::ResolutionIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__ScalarMap = {"_p_Stomp__ScalarMap", "Stomp::ScalarMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__ScalarMapVector__iterator = {"_p_Stomp__ScalarMapVector__iterator", "Stomp::ScalarMapVector::iterator *|Stomp::ScalarMapIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__ScalarPixel = {"_p_Stomp__ScalarPixel", "Stomp::ScalarPixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__ScalarPtrVector__iterator = {"_p_Stomp__ScalarPtrVector__iterator", "Stomp::ScalarPtrVector::iterator *|Stomp::ScalarPtrIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__ScalarVector__iterator = {"_p_Stomp__ScalarVector__iterator", "Stomp::ScalarVector::iterator *|Stomp::ScalarIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__StompWatch = {"_p_Stomp__StompWatch", "Stomp::StompWatch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__SubMap = {"_p_Stomp__SubMap", "Stomp::SubMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__SubMapVector__iterator = {"_p_Stomp__SubMapVector__iterator", "Stomp::SubMapVector::iterator *|Stomp::SubMapIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__ThetaPtrVector__iterator = {"_p_Stomp__ThetaPtrVector__iterator", "Stomp::ThetaPtrVector::iterator *|Stomp::ThetaPtrIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__ThetaVector__iterator = {"_p_Stomp__ThetaVector__iterator", "Stomp::ThetaVector::iterator *|Stomp::ThetaIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__TreeMap = {"_p_Stomp__TreeMap", "Stomp::TreeMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__TreeNeighbor = {"_p_Stomp__TreeNeighbor", "Stomp::TreeNeighbor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__TreePixel = {"_p_Stomp__TreePixel", "Stomp::TreePixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__WAngularPtrVector__iterator = {"_p_Stomp__WAngularPtrVector__iterator", "Stomp::WAngularPtrVector::iterator *|Stomp::WAngularPtrIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__WAngularVector__iterator = {"_p_Stomp__WAngularVector__iterator", "Stomp::WAngularVector::iterator *|Stomp::WAngularIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__WThetaVector__iterator = {"_p_Stomp__WThetaVector__iterator", "Stomp::WThetaVector::iterator *|Stomp::WThetaIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__WedgeBound = {"_p_Stomp__WedgeBound", "Stomp::WedgeBound *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__WedgeVector__iterator = {"_p_Stomp__WedgeVector__iterator", "Stomp::WedgeVector::iterator *|Stomp::WedgeIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__WeightedAngularCoordinate = {"_p_Stomp__WeightedAngularCoordinate", "Stomp::WeightedAngularCoordinate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Stomp__section = {"_p_Stomp__section", "Stomp::section *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__string_t = {"_p_std__lessT_std__string_t", "std::less< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_Stomp__Pixel_const_bool_Stomp__PixelOrdering_std__allocatorT_std__pairT_Stomp__Pixel_const_const_bool_t_t_t = {"_p_std__mapT_Stomp__Pixel_const_bool_Stomp__PixelOrdering_std__allocatorT_std__pairT_Stomp__Pixel_const_const_bool_t_t_t", "std::map< Stomp::Pixel const,bool,Stomp::PixelOrdering,std::allocator< std::pair< Stomp::Pixel const const,bool > > > *|Stomp::CoverageDict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_short_const_double_std__lessT_short_const_t_std__allocatorT_std__pairT_short_const_const_double_t_t_t = {"_p_std__mapT_short_const_double_std__lessT_short_const_t_std__allocatorT_std__pairT_short_const_const_double_t_t_t", "std::map< short const,double,std::less< short const >,std::allocator< std::pair< short const const,double > > > *|Stomp::RegionAreaDict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t = {"_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t", "std::map< std::string,double,std::less< std::string >,std::allocator< std::pair< std::string const,double > > > *|Stomp::FieldDict *|std::map< std::string,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t__allocator_type = {"_p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t__allocator_type", "std::map< std::string,double >::allocator_type *|std::allocator< std::pair< std::string const,double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t = {"_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t", "std::map< std::string,unsigned char > *|std::map< std::string,unsigned char,std::less< std::string >,std::allocator< std::pair< std::string const,unsigned char > > > *|Stomp::FieldColumnDict *|std::map< std::string,uint8_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t__allocator_type = {"_p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t__allocator_type", "std::allocator< std::pair< std::string const,unsigned char > > *|std::map< std::string,unsigned char >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_unsigned_int_const_short_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_short_t_t_t = {"_p_std__mapT_unsigned_int_const_short_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_short_t_t_t", "std::map< unsigned int const,short,std::less< unsigned int const >,std::allocator< std::pair< unsigned int const const,short > > > *|Stomp::RegionDict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_unsigned_int_const_unsigned_int_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_unsigned_int_t_t_t = {"_p_std__mapT_unsigned_int_const_unsigned_int_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_unsigned_int_t_t_t", "std::map< unsigned int const,unsigned int,std::less< unsigned int const >,std::allocator< std::pair< unsigned int const const,unsigned int > > > *|Stomp::ResolutionDict *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_Stomp__PixelVector__iterator_Stomp__PixelVector__iterator_t = {"_p_std__pairT_Stomp__PixelVector__iterator_Stomp__PixelVector__iterator_t", "std::pair< Stomp::PixelVector::iterator,Stomp::PixelVector::iterator > *|Stomp::PixelPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_Stomp__RadialVector__iterator_Stomp__RadialVector__iterator_t = {"_p_std__pairT_Stomp__RadialVector__iterator_Stomp__RadialVector__iterator_t", "std::pair< Stomp::RadialVector::iterator,Stomp::RadialVector::iterator > *|Stomp::RadialPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_Stomp__RegionAreaDict__iterator_Stomp__RegionAreaDict__iterator_t = {"_p_std__pairT_Stomp__RegionAreaDict__iterator_Stomp__RegionAreaDict__iterator_t", "Stomp::RegionAreaPair *|std::pair< Stomp::RegionAreaDict::iterator,Stomp::RegionAreaDict::iterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_Stomp__RegionDict__iterator_Stomp__RegionDict__iterator_t = {"_p_std__pairT_Stomp__RegionDict__iterator_Stomp__RegionDict__iterator_t", "std::pair< Stomp::RegionDict::iterator,Stomp::RegionDict::iterator > *|Stomp::RegionPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_Stomp__ResolutionDict__iterator_Stomp__ResolutionDict__iterator_t = {"_p_std__pairT_Stomp__ResolutionDict__iterator_Stomp__ResolutionDict__iterator_t", "std::pair< Stomp::ResolutionDict::iterator,Stomp::ResolutionDict::iterator > *|Stomp::ResolutionPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_Stomp__ScalarMapVector__iterator_Stomp__ScalarMapVector__iterator_t = {"_p_std__pairT_Stomp__ScalarMapVector__iterator_Stomp__ScalarMapVector__iterator_t", "std::pair< Stomp::ScalarMapVector::iterator,Stomp::ScalarMapVector::iterator > *|Stomp::ScalarMapPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_Stomp__ScalarVector__iterator_Stomp__ScalarVector__iterator_t = {"_p_std__pairT_Stomp__ScalarVector__iterator_Stomp__ScalarVector__iterator_t", "std::pair< Stomp::ScalarVector::iterator,Stomp::ScalarVector::iterator > *|Stomp::ScalarPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_Stomp__SubMapVector__iterator_Stomp__SubMapVector__iterator_t = {"_p_std__pairT_Stomp__SubMapVector__iterator_Stomp__SubMapVector__iterator_t", "std::pair< Stomp::SubMapVector::iterator,Stomp::SubMapVector::iterator > *|Stomp::SubMapPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_Stomp__ThetaVector__iterator_Stomp__ThetaVector__iterator_t = {"_p_std__pairT_Stomp__ThetaVector__iterator_Stomp__ThetaVector__iterator_t", "Stomp::ThetaPair *|std::pair< Stomp::ThetaVector::iterator,Stomp::ThetaVector::iterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t = {"_p_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t", "std::pair< double,Stomp::IndexedAngularCoordinate * > *|Stomp::DistanceIPointPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_double_Stomp__IndexedTreePixel_p_t = {"_p_std__pairT_double_Stomp__IndexedTreePixel_p_t", "std::pair< double,Stomp::IndexedTreePixel * > *|Stomp::DistanceIPixelPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_double_Stomp__TreePixel_p_t = {"_p_std__pairT_double_Stomp__TreePixel_p_t", "std::pair< double,Stomp::TreePixel * > *|Stomp::DistancePixelPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t = {"_p_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t", "std::pair< double,Stomp::WeightedAngularCoordinate * > *|Stomp::DistancePointPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_t = {"_p_std__pairT_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_t", "std::pair< std::pair< unsigned int,Stomp::PixelVector::iterator >,std::pair< unsigned int,Stomp::PixelVector::iterator > > *|Stomp::MapPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t = {"_p_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t", "std::pair< unsigned int,Stomp::PixelVector::iterator > *|Stomp::MapIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__priority_queueT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborIndexedPoint_t = {"_p_std__priority_queueT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborIndexedPoint_t", "std::priority_queue< std::pair< double,Stomp::IndexedAngularCoordinate * >,std::vector< std::pair< double,Stomp::IndexedAngularCoordinate * >,std::allocator< std::pair< double,Stomp::IndexedAngularCoordinate * > > >,Stomp::NearestNeighborIndexedPoint > *|Stomp::IPointQueue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__priority_queueT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__vectorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_t_t_Stomp__NearestNeighborIndexedPixel_t = {"_p_std__priority_queueT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__vectorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_t_t_Stomp__NearestNeighborIndexedPixel_t", "std::priority_queue< std::pair< double,Stomp::IndexedTreePixel * >,std::vector< std::pair< double,Stomp::IndexedTreePixel * >,std::allocator< std::pair< double,Stomp::IndexedTreePixel * > > >,Stomp::NearestNeighborIndexedPixel > *|Stomp::IPixelQueue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__priority_queueT_std__pairT_double_Stomp__TreePixel_p_t_std__vectorT_std__pairT_double_Stomp__TreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__TreePixel_p_t_t_t_Stomp__NearestNeighborPixel_t = {"_p_std__priority_queueT_std__pairT_double_Stomp__TreePixel_p_t_std__vectorT_std__pairT_double_Stomp__TreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__TreePixel_p_t_t_t_Stomp__NearestNeighborPixel_t", "std::priority_queue< std::pair< double,Stomp::TreePixel * >,std::vector< std::pair< double,Stomp::TreePixel * >,std::allocator< std::pair< double,Stomp::TreePixel * > > >,Stomp::NearestNeighborPixel > *|Stomp::PixelQueue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__priority_queueT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborPoint_t = {"_p_std__priority_queueT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborPoint_t", "Stomp::PointQueue *|std::priority_queue< std::pair< double,Stomp::WeightedAngularCoordinate * >,std::vector< std::pair< double,Stomp::WeightedAngularCoordinate * >,std::allocator< std::pair< double,Stomp::WeightedAngularCoordinate * > > >,Stomp::NearestNeighborPoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__AngularBin_p_std__allocatorT_Stomp__AngularBin_p_t_t = {"_p_std__vectorT_Stomp__AngularBin_p_std__allocatorT_Stomp__AngularBin_p_t_t", "std::vector< Stomp::AngularBin *,std::allocator< Stomp::AngularBin * > > *|Stomp::ThetaPtrVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t = {"_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t", "std::vector< Stomp::AngularBin > *|std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > > *|Stomp::ThetaVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__allocator_type = {"_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__allocator_type", "std::vector< Stomp::AngularBin >::allocator_type *|std::allocator< Stomp::AngularBin > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__const_iterator = {"_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__const_iterator", "std::vector< Stomp::AngularBin,std::allocator< Stomp::AngularBin > >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type = {"_p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type", "std::vector< Stomp::AngularBin >::value_type *|Stomp::AngularBin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__AngularCoordinate_p_std__allocatorT_Stomp__AngularCoordinate_p_t_t = {"_p_std__vectorT_Stomp__AngularCoordinate_p_std__allocatorT_Stomp__AngularCoordinate_p_t_t", "std::vector< Stomp::AngularCoordinate *,std::allocator< Stomp::AngularCoordinate * > > *|Stomp::AngularPtrVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t = {"_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t", "std::vector< Stomp::AngularCoordinate > *|std::vector< Stomp::AngularCoordinate,std::allocator< Stomp::AngularCoordinate > > *|Stomp::AngularVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__allocator_type = {"_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__allocator_type", "std::allocator< Stomp::AngularCoordinate > *|std::vector< Stomp::AngularCoordinate >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type = {"_p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type", "Stomp::AngularCoordinate *|std::vector< Stomp::AngularCoordinate >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__AngularCorrelation_std__allocatorT_Stomp__AngularCorrelation_t_t = {"_p_std__vectorT_Stomp__AngularCorrelation_std__allocatorT_Stomp__AngularCorrelation_t_t", "std::vector< Stomp::AngularCorrelation,std::allocator< Stomp::AngularCorrelation > > *|Stomp::WThetaVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__AnnulusBound_std__allocatorT_Stomp__AnnulusBound_t_t = {"_p_std__vectorT_Stomp__AnnulusBound_std__allocatorT_Stomp__AnnulusBound_t_t", "std::vector< Stomp::AnnulusBound,std::allocator< Stomp::AnnulusBound > > *|Stomp::AnnulusVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__CircleBound_std__allocatorT_Stomp__CircleBound_t_t = {"_p_std__vectorT_Stomp__CircleBound_std__allocatorT_Stomp__CircleBound_t_t", "std::vector< Stomp::CircleBound,std::allocator< Stomp::CircleBound > > *|Stomp::CircleVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__CosmoCoordinate_p_std__allocatorT_Stomp__CosmoCoordinate_p_t_t = {"_p_std__vectorT_Stomp__CosmoCoordinate_p_std__allocatorT_Stomp__CosmoCoordinate_p_t_t", "std::vector< Stomp::CosmoCoordinate *,std::allocator< Stomp::CosmoCoordinate * > > *|Stomp::CosmoPtrVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t = {"_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t", "std::vector< Stomp::CosmoCoordinate > *|std::vector< Stomp::CosmoCoordinate,std::allocator< Stomp::CosmoCoordinate > > *|Stomp::CosmoVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__allocator_type = {"_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__allocator_type", "std::allocator< Stomp::CosmoCoordinate > *|std::vector< Stomp::CosmoCoordinate >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type = {"_p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type", "Stomp::CosmoCoordinate *|std::vector< Stomp::CosmoCoordinate >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t = {"_p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t", "std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > > *|Stomp::BinVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t__const_iterator = {"_p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t__const_iterator", "std::vector< Stomp::HistogramBin,std::allocator< Stomp::HistogramBin > >::const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_p_std__allocatorT_Stomp__IndexedAngularCoordinate_p_t_t = {"_p_std__vectorT_Stomp__IndexedAngularCoordinate_p_std__allocatorT_Stomp__IndexedAngularCoordinate_p_t_t", "std::vector< Stomp::IndexedAngularCoordinate *,std::allocator< Stomp::IndexedAngularCoordinate * > > *|Stomp::IAngularPtrVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t = {"_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t", "std::vector< Stomp::IndexedAngularCoordinate > *|std::vector< Stomp::IndexedAngularCoordinate,std::allocator< Stomp::IndexedAngularCoordinate > > *|Stomp::IAngularVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__allocator_type = {"_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__allocator_type", "std::vector< Stomp::IndexedAngularCoordinate >::allocator_type *|std::allocator< Stomp::IndexedAngularCoordinate > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type = {"_p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type", "Stomp::IndexedAngularCoordinate *|std::vector< Stomp::IndexedAngularCoordinate >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__LatLonBound_std__allocatorT_Stomp__LatLonBound_t_t = {"_p_std__vectorT_Stomp__LatLonBound_std__allocatorT_Stomp__LatLonBound_t_t", "std::vector< Stomp::LatLonBound,std::allocator< Stomp::LatLonBound > > *|Stomp::LatLonVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__LatitudeBound_std__allocatorT_Stomp__LatitudeBound_t_t = {"_p_std__vectorT_Stomp__LatitudeBound_std__allocatorT_Stomp__LatitudeBound_t_t", "std::vector< Stomp::LatitudeBound,std::allocator< Stomp::LatitudeBound > > *|Stomp::LatitudeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__LongitudeBound_std__allocatorT_Stomp__LongitudeBound_t_t = {"_p_std__vectorT_Stomp__LongitudeBound_std__allocatorT_Stomp__LongitudeBound_t_t", "std::vector< Stomp::LongitudeBound,std::allocator< Stomp::LongitudeBound > > *|Stomp::LongitudeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__Pixel_p_std__allocatorT_Stomp__Pixel_p_t_t = {"_p_std__vectorT_Stomp__Pixel_p_std__allocatorT_Stomp__Pixel_p_t_t", "std::vector< Stomp::Pixel *,std::allocator< Stomp::Pixel * > > *|Stomp::PixelPtrVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t = {"_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t", "std::vector< Stomp::Pixel,std::allocator< Stomp::Pixel > > *|Stomp::PixelVector *|std::vector< Stomp::Pixel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__allocator_type = {"_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__allocator_type", "std::vector< Stomp::Pixel >::allocator_type *|std::allocator< Stomp::Pixel > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type = {"_p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type", "std::vector< Stomp::Pixel >::value_type *|Stomp::Pixel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__PolygonBound_std__allocatorT_Stomp__PolygonBound_t_t = {"_p_std__vectorT_Stomp__PolygonBound_std__allocatorT_Stomp__PolygonBound_t_t", "std::vector< Stomp::PolygonBound,std::allocator< Stomp::PolygonBound > > *|Stomp::PolygonVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__RadialBin_p_std__allocatorT_Stomp__RadialBin_p_t_t = {"_p_std__vectorT_Stomp__RadialBin_p_std__allocatorT_Stomp__RadialBin_p_t_t", "std::vector< Stomp::RadialBin *,std::allocator< Stomp::RadialBin * > > *|Stomp::RadialPtrVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t = {"_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t", "std::vector< Stomp::RadialBin > *|std::vector< Stomp::RadialBin,std::allocator< Stomp::RadialBin > > *|Stomp::RadialVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__allocator_type = {"_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__allocator_type", "std::vector< Stomp::RadialBin >::allocator_type *|std::allocator< Stomp::RadialBin > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type = {"_p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type", "std::vector< Stomp::RadialBin >::value_type *|Stomp::RadialBin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t = {"_p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t", "std::vector< Stomp::RegionBound,std::allocator< Stomp::RegionBound > > *|Stomp::RegionBoundVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__ScalarMap_std__allocatorT_Stomp__ScalarMap_t_t = {"_p_std__vectorT_Stomp__ScalarMap_std__allocatorT_Stomp__ScalarMap_t_t", "std::vector< Stomp::ScalarMap,std::allocator< Stomp::ScalarMap > > *|Stomp::ScalarMapVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__ScalarPixel_p_std__allocatorT_Stomp__ScalarPixel_p_t_t = {"_p_std__vectorT_Stomp__ScalarPixel_p_std__allocatorT_Stomp__ScalarPixel_p_t_t", "std::vector< Stomp::ScalarPixel *,std::allocator< Stomp::ScalarPixel * > > *|Stomp::ScalarPtrVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t = {"_p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t", "std::vector< Stomp::ScalarPixel,std::allocator< Stomp::ScalarPixel > > *|Stomp::ScalarVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__SubMap_std__allocatorT_Stomp__SubMap_t_t = {"_p_std__vectorT_Stomp__SubMap_std__allocatorT_Stomp__SubMap_t_t", "std::vector< Stomp::SubMap,std::allocator< Stomp::SubMap > > *|Stomp::SubMapVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__WedgeBound_std__allocatorT_Stomp__WedgeBound_t_t = {"_p_std__vectorT_Stomp__WedgeBound_std__allocatorT_Stomp__WedgeBound_t_t", "std::vector< Stomp::WedgeBound,std::allocator< Stomp::WedgeBound > > *|Stomp::WedgeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_p_std__allocatorT_Stomp__WeightedAngularCoordinate_p_t_t = {"_p_std__vectorT_Stomp__WeightedAngularCoordinate_p_std__allocatorT_Stomp__WeightedAngularCoordinate_p_t_t", "std::vector< Stomp::WeightedAngularCoordinate *,std::allocator< Stomp::WeightedAngularCoordinate * > > *|Stomp::WAngularPtrVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t = {"_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t", "std::vector< Stomp::WeightedAngularCoordinate > *|std::vector< Stomp::WeightedAngularCoordinate,std::allocator< Stomp::WeightedAngularCoordinate > > *|Stomp::WAngularVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__allocator_type = {"_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__allocator_type", "std::allocator< Stomp::WeightedAngularCoordinate > *|std::vector< Stomp::WeightedAngularCoordinate >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type = {"_p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type", "Stomp::WeightedAngularCoordinate *|std::vector< Stomp::WeightedAngularCoordinate >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t = {"_p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t", "std::vector< Stomp::section,std::allocator< Stomp::section > > *|Stomp::SectionVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type = {"_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t = {"_p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t", "std::vector< int8_t,std::allocator< int8_t > > *|std::vector< signed char,std::allocator< signed char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< uint32_t,std::allocator< uint32_t > > *|std::vector< unsigned int,std::allocator< unsigned int > > *|std::vector< uint32_t > *|Stomp::IndexVector *|std::vector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type", "std::vector< unsigned int >::allocator_type *|std::allocator< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__PySwigIterator = {"_p_swig__PySwigIterator", "swig::PySwigIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Stomp__AngularBin,
  &_swigt__p_Stomp__AngularCoordinate,
  &_swigt__p_Stomp__AngularCorrelation,
  &_swigt__p_Stomp__AngularPtrVector__iterator,
  &_swigt__p_Stomp__AngularVector__iterator,
  &_swigt__p_Stomp__AnnulusBound,
  &_swigt__p_Stomp__AnnulusVector__iterator,
  &_swigt__p_Stomp__BaseMap,
  &_swigt__p_Stomp__BinVector__iterator,
  &_swigt__p_Stomp__CircleBound,
  &_swigt__p_Stomp__CircleVector__iterator,
  &_swigt__p_Stomp__CosmoCoordinate,
  &_swigt__p_Stomp__CosmoPtrVector__iterator,
  &_swigt__p_Stomp__CosmoVector__iterator,
  &_swigt__p_Stomp__Cosmology,
  &_swigt__p_Stomp__CoverageDict__iterator,
  &_swigt__p_Stomp__FieldColumnDict__iterator,
  &_swigt__p_Stomp__FieldDict__iterator,
  &_swigt__p_Stomp__GeometricBound,
  &_swigt__p_Stomp__Histogram,
  &_swigt__p_Stomp__HistogramBin,
  &_swigt__p_Stomp__IAngularPtrVector__iterator,
  &_swigt__p_Stomp__IAngularVector__iterator,
  &_swigt__p_Stomp__IndexVector__iterator,
  &_swigt__p_Stomp__IndexedAngularCoordinate,
  &_swigt__p_Stomp__IndexedTreeMap,
  &_swigt__p_Stomp__IndexedTreeNeighbor,
  &_swigt__p_Stomp__IndexedTreePixel,
  &_swigt__p_Stomp__LatLonBound,
  &_swigt__p_Stomp__LatLonVector__iterator,
  &_swigt__p_Stomp__LatitudeBound,
  &_swigt__p_Stomp__LatitudeVector__iterator,
  &_swigt__p_Stomp__LongitudeBound,
  &_swigt__p_Stomp__LongitudeVector__iterator,
  &_swigt__p_Stomp__Map,
  &_swigt__p_Stomp__NearestNeighborIndexedPixel,
  &_swigt__p_Stomp__NearestNeighborIndexedPoint,
  &_swigt__p_Stomp__NearestNeighborPixel,
  &_swigt__p_Stomp__NearestNeighborPoint,
  &_swigt__p_Stomp__Pixel,
  &_swigt__p_Stomp__PixelOrdering,
  &_swigt__p_Stomp__PixelPtrVector__iterator,
  &_swigt__p_Stomp__PixelVector__iterator,
  &_swigt__p_Stomp__PolygonBound,
  &_swigt__p_Stomp__PolygonVector__iterator,
  &_swigt__p_Stomp__RadialBin,
  &_swigt__p_Stomp__RadialPtrVector__iterator,
  &_swigt__p_Stomp__RadialVector__iterator,
  &_swigt__p_Stomp__RegionAreaDict__iterator,
  &_swigt__p_Stomp__RegionBound,
  &_swigt__p_Stomp__RegionBoundVector__iterator,
  &_swigt__p_Stomp__RegionDict__iterator,
  &_swigt__p_Stomp__RegionMap,
  &_swigt__p_Stomp__ResolutionDict__iterator,
  &_swigt__p_Stomp__ScalarMap,
  &_swigt__p_Stomp__ScalarMapVector__iterator,
  &_swigt__p_Stomp__ScalarPixel,
  &_swigt__p_Stomp__ScalarPtrVector__iterator,
  &_swigt__p_Stomp__ScalarVector__iterator,
  &_swigt__p_Stomp__StompWatch,
  &_swigt__p_Stomp__SubMap,
  &_swigt__p_Stomp__SubMapVector__iterator,
  &_swigt__p_Stomp__ThetaPtrVector__iterator,
  &_swigt__p_Stomp__ThetaVector__iterator,
  &_swigt__p_Stomp__TreeMap,
  &_swigt__p_Stomp__TreeNeighbor,
  &_swigt__p_Stomp__TreePixel,
  &_swigt__p_Stomp__WAngularPtrVector__iterator,
  &_swigt__p_Stomp__WAngularVector__iterator,
  &_swigt__p_Stomp__WThetaVector__iterator,
  &_swigt__p_Stomp__WedgeBound,
  &_swigt__p_Stomp__WedgeVector__iterator,
  &_swigt__p_Stomp__WeightedAngularCoordinate,
  &_swigt__p_Stomp__section,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_long_long,
  &_swigt__p_mapped_type,
  &_swigt__p_p_PyObject,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__lessT_std__string_t,
  &_swigt__p_std__mapT_Stomp__Pixel_const_bool_Stomp__PixelOrdering_std__allocatorT_std__pairT_Stomp__Pixel_const_const_bool_t_t_t,
  &_swigt__p_std__mapT_short_const_double_std__lessT_short_const_t_std__allocatorT_std__pairT_short_const_const_double_t_t_t,
  &_swigt__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t,
  &_swigt__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t__allocator_type,
  &_swigt__p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,
  &_swigt__p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t__allocator_type,
  &_swigt__p_std__mapT_unsigned_int_const_short_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_short_t_t_t,
  &_swigt__p_std__mapT_unsigned_int_const_unsigned_int_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_unsigned_int_t_t_t,
  &_swigt__p_std__pairT_Stomp__PixelVector__iterator_Stomp__PixelVector__iterator_t,
  &_swigt__p_std__pairT_Stomp__RadialVector__iterator_Stomp__RadialVector__iterator_t,
  &_swigt__p_std__pairT_Stomp__RegionAreaDict__iterator_Stomp__RegionAreaDict__iterator_t,
  &_swigt__p_std__pairT_Stomp__RegionDict__iterator_Stomp__RegionDict__iterator_t,
  &_swigt__p_std__pairT_Stomp__ResolutionDict__iterator_Stomp__ResolutionDict__iterator_t,
  &_swigt__p_std__pairT_Stomp__ScalarMapVector__iterator_Stomp__ScalarMapVector__iterator_t,
  &_swigt__p_std__pairT_Stomp__ScalarVector__iterator_Stomp__ScalarVector__iterator_t,
  &_swigt__p_std__pairT_Stomp__SubMapVector__iterator_Stomp__SubMapVector__iterator_t,
  &_swigt__p_std__pairT_Stomp__ThetaVector__iterator_Stomp__ThetaVector__iterator_t,
  &_swigt__p_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t,
  &_swigt__p_std__pairT_double_Stomp__IndexedTreePixel_p_t,
  &_swigt__p_std__pairT_double_Stomp__TreePixel_p_t,
  &_swigt__p_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t,
  &_swigt__p_std__pairT_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_t,
  &_swigt__p_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t,
  &_swigt__p_std__priority_queueT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborIndexedPoint_t,
  &_swigt__p_std__priority_queueT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__vectorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_t_t_Stomp__NearestNeighborIndexedPixel_t,
  &_swigt__p_std__priority_queueT_std__pairT_double_Stomp__TreePixel_p_t_std__vectorT_std__pairT_double_Stomp__TreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__TreePixel_p_t_t_t_Stomp__NearestNeighborPixel_t,
  &_swigt__p_std__priority_queueT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborPoint_t,
  &_swigt__p_std__vectorT_Stomp__AngularBin_p_std__allocatorT_Stomp__AngularBin_p_t_t,
  &_swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t,
  &_swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__allocator_type,
  &_swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__const_iterator,
  &_swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type,
  &_swigt__p_std__vectorT_Stomp__AngularCoordinate_p_std__allocatorT_Stomp__AngularCoordinate_p_t_t,
  &_swigt__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,
  &_swigt__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__allocator_type,
  &_swigt__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type,
  &_swigt__p_std__vectorT_Stomp__AngularCorrelation_std__allocatorT_Stomp__AngularCorrelation_t_t,
  &_swigt__p_std__vectorT_Stomp__AnnulusBound_std__allocatorT_Stomp__AnnulusBound_t_t,
  &_swigt__p_std__vectorT_Stomp__CircleBound_std__allocatorT_Stomp__CircleBound_t_t,
  &_swigt__p_std__vectorT_Stomp__CosmoCoordinate_p_std__allocatorT_Stomp__CosmoCoordinate_p_t_t,
  &_swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,
  &_swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__allocator_type,
  &_swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type,
  &_swigt__p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t,
  &_swigt__p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t__const_iterator,
  &_swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_p_std__allocatorT_Stomp__IndexedAngularCoordinate_p_t_t,
  &_swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,
  &_swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__allocator_type,
  &_swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type,
  &_swigt__p_std__vectorT_Stomp__LatLonBound_std__allocatorT_Stomp__LatLonBound_t_t,
  &_swigt__p_std__vectorT_Stomp__LatitudeBound_std__allocatorT_Stomp__LatitudeBound_t_t,
  &_swigt__p_std__vectorT_Stomp__LongitudeBound_std__allocatorT_Stomp__LongitudeBound_t_t,
  &_swigt__p_std__vectorT_Stomp__Pixel_p_std__allocatorT_Stomp__Pixel_p_t_t,
  &_swigt__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,
  &_swigt__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__allocator_type,
  &_swigt__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type,
  &_swigt__p_std__vectorT_Stomp__PolygonBound_std__allocatorT_Stomp__PolygonBound_t_t,
  &_swigt__p_std__vectorT_Stomp__RadialBin_p_std__allocatorT_Stomp__RadialBin_p_t_t,
  &_swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t,
  &_swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__allocator_type,
  &_swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type,
  &_swigt__p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t,
  &_swigt__p_std__vectorT_Stomp__ScalarMap_std__allocatorT_Stomp__ScalarMap_t_t,
  &_swigt__p_std__vectorT_Stomp__ScalarPixel_p_std__allocatorT_Stomp__ScalarPixel_p_t_t,
  &_swigt__p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t,
  &_swigt__p_std__vectorT_Stomp__SubMap_std__allocatorT_Stomp__SubMap_t_t,
  &_swigt__p_std__vectorT_Stomp__WedgeBound_std__allocatorT_Stomp__WedgeBound_t_t,
  &_swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_p_std__allocatorT_Stomp__WeightedAngularCoordinate_p_t_t,
  &_swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,
  &_swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__allocator_type,
  &_swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type,
  &_swigt__p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type,
  &_swigt__p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type,
  &_swigt__p_swig__PySwigIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Stomp__AngularBin[] = {  {&_swigt__p_Stomp__RadialBin, _p_Stomp__RadialBinTo_p_Stomp__AngularBin, 0, 0},  {&_swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, _p_Stomp__RadialBinTo_p_Stomp__AngularBin, 0, 0},  {&_swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type, 0, 0, 0},  {&_swigt__p_Stomp__AngularBin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__AngularCoordinate[] = {  {&_swigt__p_Stomp__AngularCoordinate, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type, 0, 0, 0},  {&_swigt__p_Stomp__WeightedAngularCoordinate, _p_Stomp__WeightedAngularCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},  {&_swigt__p_Stomp__CosmoCoordinate, _p_Stomp__CosmoCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},  {&_swigt__p_Stomp__IndexedAngularCoordinate, _p_Stomp__IndexedAngularCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},  {&_swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, _p_Stomp__CosmoCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},  {&_swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, _p_Stomp__WeightedAngularCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},  {&_swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, _p_Stomp__IndexedAngularCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__AngularCorrelation[] = {  {&_swigt__p_Stomp__AngularCorrelation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__AngularPtrVector__iterator[] = {  {&_swigt__p_Stomp__AngularPtrVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__AngularVector__iterator[] = {  {&_swigt__p_Stomp__AngularVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__AnnulusBound[] = {  {&_swigt__p_Stomp__AnnulusBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__AnnulusVector__iterator[] = {  {&_swigt__p_Stomp__AnnulusVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__BaseMap[] = {  {&_swigt__p_Stomp__BaseMap, 0, 0, 0},  {&_swigt__p_Stomp__ScalarMap, _p_Stomp__ScalarMapTo_p_Stomp__BaseMap, 0, 0},  {&_swigt__p_Stomp__Map, _p_Stomp__MapTo_p_Stomp__BaseMap, 0, 0},  {&_swigt__p_Stomp__TreeMap, _p_Stomp__TreeMapTo_p_Stomp__BaseMap, 0, 0},  {&_swigt__p_Stomp__IndexedTreeMap, _p_Stomp__IndexedTreeMapTo_p_Stomp__BaseMap, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__BinVector__iterator[] = {  {&_swigt__p_Stomp__BinVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__CircleBound[] = {  {&_swigt__p_Stomp__CircleBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__CircleVector__iterator[] = {  {&_swigt__p_Stomp__CircleVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__CosmoCoordinate[] = {  {&_swigt__p_Stomp__CosmoCoordinate, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__CosmoPtrVector__iterator[] = {  {&_swigt__p_Stomp__CosmoPtrVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__CosmoVector__iterator[] = {  {&_swigt__p_Stomp__CosmoVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__Cosmology[] = {  {&_swigt__p_Stomp__Cosmology, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__CoverageDict__iterator[] = {  {&_swigt__p_Stomp__CoverageDict__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__FieldColumnDict__iterator[] = {  {&_swigt__p_Stomp__FieldColumnDict__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__FieldDict__iterator[] = {  {&_swigt__p_Stomp__FieldDict__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__GeometricBound[] = {  {&_swigt__p_Stomp__GeometricBound, 0, 0, 0},  {&_swigt__p_Stomp__PolygonBound, _p_Stomp__PolygonBoundTo_p_Stomp__GeometricBound, 0, 0},  {&_swigt__p_Stomp__LatLonBound, _p_Stomp__LatLonBoundTo_p_Stomp__GeometricBound, 0, 0},  {&_swigt__p_Stomp__AnnulusBound, _p_Stomp__AnnulusBoundTo_p_Stomp__GeometricBound, 0, 0},  {&_swigt__p_Stomp__WedgeBound, _p_Stomp__WedgeBoundTo_p_Stomp__GeometricBound, 0, 0},  {&_swigt__p_Stomp__CircleBound, _p_Stomp__CircleBoundTo_p_Stomp__GeometricBound, 0, 0},  {&_swigt__p_Stomp__LongitudeBound, _p_Stomp__LongitudeBoundTo_p_Stomp__GeometricBound, 0, 0},  {&_swigt__p_Stomp__LatitudeBound, _p_Stomp__LatitudeBoundTo_p_Stomp__GeometricBound, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__Histogram[] = {  {&_swigt__p_Stomp__Histogram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__HistogramBin[] = {  {&_swigt__p_Stomp__HistogramBin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__IAngularPtrVector__iterator[] = {  {&_swigt__p_Stomp__IAngularPtrVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__IAngularVector__iterator[] = {  {&_swigt__p_Stomp__IAngularVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__IndexVector__iterator[] = {  {&_swigt__p_Stomp__IndexVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__IndexedAngularCoordinate[] = {  {&_swigt__p_Stomp__IndexedAngularCoordinate, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__IndexedTreeMap[] = {  {&_swigt__p_Stomp__IndexedTreeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__IndexedTreeNeighbor[] = {  {&_swigt__p_Stomp__IndexedTreeNeighbor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__IndexedTreePixel[] = {  {&_swigt__p_Stomp__IndexedTreePixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__LatLonBound[] = {  {&_swigt__p_Stomp__LatLonBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__LatLonVector__iterator[] = {  {&_swigt__p_Stomp__LatLonVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__LatitudeBound[] = {  {&_swigt__p_Stomp__LatitudeBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__LatitudeVector__iterator[] = {  {&_swigt__p_Stomp__LatitudeVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__LongitudeBound[] = {  {&_swigt__p_Stomp__LongitudeBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__LongitudeVector__iterator[] = {  {&_swigt__p_Stomp__LongitudeVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__Map[] = {  {&_swigt__p_Stomp__Map, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__NearestNeighborIndexedPixel[] = {  {&_swigt__p_Stomp__NearestNeighborIndexedPixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__NearestNeighborIndexedPoint[] = {  {&_swigt__p_Stomp__NearestNeighborIndexedPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__NearestNeighborPixel[] = {  {&_swigt__p_Stomp__NearestNeighborPixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__NearestNeighborPoint[] = {  {&_swigt__p_Stomp__NearestNeighborPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__Pixel[] = {  {&_swigt__p_Stomp__ScalarPixel, _p_Stomp__ScalarPixelTo_p_Stomp__Pixel, 0, 0},  {&_swigt__p_Stomp__TreePixel, _p_Stomp__TreePixelTo_p_Stomp__Pixel, 0, 0},  {&_swigt__p_Stomp__IndexedTreePixel, _p_Stomp__IndexedTreePixelTo_p_Stomp__Pixel, 0, 0},  {&_swigt__p_Stomp__Pixel, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__PixelOrdering[] = {  {&_swigt__p_Stomp__PixelOrdering, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__PixelPtrVector__iterator[] = {  {&_swigt__p_Stomp__PixelPtrVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__PixelVector__iterator[] = {  {&_swigt__p_Stomp__PixelVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__PolygonBound[] = {  {&_swigt__p_Stomp__PolygonBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__PolygonVector__iterator[] = {  {&_swigt__p_Stomp__PolygonVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__RadialBin[] = {  {&_swigt__p_Stomp__RadialBin, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__RadialPtrVector__iterator[] = {  {&_swigt__p_Stomp__RadialPtrVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__RadialVector__iterator[] = {  {&_swigt__p_Stomp__RadialVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__RegionAreaDict__iterator[] = {  {&_swigt__p_Stomp__RegionAreaDict__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__RegionBound[] = {  {&_swigt__p_Stomp__RegionBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__RegionBoundVector__iterator[] = {  {&_swigt__p_Stomp__RegionBoundVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__RegionDict__iterator[] = {  {&_swigt__p_Stomp__RegionDict__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__RegionMap[] = {  {&_swigt__p_Stomp__RegionMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__ResolutionDict__iterator[] = {  {&_swigt__p_Stomp__ResolutionDict__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__ScalarMap[] = {  {&_swigt__p_Stomp__ScalarMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__ScalarMapVector__iterator[] = {  {&_swigt__p_Stomp__ScalarMapVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__ScalarPixel[] = {  {&_swigt__p_Stomp__ScalarPixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__ScalarPtrVector__iterator[] = {  {&_swigt__p_Stomp__ScalarPtrVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__ScalarVector__iterator[] = {  {&_swigt__p_Stomp__ScalarVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__StompWatch[] = {  {&_swigt__p_Stomp__StompWatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__SubMap[] = {  {&_swigt__p_Stomp__SubMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__SubMapVector__iterator[] = {  {&_swigt__p_Stomp__SubMapVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__ThetaPtrVector__iterator[] = {  {&_swigt__p_Stomp__ThetaPtrVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__ThetaVector__iterator[] = {  {&_swigt__p_Stomp__ThetaVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__TreeMap[] = {  {&_swigt__p_Stomp__TreeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__TreeNeighbor[] = {  {&_swigt__p_Stomp__TreeNeighbor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__TreePixel[] = {  {&_swigt__p_Stomp__TreePixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__WAngularPtrVector__iterator[] = {  {&_swigt__p_Stomp__WAngularPtrVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__WAngularVector__iterator[] = {  {&_swigt__p_Stomp__WAngularVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__WThetaVector__iterator[] = {  {&_swigt__p_Stomp__WThetaVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__WedgeBound[] = {  {&_swigt__p_Stomp__WedgeBound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__WedgeVector__iterator[] = {  {&_swigt__p_Stomp__WedgeVector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__WeightedAngularCoordinate[] = {  {&_swigt__p_Stomp__WeightedAngularCoordinate, 0, 0, 0},  {&_swigt__p_Stomp__CosmoCoordinate, _p_Stomp__CosmoCoordinateTo_p_Stomp__WeightedAngularCoordinate, 0, 0},  {&_swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, _p_Stomp__CosmoCoordinateTo_p_Stomp__WeightedAngularCoordinate, 0, 0},  {&_swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Stomp__section[] = {  {&_swigt__p_Stomp__section, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__string_t[] = {  {&_swigt__p_std__lessT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_Stomp__Pixel_const_bool_Stomp__PixelOrdering_std__allocatorT_std__pairT_Stomp__Pixel_const_const_bool_t_t_t[] = {  {&_swigt__p_std__mapT_Stomp__Pixel_const_bool_Stomp__PixelOrdering_std__allocatorT_std__pairT_Stomp__Pixel_const_const_bool_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_short_const_double_std__lessT_short_const_t_std__allocatorT_std__pairT_short_const_const_double_t_t_t[] = {  {&_swigt__p_std__mapT_short_const_double_std__lessT_short_const_t_std__allocatorT_std__pairT_short_const_const_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t__allocator_type[] = {  {&_swigt__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t__allocator_type[] = {  {&_swigt__p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_unsigned_int_const_short_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_short_t_t_t[] = {  {&_swigt__p_std__mapT_unsigned_int_const_short_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_short_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_unsigned_int_const_unsigned_int_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_unsigned_int_t_t_t[] = {  {&_swigt__p_std__mapT_unsigned_int_const_unsigned_int_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_unsigned_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_Stomp__PixelVector__iterator_Stomp__PixelVector__iterator_t[] = {  {&_swigt__p_std__pairT_Stomp__PixelVector__iterator_Stomp__PixelVector__iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_Stomp__RadialVector__iterator_Stomp__RadialVector__iterator_t[] = {  {&_swigt__p_std__pairT_Stomp__RadialVector__iterator_Stomp__RadialVector__iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_Stomp__RegionAreaDict__iterator_Stomp__RegionAreaDict__iterator_t[] = {  {&_swigt__p_std__pairT_Stomp__RegionAreaDict__iterator_Stomp__RegionAreaDict__iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_Stomp__RegionDict__iterator_Stomp__RegionDict__iterator_t[] = {  {&_swigt__p_std__pairT_Stomp__RegionDict__iterator_Stomp__RegionDict__iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_Stomp__ResolutionDict__iterator_Stomp__ResolutionDict__iterator_t[] = {  {&_swigt__p_std__pairT_Stomp__ResolutionDict__iterator_Stomp__ResolutionDict__iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_Stomp__ScalarMapVector__iterator_Stomp__ScalarMapVector__iterator_t[] = {  {&_swigt__p_std__pairT_Stomp__ScalarMapVector__iterator_Stomp__ScalarMapVector__iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_Stomp__ScalarVector__iterator_Stomp__ScalarVector__iterator_t[] = {  {&_swigt__p_std__pairT_Stomp__ScalarVector__iterator_Stomp__ScalarVector__iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_Stomp__SubMapVector__iterator_Stomp__SubMapVector__iterator_t[] = {  {&_swigt__p_std__pairT_Stomp__SubMapVector__iterator_Stomp__SubMapVector__iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_Stomp__ThetaVector__iterator_Stomp__ThetaVector__iterator_t[] = {  {&_swigt__p_std__pairT_Stomp__ThetaVector__iterator_Stomp__ThetaVector__iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t[] = {  {&_swigt__p_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_double_Stomp__IndexedTreePixel_p_t[] = {  {&_swigt__p_std__pairT_double_Stomp__IndexedTreePixel_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_double_Stomp__TreePixel_p_t[] = {  {&_swigt__p_std__pairT_double_Stomp__TreePixel_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t[] = {  {&_swigt__p_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_t[] = {  {&_swigt__p_std__pairT_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t[] = {  {&_swigt__p_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__priority_queueT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborIndexedPoint_t[] = {  {&_swigt__p_std__priority_queueT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborIndexedPoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__priority_queueT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__vectorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_t_t_Stomp__NearestNeighborIndexedPixel_t[] = {  {&_swigt__p_std__priority_queueT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__vectorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_t_t_Stomp__NearestNeighborIndexedPixel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__priority_queueT_std__pairT_double_Stomp__TreePixel_p_t_std__vectorT_std__pairT_double_Stomp__TreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__TreePixel_p_t_t_t_Stomp__NearestNeighborPixel_t[] = {  {&_swigt__p_std__priority_queueT_std__pairT_double_Stomp__TreePixel_p_t_std__vectorT_std__pairT_double_Stomp__TreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__TreePixel_p_t_t_t_Stomp__NearestNeighborPixel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__priority_queueT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborPoint_t[] = {  {&_swigt__p_std__priority_queueT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborPoint_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__AngularBin_p_std__allocatorT_Stomp__AngularBin_p_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__AngularBin_p_std__allocatorT_Stomp__AngularBin_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__const_iterator[] = {  {&_swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type[] = {  {&_swigt__p_Stomp__RadialBin, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, _p_Stomp__RadialBinTo_p_Stomp__AngularBin, 0, 0},  {&_swigt__p_Stomp__AngularBin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__AngularCoordinate_p_std__allocatorT_Stomp__AngularCoordinate_p_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__AngularCoordinate_p_std__allocatorT_Stomp__AngularCoordinate_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type[] = {  {&_swigt__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type, 0, 0, 0},  {&_swigt__p_Stomp__AngularCoordinate, 0, 0, 0},  {&_swigt__p_Stomp__WeightedAngularCoordinate, _p_Stomp__WeightedAngularCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},  {&_swigt__p_Stomp__CosmoCoordinate, _p_Stomp__CosmoCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},  {&_swigt__p_Stomp__IndexedAngularCoordinate, _p_Stomp__IndexedAngularCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},  {&_swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, _p_Stomp__CosmoCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},  {&_swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, _p_Stomp__WeightedAngularCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},  {&_swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, _p_Stomp__IndexedAngularCoordinateTo_p_Stomp__AngularCoordinate, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__AngularCorrelation_std__allocatorT_Stomp__AngularCorrelation_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__AngularCorrelation_std__allocatorT_Stomp__AngularCorrelation_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__AnnulusBound_std__allocatorT_Stomp__AnnulusBound_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__AnnulusBound_std__allocatorT_Stomp__AnnulusBound_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__CircleBound_std__allocatorT_Stomp__CircleBound_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__CircleBound_std__allocatorT_Stomp__CircleBound_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__CosmoCoordinate_p_std__allocatorT_Stomp__CosmoCoordinate_p_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__CosmoCoordinate_p_std__allocatorT_Stomp__CosmoCoordinate_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type[] = {  {&_swigt__p_Stomp__CosmoCoordinate, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t__const_iterator[] = {  {&_swigt__p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__IndexedAngularCoordinate_p_std__allocatorT_Stomp__IndexedAngularCoordinate_p_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_p_std__allocatorT_Stomp__IndexedAngularCoordinate_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type[] = {  {&_swigt__p_Stomp__IndexedAngularCoordinate, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__LatLonBound_std__allocatorT_Stomp__LatLonBound_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__LatLonBound_std__allocatorT_Stomp__LatLonBound_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__LatitudeBound_std__allocatorT_Stomp__LatitudeBound_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__LatitudeBound_std__allocatorT_Stomp__LatitudeBound_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__LongitudeBound_std__allocatorT_Stomp__LongitudeBound_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__LongitudeBound_std__allocatorT_Stomp__LongitudeBound_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__Pixel_p_std__allocatorT_Stomp__Pixel_p_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__Pixel_p_std__allocatorT_Stomp__Pixel_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type[] = {  {&_swigt__p_Stomp__ScalarPixel, _p_Stomp__ScalarPixelTo_p_Stomp__Pixel, 0, 0},  {&_swigt__p_Stomp__TreePixel, 0, 0, 0},  {&_swigt__p_Stomp__IndexedTreePixel, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type, 0, 0, 0},  {&_swigt__p_Stomp__Pixel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__PolygonBound_std__allocatorT_Stomp__PolygonBound_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__PolygonBound_std__allocatorT_Stomp__PolygonBound_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__RadialBin_p_std__allocatorT_Stomp__RadialBin_p_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__RadialBin_p_std__allocatorT_Stomp__RadialBin_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type[] = {  {&_swigt__p_Stomp__RadialBin, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__ScalarMap_std__allocatorT_Stomp__ScalarMap_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__ScalarMap_std__allocatorT_Stomp__ScalarMap_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__ScalarPixel_p_std__allocatorT_Stomp__ScalarPixel_p_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__ScalarPixel_p_std__allocatorT_Stomp__ScalarPixel_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__SubMap_std__allocatorT_Stomp__SubMap_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__SubMap_std__allocatorT_Stomp__SubMap_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__WedgeBound_std__allocatorT_Stomp__WedgeBound_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__WedgeBound_std__allocatorT_Stomp__WedgeBound_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__WeightedAngularCoordinate_p_std__allocatorT_Stomp__WeightedAngularCoordinate_p_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_p_std__allocatorT_Stomp__WeightedAngularCoordinate_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type[] = {  {&_swigt__p_Stomp__WeightedAngularCoordinate, 0, 0, 0},  {&_swigt__p_Stomp__CosmoCoordinate, _p_Stomp__CosmoCoordinateTo_p_Stomp__WeightedAngularCoordinate, 0, 0},  {&_swigt__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type, 0, 0, 0},  {&_swigt__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type, _p_Stomp__CosmoCoordinateTo_p_Stomp__WeightedAngularCoordinate, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t[] = {  {&_swigt__p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t[] = {  {&_swigt__p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__PySwigIterator[] = {  {&_swigt__p_swig__PySwigIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Stomp__AngularBin,
  _swigc__p_Stomp__AngularCoordinate,
  _swigc__p_Stomp__AngularCorrelation,
  _swigc__p_Stomp__AngularPtrVector__iterator,
  _swigc__p_Stomp__AngularVector__iterator,
  _swigc__p_Stomp__AnnulusBound,
  _swigc__p_Stomp__AnnulusVector__iterator,
  _swigc__p_Stomp__BaseMap,
  _swigc__p_Stomp__BinVector__iterator,
  _swigc__p_Stomp__CircleBound,
  _swigc__p_Stomp__CircleVector__iterator,
  _swigc__p_Stomp__CosmoCoordinate,
  _swigc__p_Stomp__CosmoPtrVector__iterator,
  _swigc__p_Stomp__CosmoVector__iterator,
  _swigc__p_Stomp__Cosmology,
  _swigc__p_Stomp__CoverageDict__iterator,
  _swigc__p_Stomp__FieldColumnDict__iterator,
  _swigc__p_Stomp__FieldDict__iterator,
  _swigc__p_Stomp__GeometricBound,
  _swigc__p_Stomp__Histogram,
  _swigc__p_Stomp__HistogramBin,
  _swigc__p_Stomp__IAngularPtrVector__iterator,
  _swigc__p_Stomp__IAngularVector__iterator,
  _swigc__p_Stomp__IndexVector__iterator,
  _swigc__p_Stomp__IndexedAngularCoordinate,
  _swigc__p_Stomp__IndexedTreeMap,
  _swigc__p_Stomp__IndexedTreeNeighbor,
  _swigc__p_Stomp__IndexedTreePixel,
  _swigc__p_Stomp__LatLonBound,
  _swigc__p_Stomp__LatLonVector__iterator,
  _swigc__p_Stomp__LatitudeBound,
  _swigc__p_Stomp__LatitudeVector__iterator,
  _swigc__p_Stomp__LongitudeBound,
  _swigc__p_Stomp__LongitudeVector__iterator,
  _swigc__p_Stomp__Map,
  _swigc__p_Stomp__NearestNeighborIndexedPixel,
  _swigc__p_Stomp__NearestNeighborIndexedPoint,
  _swigc__p_Stomp__NearestNeighborPixel,
  _swigc__p_Stomp__NearestNeighborPoint,
  _swigc__p_Stomp__Pixel,
  _swigc__p_Stomp__PixelOrdering,
  _swigc__p_Stomp__PixelPtrVector__iterator,
  _swigc__p_Stomp__PixelVector__iterator,
  _swigc__p_Stomp__PolygonBound,
  _swigc__p_Stomp__PolygonVector__iterator,
  _swigc__p_Stomp__RadialBin,
  _swigc__p_Stomp__RadialPtrVector__iterator,
  _swigc__p_Stomp__RadialVector__iterator,
  _swigc__p_Stomp__RegionAreaDict__iterator,
  _swigc__p_Stomp__RegionBound,
  _swigc__p_Stomp__RegionBoundVector__iterator,
  _swigc__p_Stomp__RegionDict__iterator,
  _swigc__p_Stomp__RegionMap,
  _swigc__p_Stomp__ResolutionDict__iterator,
  _swigc__p_Stomp__ScalarMap,
  _swigc__p_Stomp__ScalarMapVector__iterator,
  _swigc__p_Stomp__ScalarPixel,
  _swigc__p_Stomp__ScalarPtrVector__iterator,
  _swigc__p_Stomp__ScalarVector__iterator,
  _swigc__p_Stomp__StompWatch,
  _swigc__p_Stomp__SubMap,
  _swigc__p_Stomp__SubMapVector__iterator,
  _swigc__p_Stomp__ThetaPtrVector__iterator,
  _swigc__p_Stomp__ThetaVector__iterator,
  _swigc__p_Stomp__TreeMap,
  _swigc__p_Stomp__TreeNeighbor,
  _swigc__p_Stomp__TreePixel,
  _swigc__p_Stomp__WAngularPtrVector__iterator,
  _swigc__p_Stomp__WAngularVector__iterator,
  _swigc__p_Stomp__WThetaVector__iterator,
  _swigc__p_Stomp__WedgeBound,
  _swigc__p_Stomp__WedgeVector__iterator,
  _swigc__p_Stomp__WeightedAngularCoordinate,
  _swigc__p_Stomp__section,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_long_long,
  _swigc__p_mapped_type,
  _swigc__p_p_PyObject,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__lessT_std__string_t,
  _swigc__p_std__mapT_Stomp__Pixel_const_bool_Stomp__PixelOrdering_std__allocatorT_std__pairT_Stomp__Pixel_const_const_bool_t_t_t,
  _swigc__p_std__mapT_short_const_double_std__lessT_short_const_t_std__allocatorT_std__pairT_short_const_const_double_t_t_t,
  _swigc__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t,
  _swigc__p_std__mapT_std__string_double_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_double_t_t_t__allocator_type,
  _swigc__p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t,
  _swigc__p_std__mapT_std__string_unsigned_char_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_unsigned_char_t_t_t__allocator_type,
  _swigc__p_std__mapT_unsigned_int_const_short_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_short_t_t_t,
  _swigc__p_std__mapT_unsigned_int_const_unsigned_int_std__lessT_unsigned_int_const_t_std__allocatorT_std__pairT_unsigned_int_const_const_unsigned_int_t_t_t,
  _swigc__p_std__pairT_Stomp__PixelVector__iterator_Stomp__PixelVector__iterator_t,
  _swigc__p_std__pairT_Stomp__RadialVector__iterator_Stomp__RadialVector__iterator_t,
  _swigc__p_std__pairT_Stomp__RegionAreaDict__iterator_Stomp__RegionAreaDict__iterator_t,
  _swigc__p_std__pairT_Stomp__RegionDict__iterator_Stomp__RegionDict__iterator_t,
  _swigc__p_std__pairT_Stomp__ResolutionDict__iterator_Stomp__ResolutionDict__iterator_t,
  _swigc__p_std__pairT_Stomp__ScalarMapVector__iterator_Stomp__ScalarMapVector__iterator_t,
  _swigc__p_std__pairT_Stomp__ScalarVector__iterator_Stomp__ScalarVector__iterator_t,
  _swigc__p_std__pairT_Stomp__SubMapVector__iterator_Stomp__SubMapVector__iterator_t,
  _swigc__p_std__pairT_Stomp__ThetaVector__iterator_Stomp__ThetaVector__iterator_t,
  _swigc__p_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t,
  _swigc__p_std__pairT_double_Stomp__IndexedTreePixel_p_t,
  _swigc__p_std__pairT_double_Stomp__TreePixel_p_t,
  _swigc__p_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t,
  _swigc__p_std__pairT_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t_t,
  _swigc__p_std__pairT_unsigned_int_Stomp__PixelVector__iterator_t,
  _swigc__p_std__priority_queueT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborIndexedPoint_t,
  _swigc__p_std__priority_queueT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__vectorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__IndexedTreePixel_p_t_t_t_Stomp__NearestNeighborIndexedPixel_t,
  _swigc__p_std__priority_queueT_std__pairT_double_Stomp__TreePixel_p_t_std__vectorT_std__pairT_double_Stomp__TreePixel_p_t_std__allocatorT_std__pairT_double_Stomp__TreePixel_p_t_t_t_Stomp__NearestNeighborPixel_t,
  _swigc__p_std__priority_queueT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__vectorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_std__allocatorT_std__pairT_double_Stomp__WeightedAngularCoordinate_p_t_t_t_Stomp__NearestNeighborPoint_t,
  _swigc__p_std__vectorT_Stomp__AngularBin_p_std__allocatorT_Stomp__AngularBin_p_t_t,
  _swigc__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t,
  _swigc__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__allocator_type,
  _swigc__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__const_iterator,
  _swigc__p_std__vectorT_Stomp__AngularBin_std__allocatorT_Stomp__AngularBin_t_t__value_type,
  _swigc__p_std__vectorT_Stomp__AngularCoordinate_p_std__allocatorT_Stomp__AngularCoordinate_p_t_t,
  _swigc__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t,
  _swigc__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__allocator_type,
  _swigc__p_std__vectorT_Stomp__AngularCoordinate_std__allocatorT_Stomp__AngularCoordinate_t_t__value_type,
  _swigc__p_std__vectorT_Stomp__AngularCorrelation_std__allocatorT_Stomp__AngularCorrelation_t_t,
  _swigc__p_std__vectorT_Stomp__AnnulusBound_std__allocatorT_Stomp__AnnulusBound_t_t,
  _swigc__p_std__vectorT_Stomp__CircleBound_std__allocatorT_Stomp__CircleBound_t_t,
  _swigc__p_std__vectorT_Stomp__CosmoCoordinate_p_std__allocatorT_Stomp__CosmoCoordinate_p_t_t,
  _swigc__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t,
  _swigc__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__allocator_type,
  _swigc__p_std__vectorT_Stomp__CosmoCoordinate_std__allocatorT_Stomp__CosmoCoordinate_t_t__value_type,
  _swigc__p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t,
  _swigc__p_std__vectorT_Stomp__HistogramBin_std__allocatorT_Stomp__HistogramBin_t_t__const_iterator,
  _swigc__p_std__vectorT_Stomp__IndexedAngularCoordinate_p_std__allocatorT_Stomp__IndexedAngularCoordinate_p_t_t,
  _swigc__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t,
  _swigc__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__allocator_type,
  _swigc__p_std__vectorT_Stomp__IndexedAngularCoordinate_std__allocatorT_Stomp__IndexedAngularCoordinate_t_t__value_type,
  _swigc__p_std__vectorT_Stomp__LatLonBound_std__allocatorT_Stomp__LatLonBound_t_t,
  _swigc__p_std__vectorT_Stomp__LatitudeBound_std__allocatorT_Stomp__LatitudeBound_t_t,
  _swigc__p_std__vectorT_Stomp__LongitudeBound_std__allocatorT_Stomp__LongitudeBound_t_t,
  _swigc__p_std__vectorT_Stomp__Pixel_p_std__allocatorT_Stomp__Pixel_p_t_t,
  _swigc__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t,
  _swigc__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__allocator_type,
  _swigc__p_std__vectorT_Stomp__Pixel_std__allocatorT_Stomp__Pixel_t_t__value_type,
  _swigc__p_std__vectorT_Stomp__PolygonBound_std__allocatorT_Stomp__PolygonBound_t_t,
  _swigc__p_std__vectorT_Stomp__RadialBin_p_std__allocatorT_Stomp__RadialBin_p_t_t,
  _swigc__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t,
  _swigc__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__allocator_type,
  _swigc__p_std__vectorT_Stomp__RadialBin_std__allocatorT_Stomp__RadialBin_t_t__value_type,
  _swigc__p_std__vectorT_Stomp__RegionBound_std__allocatorT_Stomp__RegionBound_t_t,
  _swigc__p_std__vectorT_Stomp__ScalarMap_std__allocatorT_Stomp__ScalarMap_t_t,
  _swigc__p_std__vectorT_Stomp__ScalarPixel_p_std__allocatorT_Stomp__ScalarPixel_p_t_t,
  _swigc__p_std__vectorT_Stomp__ScalarPixel_std__allocatorT_Stomp__ScalarPixel_t_t,
  _swigc__p_std__vectorT_Stomp__SubMap_std__allocatorT_Stomp__SubMap_t_t,
  _swigc__p_std__vectorT_Stomp__WedgeBound_std__allocatorT_Stomp__WedgeBound_t_t,
  _swigc__p_std__vectorT_Stomp__WeightedAngularCoordinate_p_std__allocatorT_Stomp__WeightedAngularCoordinate_p_t_t,
  _swigc__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t,
  _swigc__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__allocator_type,
  _swigc__p_std__vectorT_Stomp__WeightedAngularCoordinate_std__allocatorT_Stomp__WeightedAngularCoordinate_t_t__value_type,
  _swigc__p_std__vectorT_Stomp__section_std__allocatorT_Stomp__section_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type,
  _swigc__p_std__vectorT_signed_char_std__allocatorT_signed_char_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t__allocator_type,
  _swigc__p_swig__PySwigIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
    return PyString_FromString("<Swig global variables>");
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
    PyObject *str = PyString_FromString("(");
    swig_globalvar  *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", PyString_AsString(str));
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,   /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc)swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      varlink_type.ob_type = &PyType_Type;
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
  PyObject *m, *d;
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"Pi",Swig_var_Pi_get, Swig_var_Pi_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DegToRad",Swig_var_DegToRad_get, Swig_var_DegToRad_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RadToDeg",Swig_var_RadToDeg_get, Swig_var_RadToDeg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StradToDeg",Swig_var_StradToDeg_get, Swig_var_StradToDeg_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EtaOffSet",Swig_var_EtaOffSet_get, Swig_var_EtaOffSet_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SurveyCenterRA",Swig_var_SurveyCenterRA_get, Swig_var_SurveyCenterRA_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SurveyCenterDEC",Swig_var_SurveyCenterDEC_get, Swig_var_SurveyCenterDEC_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Node",Swig_var_Node_get, Swig_var_Node_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"EtaPole",Swig_var_EtaPole_get, Swig_var_EtaPole_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Nx0",Swig_var_Nx0_get, Swig_var_Nx0_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Ny0",Swig_var_Ny0_get, Swig_var_Ny0_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HPixLevel",Swig_var_HPixLevel_get, Swig_var_HPixLevel_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MaxPixelLevel",Swig_var_MaxPixelLevel_get, Swig_var_MaxPixelLevel_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HPixResolution",Swig_var_HPixResolution_get, Swig_var_HPixResolution_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MaxPixelResolution",Swig_var_MaxPixelResolution_get, Swig_var_MaxPixelResolution_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ResolutionLevels",Swig_var_ResolutionLevels_get, Swig_var_ResolutionLevels_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HPixArea",Swig_var_HPixArea_get, Swig_var_HPixArea_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MaxPixnum",Swig_var_MaxPixnum_get, Swig_var_MaxPixnum_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MaxSuperpixnum",Swig_var_MaxSuperpixnum_get, Swig_var_MaxSuperpixnum_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Map_INSIDE_MAP",Swig_var_Map_INSIDE_MAP_get, Swig_var_Map_INSIDE_MAP_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Map_FIRST_QUADRANT_OK",Swig_var_Map_FIRST_QUADRANT_OK_get, Swig_var_Map_FIRST_QUADRANT_OK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Map_SECOND_QUADRANT_OK",Swig_var_Map_SECOND_QUADRANT_OK_get, Swig_var_Map_SECOND_QUADRANT_OK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Map_THIRD_QUADRANT_OK",Swig_var_Map_THIRD_QUADRANT_OK_get, Swig_var_Map_THIRD_QUADRANT_OK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Map_FOURTH_QUADRANT_OK",Swig_var_Map_FOURTH_QUADRANT_OK_get, Swig_var_Map_FOURTH_QUADRANT_OK_set);
  SWIG_Python_SetConstant(d, "ScalarMap_ScalarField",SWIG_From_int(static_cast< int >(Stomp::ScalarMap::ScalarField)));
  SWIG_Python_SetConstant(d, "ScalarMap_DensityField",SWIG_From_int(static_cast< int >(Stomp::ScalarMap::DensityField)));
  SWIG_Python_SetConstant(d, "ScalarMap_SampledField",SWIG_From_int(static_cast< int >(Stomp::ScalarMap::SampledField)));
  SWIG_addvarlink(SWIG_globals(),(char*)"Cosmology_omega_m",Swig_var_Cosmology_omega_m_get, Swig_var_Cosmology_omega_m_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Cosmology_h",Swig_var_Cosmology_h_get, Swig_var_Cosmology_h_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Cosmology_a_",Swig_var_Cosmology_a__get, Swig_var_Cosmology_a__set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Cosmology_b_",Swig_var_Cosmology_b__get, Swig_var_Cosmology_b__set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Cosmology_AA_",Swig_var_Cosmology_AA__get, Swig_var_Cosmology_AA__set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Cosmology_BB_",Swig_var_Cosmology_BB__get, Swig_var_Cosmology_BB__set);
  SWIG_Python_SetConstant(d, "AngularCoordinate_Survey",SWIG_From_int(static_cast< int >(Stomp::AngularCoordinate::Survey)));
  SWIG_Python_SetConstant(d, "AngularCoordinate_Equatorial",SWIG_From_int(static_cast< int >(Stomp::AngularCoordinate::Equatorial)));
  SWIG_Python_SetConstant(d, "AngularCoordinate_Galactic",SWIG_From_int(static_cast< int >(Stomp::AngularCoordinate::Galactic)));
}

